{
	"drawioXML": "<mxfile>\n  <diagram id=\"GPxszT6CFP9-z77PlEzT\" name=\"Page-1\">\n    <mxGraphModel dx=\"1886\" dy=\"958\" grid=\"0\" gridSize=\"10\" guides=\"1\" tooltips=\"1\" connect=\"0\" arrows=\"1\" fold=\"1\" page=\"0\" pageScale=\"1\" pageWidth=\"850\" pageHeight=\"1100\" math=\"0\" shadow=\"0\">\n      <root>\n        <mxCell id=\"0\" />\n        <mxCell id=\"1\" parent=\"0\" />\n      </root>\n    </mxGraphModel>\n  </diagram>\n</mxfile>\n",
	"fileName": "",
	"fileURL": "github",
	"repoData": {
		"src": {
			"path": "src",
			"fileName": "src",
			"cellName": "src",
			"cellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd",
			"visible": true,
			"children": [
				"src/renderer",
				"src/main"
			]
		},
		"src/main": {
			"path": "src/main",
			"fileName": "main",
			"cellName": "main",
			"cellId": "ae8820cf-4d61-4362-95a6-7e4e696983c9",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd",
			"children": [
				"src/main/ffmpeg.ts",
				"src/main/menu.ts"
			]
		},
		"src/main/ffmpeg.ts": {
			"path": "src/main/ffmpeg.ts",
			"fileName": "ffmpeg.ts",
			"cellName": "ffmpeg.ts",
			"cellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"visible": true,
			"parentCellId": "ae8820cf-4d61-4362-95a6-7e4e696983c9",
			"children": [
				"src/main/ffmpeg.ts-simstep-71c6a858-d542-42d7-a07f-3115d0cc0282",
				"src/main/ffmpeg.ts-simstep-9f118488-adc2-46d2-b279-12564ac743a2",
				"src/main/ffmpeg.ts-simstep-c4d240da-55bd-4a5c-8344-4805b4de5ee7",
				"src/main/ffmpeg.ts-simstep-fdc1105b-5396-4625-8593-2de2a5607002",
				"src/main/ffmpeg.ts-simstep-46dad3a4-09c5-458f-8c88-f7c4814b795d",
				"src/main/ffmpeg.ts-simstep-363ee372-3f9f-43d0-acda-51e465492ed8",
				"src/main/ffmpeg.ts-simstep-2d0570f4-1fa8-423f-b260-ccafedf532cd"
			]
		},
		"src/main/menu.ts": {
			"path": "src/main/menu.ts",
			"fileName": "menu.ts",
			"cellName": "menu.ts",
			"cellId": "88441075-1da1-4d60-b70b-8df973612076",
			"visible": true,
			"parentCellId": "ae8820cf-4d61-4362-95a6-7e4e696983c9",
			"children": [
				"src/main/menu.ts-simstep-b7677740-8ec1-460b-b648-5065f58d5814",
				"src/main/menu.ts-simstep-499f449b-956f-4be9-b7d9-f611f4750a84"
			]
		},
		"src/renderer": {
			"path": "src/renderer",
			"fileName": "renderer",
			"cellName": "renderer",
			"cellId": "00d3829d-efcf-4e0e-93bc-2c0a0db74e08",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd",
			"children": [
				"src/renderer/src"
			]
		},
		"src/renderer/src": {
			"path": "src/renderer/src",
			"fileName": "src",
			"cellName": "src",
			"cellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"visible": true,
			"parentCellId": "00d3829d-efcf-4e0e-93bc-2c0a0db74e08",
			"children": [
				"src/renderer/src/hooks",
				"src/renderer/src/BottomBar.tsx",
				"src/renderer/src/App.tsx",
				"src/renderer/src/components",
				"src/renderer/src/ffmpeg.ts",
				"src/renderer/src/StreamsSelector.tsx",
				"src/renderer/src/util",
				"src/renderer/src/edlStore.ts",
				"src/renderer/src/smartcut.ts",
				"src/renderer/src/Timeline.tsx"
			]
		},
		"src/renderer/src/App.tsx": {
			"path": "src/renderer/src/App.tsx",
			"fileName": "App.tsx",
			"cellName": "App.tsx",
			"cellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/App.tsx-simstep-d020487f-6f97-438e-a80b-aa9ba8d22b53",
				"src/renderer/src/App.tsx-simstep-f7e7d684-641a-4b90-93e5-6b7e10a0d042",
				"src/renderer/src/App.tsx-simstep-0013d881-3c4f-4a67-b096-4a030129bb50",
				"src/renderer/src/App.tsx-simstep-4b7e05e7-fa81-4ef9-964e-55fc440d9520",
				"src/renderer/src/App.tsx-simstep-1a71a446-0c7e-4e89-84e0-bb9ef8030a65",
				"src/renderer/src/App.tsx-simstep-020f8726-672b-4147-9e00-b722c8bfb78f",
				"src/renderer/src/App.tsx-simstep-c6840a3d-b648-42b9-b673-fa4a46179cb1",
				"src/renderer/src/App.tsx-simstep-28059b2c-b3f8-4b92-82e7-1d8879c55f09",
				"src/renderer/src/App.tsx-simstep-278bc31d-7961-4913-8728-2b35dfeadd27",
				"src/renderer/src/App.tsx-simstep-9b505063-8546-40e5-bb5d-0c098095b5bf",
				"src/renderer/src/App.tsx-simstep-39ed852a-5463-48d3-b73d-596fa4f17d22",
				"src/renderer/src/App.tsx-simstep-2c7384a6-3fdb-4bd1-abb4-f559c7cbf824",
				"src/renderer/src/App.tsx-simstep-6d52d5b1-94cd-4262-8998-f2e84172d5a5",
				"src/renderer/src/App.tsx-simstep-5f285d87-87e1-44c6-850c-31f2b8e93d3c",
				"src/renderer/src/App.tsx-simstep-6bfd2a9b-e07b-4406-9d07-c73bf0520b3d",
				"src/renderer/src/App.tsx-simstep-66bcd865-02d6-4ae0-ac5f-675e26038018",
				"src/renderer/src/App.tsx-simstep-858293d4-0a8e-4695-b475-e6559f0881b1"
			]
		},
		"src/renderer/src/BottomBar.tsx": {
			"path": "src/renderer/src/BottomBar.tsx",
			"fileName": "BottomBar.tsx",
			"cellName": "BottomBar.tsx",
			"cellId": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/BottomBar.tsx-simstep-c97e68f0-0cd5-40d5-bedf-e779622836b6",
				"src/renderer/src/BottomBar.tsx-simstep-dd747ef9-736f-4615-8b5e-e4792bcfa06b"
			]
		},
		"src/renderer/src/StreamsSelector.tsx": {
			"path": "src/renderer/src/StreamsSelector.tsx",
			"fileName": "StreamsSelector.tsx",
			"cellName": "StreamsSelector.tsx",
			"cellId": "3703cb7a-6500-43a5-8846-522dec2fd24d",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/StreamsSelector.tsx-simstep-3087e347-b5ed-4f67-97d9-12745403dad8",
				"src/renderer/src/StreamsSelector.tsx-simstep-ccc072ad-de56-4778-93da-5e63173b659d"
			]
		},
		"src/renderer/src/Timeline.tsx": {
			"path": "src/renderer/src/Timeline.tsx",
			"fileName": "Timeline.tsx",
			"cellName": "Timeline.tsx",
			"cellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/Timeline.tsx-simstep-b2c38fa4-8c3a-4a48-b8f6-d3f85c3af555",
				"src/renderer/src/Timeline.tsx-simstep-1ce92ba9-2623-4e03-bdd1-3c3cd9d78086",
				"src/renderer/src/Timeline.tsx-simstep-838a7ef2-7267-4c21-9196-d5bc1c06af30"
			]
		},
		"src/renderer/src/components": {
			"path": "src/renderer/src/components",
			"fileName": "components",
			"cellName": "components",
			"cellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/components/ConcatDialog.tsx",
				"src/renderer/src/components/OutputFormatSelect.tsx",
				"src/renderer/src/components/TagEditor.tsx",
				"src/renderer/src/components/ExportConfirm.tsx"
			]
		},
		"src/renderer/src/components/ConcatDialog.tsx": {
			"path": "src/renderer/src/components/ConcatDialog.tsx",
			"fileName": "ConcatDialog.tsx",
			"cellName": "ConcatDialog.tsx",
			"cellId": "74f51150-3da2-41a1-9c6e-30d5ced483a4",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"children": [
				"src/renderer/src/components/ConcatDialog.tsx-simstep-338e42f2-b700-4d84-b0c5-416c1144afdd"
			]
		},
		"src/renderer/src/components/ExportConfirm.tsx": {
			"path": "src/renderer/src/components/ExportConfirm.tsx",
			"fileName": "ExportConfirm.tsx",
			"cellName": "ExportConfirm.tsx",
			"cellId": "96a6f128-de66-457a-8146-b54529f206ae",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"children": [
				"src/renderer/src/components/ExportConfirm.tsx-simstep-e81559ca-edcf-4b1e-9b94-aead55c01a3c"
			]
		},
		"src/renderer/src/components/OutputFormatSelect.tsx": {
			"path": "src/renderer/src/components/OutputFormatSelect.tsx",
			"fileName": "OutputFormatSelect.tsx",
			"cellName": "OutputFormatSelect.tsx",
			"cellId": "ac75be33-a9fc-400f-b934-905ce044efd9",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"children": [
				"src/renderer/src/components/OutputFormatSelect.tsx-simstep-92161c88-d754-46fa-a5ec-7bd231c896a1"
			]
		},
		"src/renderer/src/components/TagEditor.tsx": {
			"path": "src/renderer/src/components/TagEditor.tsx",
			"fileName": "TagEditor.tsx",
			"cellName": "TagEditor.tsx",
			"cellId": "c38c2bea-da32-4ee2-b8bb-b76853988ffa",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"children": [
				"src/renderer/src/components/TagEditor.tsx-simstep-948204b8-b1e9-49af-b47a-2d281a967aee"
			]
		},
		"src/renderer/src/edlStore.ts": {
			"path": "src/renderer/src/edlStore.ts",
			"fileName": "edlStore.ts",
			"cellName": "edlStore.ts",
			"cellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/edlStore.ts-simstep-27acfa9c-8b4a-474c-9a67-65c54258a91c",
				"src/renderer/src/edlStore.ts-simstep-15839cff-a4a2-4b10-8de2-ec2f3ad75503",
				"src/renderer/src/edlStore.ts-simstep-0d68eab0-569a-436b-a6a2-640441e8056a"
			]
		},
		"src/renderer/src/ffmpeg.ts": {
			"path": "src/renderer/src/ffmpeg.ts",
			"fileName": "ffmpeg.ts",
			"cellName": "ffmpeg.ts",
			"cellId": "45dc8065-3870-4188-8b62-1d24c6224813",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"src/renderer/src/hooks": {
			"path": "src/renderer/src/hooks",
			"fileName": "hooks",
			"cellName": "hooks",
			"cellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/hooks/useSegments.ts",
				"src/renderer/src/hooks/useFfmpegOperations.ts",
				"src/renderer/src/hooks/useStreamsMeta.ts",
				"src/renderer/src/hooks/useFrameCapture.ts",
				"src/renderer/src/hooks/useThumbnails.ts",
				"src/renderer/src/hooks/useTimelineScroll.ts"
			]
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "useFfmpegOperations.ts",
			"cellId": "5649a414-611f-438b-8798-36092666feb1",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"children": [
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-42700cf0-b1d7-436d-8f3b-8b7b678299f9",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2b6dcbfc-67fb-40cb-aae2-13d11aa06d4b",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3c2123a1-6be4-4048-b6d3-8a11e718380c",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1f57a8af-ea7a-4d97-bdbb-7909b5b95fb9",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c22a07c2-1beb-467c-8a2b-a2a14784c5e6",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6cdaf881-1781-46b6-94a3-8c5d503c4d8c",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-00c406e5-0cc1-4137-a79e-a06564ec1000",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-419d66ba-777c-4d76-a53f-bf621628105d",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0bf0d1c6-6653-4711-8ec4-5484ce078298",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c0094ec7-6b75-431b-832a-fcb57ce2ff15",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6a1d34e9-e7d3-471c-b8e2-869676930d30",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2f1b29a0-1fd1-4d75-b295-d1355083b96b",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3dcf5bf-87cc-4610-a028-2fb93dfc4faa",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f3312e3-152d-490c-841d-90b7dc8adede",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b3ab9bfc-c3c6-4236-bfb2-9e46c0e6b477",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b54019e6-5e85-4c06-b937-223c798c9862"
			]
		},
		"src/renderer/src/hooks/useFrameCapture.ts": {
			"path": "src/renderer/src/hooks/useFrameCapture.ts",
			"fileName": "useFrameCapture.ts",
			"cellName": "useFrameCapture.ts",
			"cellId": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"children": [
				"src/renderer/src/hooks/useFrameCapture.ts-simstep-9db0ec9c-e70b-4f87-a85d-321abbf43227",
				"src/renderer/src/hooks/useFrameCapture.ts-simstep-2c98d1f4-66d6-4149-8964-5968ecc6097b"
			]
		},
		"src/renderer/src/hooks/useSegments.ts": {
			"path": "src/renderer/src/hooks/useSegments.ts",
			"fileName": "useSegments.ts",
			"cellName": "useSegments.ts",
			"cellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"children": [
				"src/renderer/src/hooks/useSegments.ts-simstep-6eb49e2c-c345-4411-a39a-7d5f8503c15a",
				"src/renderer/src/hooks/useSegments.ts-simstep-08b28a42-f61b-41ac-b21e-cf572c14eb92",
				"src/renderer/src/hooks/useSegments.ts-simstep-4e3478a8-6bfe-4668-9c60-2538ac5f4cac",
				"src/renderer/src/hooks/useSegments.ts-simstep-858f05be-34c9-4465-ad5a-ae1308c8014b",
				"src/renderer/src/hooks/useSegments.ts-simstep-34148250-afcc-4adc-a830-e3175227167d",
				"src/renderer/src/hooks/useSegments.ts-simstep-f300aea7-2079-46a7-abc1-a74eb9390556",
				"src/renderer/src/hooks/useSegments.ts-simstep-b02a0c20-a7f6-4048-97ae-30904f1a4b83",
				"src/renderer/src/hooks/useSegments.ts-simstep-e99b1e8e-c558-4b50-96ab-d4a823cbb10f",
				"src/renderer/src/hooks/useSegments.ts-simstep-c180e610-6995-4d50-a703-ec902e67d614",
				"src/renderer/src/hooks/useSegments.ts-simstep-83387023-e9d3-49a8-9d44-0d14014dbc26",
				"src/renderer/src/hooks/useSegments.ts-simstep-70193180-ff87-4d61-9b5a-0d547abaa93e"
			]
		},
		"src/renderer/src/hooks/useStreamsMeta.ts": {
			"path": "src/renderer/src/hooks/useStreamsMeta.ts",
			"fileName": "useStreamsMeta.ts",
			"cellName": "useStreamsMeta.ts",
			"cellId": "aab8b1b6-a5fa-433c-afdd-8bb6ad279a73",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"children": [
				"src/renderer/src/hooks/useStreamsMeta.ts-simstep-07672606-da5f-4e17-bcfd-59ce4c377e2c"
			]
		},
		"src/renderer/src/hooks/useThumbnails.ts": {
			"path": "src/renderer/src/hooks/useThumbnails.ts",
			"fileName": "useThumbnails.ts",
			"cellName": "useThumbnails.ts",
			"cellId": "3cb3c35e-0ea8-4403-b0c4-70370f31884b",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"children": [
				"src/renderer/src/hooks/useThumbnails.ts-simstep-c14eeaae-961a-4675-b5f5-b21f2623971f"
			]
		},
		"src/renderer/src/hooks/useTimelineScroll.ts": {
			"path": "src/renderer/src/hooks/useTimelineScroll.ts",
			"fileName": "useTimelineScroll.ts",
			"cellName": "useTimelineScroll.ts",
			"cellId": "54170fc0-5715-465e-8182-cedb89b69a8e",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"children": [
				"src/renderer/src/hooks/useTimelineScroll.ts-simstep-ef93fb74-5535-42ff-9af3-0fa679df634d"
			]
		},
		"src/renderer/src/smartcut.ts": {
			"path": "src/renderer/src/smartcut.ts",
			"fileName": "smartcut.ts",
			"cellName": "smartcut.ts",
			"cellId": "a294a0f8-b3f5-458b-9bcd-9ebaa70ed08e",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"src/renderer/src/util": {
			"path": "src/renderer/src/util",
			"fileName": "util",
			"cellName": "util",
			"cellId": "38366ec6-d260-42a4-beca-36866d47ce90",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"children": [
				"src/renderer/src/util/streams.ts"
			]
		},
		"src/renderer/src/util/streams.ts": {
			"path": "src/renderer/src/util/streams.ts",
			"fileName": "streams.ts",
			"cellName": "streams.ts",
			"cellId": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876",
			"visible": true,
			"parentCellId": "38366ec6-d260-42a4-beca-36866d47ce90",
			"children": [
				"src/renderer/src/util/streams.ts-simstep-bfd2b870-2082-4c51-a2c2-bb9c18566025",
				"src/renderer/src/util/streams.ts-simstep-6ff789ee-75e7-4836-826d-fe2d42d10887"
			]
		},
		"463a5eb2-fde0-45da-bac1-9c66a01129dd": {
			"path": "463a5eb2-fde0-45da-bac1-9c66a01129dd",
			"fileName": "463a5eb2-fde0-45da-bac1-9c66a01129dd",
			"cellName": "src",
			"cellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd",
			"visible": true
		},
		"00d3829d-efcf-4e0e-93bc-2c0a0db74e08": {
			"path": "00d3829d-efcf-4e0e-93bc-2c0a0db74e08",
			"fileName": "00d3829d-efcf-4e0e-93bc-2c0a0db74e08",
			"cellName": "renderer",
			"cellId": "00d3829d-efcf-4e0e-93bc-2c0a0db74e08",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"e2b2a8e0-6ad4-410e-8f3a-f5b737c30614": {
			"path": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"fileName": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"cellName": "src",
			"cellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614",
			"visible": true,
			"parentCellId": "00d3829d-efcf-4e0e-93bc-2c0a0db74e08"
		},
		"e9994d85-90d3-4f26-9f4d-d16f248bf6a2": {
			"path": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"fileName": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"cellName": "hooks",
			"cellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f": {
			"path": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f",
			"fileName": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f",
			"cellName": "BottomBar.tsx",
			"cellId": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"28b30cce-6d19-4cdb-9d87-c8a3115ecf1a": {
			"path": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"fileName": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"cellName": "App.tsx",
			"cellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"affb473b-e658-4871-9c60-5db305eafa52": {
			"path": "affb473b-e658-4871-9c60-5db305eafa52",
			"fileName": "affb473b-e658-4871-9c60-5db305eafa52",
			"cellName": "useSegments.ts",
			"cellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"5649a414-611f-438b-8798-36092666feb1": {
			"path": "5649a414-611f-438b-8798-36092666feb1",
			"fileName": "5649a414-611f-438b-8798-36092666feb1",
			"cellName": "useFfmpegOperations.ts",
			"cellId": "5649a414-611f-438b-8798-36092666feb1",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"45fc7484-77e6-4c0f-8442-44e72c622501": {
			"path": "45fc7484-77e6-4c0f-8442-44e72c622501",
			"fileName": "45fc7484-77e6-4c0f-8442-44e72c622501",
			"cellName": "Set Segment Start Time - useSegments.ts:L494-502",
			"cellId": "45fc7484-77e6-4c0f-8442-44e72c622501",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-6eb49e2c-c345-4411-a39a-7d5f8503c15a": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-6eb49e2c-c345-4411-a39a-7d5f8503c15a",
			"fileName": "useSegments.ts",
			"wiki": "The user presses a key (e.g., 'i') or clicks the 'Set start' button. This triggers the `setCutStart` function, which captures the video's current time to define the beginning of a new segment.",
			"cellName": "Set Segment Start Time - useSegments.ts:L494-502",
			"cellId": "45fc7484-77e6-4c0f-8442-44e72c622501",
			"visible": true,
			"startLine": 494,
			"endLine": 502,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"9501368b-e6a8-45d9-980d-832b5066287b": {
			"path": "9501368b-e6a8-45d9-980d-832b5066287b",
			"fileName": "9501368b-e6a8-45d9-980d-832b5066287b",
			"cellName": "Set Segment End Time - useSegments.ts:L504-517",
			"cellId": "9501368b-e6a8-45d9-980d-832b5066287b",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-08b28a42-f61b-41ac-b21e-cf572c14eb92": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-08b28a42-f61b-41ac-b21e-cf572c14eb92",
			"fileName": "useSegments.ts",
			"wiki": "After moving the playhead to a new position, the user presses the 'o' key or clicks the 'Set end' button. This triggers the `setCutEnd` function, capturing the new time and finalizing the segment's duration.",
			"cellName": "Set Segment End Time - useSegments.ts:L504-517",
			"cellId": "9501368b-e6a8-45d9-980d-832b5066287b",
			"visible": true,
			"startLine": 504,
			"endLine": 517,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"ddd5cab6-426e-446d-b7f4-720fd942e4d1": {
			"path": "ddd5cab6-426e-446d-b7f4-720fd942e4d1",
			"fileName": "ddd5cab6-426e-446d-b7f4-720fd942e4d1",
			"cellName": "Orchestrate Export Operation - useFfmpegOperations.ts:L493-657",
			"cellId": "ddd5cab6-426e-446d-b7f4-720fd942e4d1",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-42700cf0-b1d7-436d-8f3b-8b7b678299f9": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-42700cf0-b1d7-436d-8f3b-8b7b678299f9",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "After the user confirms export settings, the `losslessCut` function is called. It orchestrates the entire cutting process, iterating through each defined segment to be exported.",
			"cellName": "Orchestrate Export Operation - useFfmpegOperations.ts:L493-657",
			"cellId": "ddd5cab6-426e-446d-b7f4-720fd942e4d1",
			"visible": true,
			"startLine": 493,
			"endLine": 657,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"211a02ee-1f90-4abe-9bcb-2513f3a6bd5a": {
			"path": "211a02ee-1f90-4abe-9bcb-2513f3a6bd5a",
			"fileName": "211a02ee-1f90-4abe-9bcb-2513f3a6bd5a",
			"cellName": "Handle Single Segment Cutting - useFfmpegOperations.ts:L525-651",
			"cellId": "211a02ee-1f90-4abe-9bcb-2513f3a6bd5a",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2b6dcbfc-67fb-40cb-aae2-13d11aa06d4b": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2b6dcbfc-67fb-40cb-aae2-13d11aa06d4b",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `cutSegment` function receives a single segment's data. For a standard lossless cut, it determines the output path and calls `losslessCutSingle` to perform the actual file operation.",
			"cellName": "Handle Single Segment Cutting - useFfmpegOperations.ts:L525-651",
			"cellId": "211a02ee-1f90-4abe-9bcb-2513f3a6bd5a",
			"visible": true,
			"startLine": 525,
			"endLine": 651,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"b33a1117-9574-424b-9853-c32fb7e1e673": {
			"path": "b33a1117-9574-424b-9853-c32fb7e1e673",
			"fileName": "b33a1117-9574-424b-9853-c32fb7e1e673",
			"cellName": "Execute FFmpeg Command - useFfmpegOperations.ts:L234-477",
			"cellId": "b33a1117-9574-424b-9853-c32fb7e1e673",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3c2123a1-6be4-4048-b6d3-8a11e718380c": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3c2123a1-6be4-4048-b6d3-8a11e718380c",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `losslessCutSingle` function assembles the final FFmpeg command-line arguments and uses an IPC call (`ffmpegRun`) to send them to the main process for secure execution. The main process then spawns FFmpeg, which performs the lossless stream copy and writes the new file to disk.",
			"cellName": "Execute FFmpeg Command - useFfmpegOperations.ts:L234-477",
			"cellId": "b33a1117-9574-424b-9853-c32fb7e1e673",
			"visible": true,
			"startLine": 234,
			"endLine": 477,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36": {
			"path": "b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
			"fileName": "b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
			"cellName": "Transmit Start\nCut Action",
			"cellId": "b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"generated-edge-simstep-06ce4707-16a4-40a1-ace4-7487f11cf713-b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36": {
			"path": "generated-edge-simstep-06ce4707-16a4-40a1-ace4-7487f11cf713-b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
			"fileName": "useSegments.ts",
			"cellName": "Transmit Start Cut Action",
			"cellId": "b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
			"visible": true,
			"startLine": 431,
			"endLine": 431,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"55ebca4b-7f50-4c47-8a25-53236a0216c0": {
			"path": "55ebca4b-7f50-4c47-8a25-53236a0216c0",
			"fileName": "55ebca4b-7f50-4c47-8a25-53236a0216c0",
			"cellName": "Transmit Finalized\nSegment for\nExport",
			"cellId": "55ebca4b-7f50-4c47-8a25-53236a0216c0",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"generated-edge-simstep-df5b6f6a-fbae-47f0-b21b-6fcf58175777-55ebca4b-7f50-4c47-8a25-53236a0216c0": {
			"path": "generated-edge-simstep-df5b6f6a-fbae-47f0-b21b-6fcf58175777-55ebca4b-7f50-4c47-8a25-53236a0216c0",
			"fileName": "useSegments.ts",
			"cellName": "Transmit Finalized Segment for Export",
			"cellId": "55ebca4b-7f50-4c47-8a25-53236a0216c0",
			"visible": true,
			"startLine": 364,
			"endLine": 364,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"ec371131-7664-46bd-95de-9b8da465ab65": {
			"path": "ec371131-7664-46bd-95de-9b8da465ab65",
			"fileName": "ec371131-7664-46bd-95de-9b8da465ab65",
			"cellName": "Pass Single\nSegment to\nCutter",
			"cellId": "ec371131-7664-46bd-95de-9b8da465ab65",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-e8a501ed-14af-47c1-a6c5-c519f9f10885-ec371131-7664-46bd-95de-9b8da465ab65": {
			"path": "generated-edge-simstep-e8a501ed-14af-47c1-a6c5-c519f9f10885-ec371131-7664-46bd-95de-9b8da465ab65",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Pass Single Segment to Cutter",
			"cellId": "ec371131-7664-46bd-95de-9b8da465ab65",
			"visible": true,
			"startLine": 649,
			"endLine": 649,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"45de532b-bca2-4a29-8e65-cacdbdcad058": {
			"path": "45de532b-bca2-4a29-8e65-cacdbdcad058",
			"fileName": "45de532b-bca2-4a29-8e65-cacdbdcad058",
			"cellName": "Pass Arguments\nfor FFmpeg\nExecution",
			"cellId": "45de532b-bca2-4a29-8e65-cacdbdcad058",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-c42c9a1e-2651-4617-93b9-459b0b8f41d0-45de532b-bca2-4a29-8e65-cacdbdcad058": {
			"path": "generated-edge-simstep-c42c9a1e-2651-4617-93b9-459b0b8f41d0-45de532b-bca2-4a29-8e65-cacdbdcad058",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Pass Arguments for FFmpeg Execution",
			"cellId": "45de532b-bca2-4a29-8e65-cacdbdcad058",
			"visible": true,
			"startLine": 542,
			"endLine": 545,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"ae8820cf-4d61-4362-95a6-7e4e696983c9": {
			"path": "ae8820cf-4d61-4362-95a6-7e4e696983c9",
			"fileName": "ae8820cf-4d61-4362-95a6-7e4e696983c9",
			"cellName": "main",
			"cellId": "ae8820cf-4d61-4362-95a6-7e4e696983c9",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"0177db3d-d803-4aa3-8c88-fce03bfe8e4c": {
			"path": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"fileName": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"cellName": "ffmpeg.ts",
			"cellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"visible": true,
			"parentCellId": "ae8820cf-4d61-4362-95a6-7e4e696983c9"
		},
		"f64dcaa1-9740-4aad-aad8-03cb84a3c967": {
			"path": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"fileName": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"cellName": "components",
			"cellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"45dc8065-3870-4188-8b62-1d24c6224813": {
			"path": "45dc8065-3870-4188-8b62-1d24c6224813",
			"fileName": "45dc8065-3870-4188-8b62-1d24c6224813",
			"cellName": "ffmpeg.ts",
			"cellId": "45dc8065-3870-4188-8b62-1d24c6224813",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"74f51150-3da2-41a1-9c6e-30d5ced483a4": {
			"path": "74f51150-3da2-41a1-9c6e-30d5ced483a4",
			"fileName": "74f51150-3da2-41a1-9c6e-30d5ced483a4",
			"cellName": "ConcatDialog.tsx",
			"cellId": "74f51150-3da2-41a1-9c6e-30d5ced483a4",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967"
		},
		"ca46b6f9-2862-46e8-ae81-6aebfd0d8623": {
			"path": "ca46b6f9-2862-46e8-ae81-6aebfd0d8623",
			"fileName": "ca46b6f9-2862-46e8-ae81-6aebfd0d8623",
			"cellName": "UI: Display Concatenation Dialog - App.tsx:L2818",
			"cellId": "ca46b6f9-2862-46e8-ae81-6aebfd0d8623",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-d020487f-6f97-438e-a80b-aa9ba8d22b53": {
			"path": "src/renderer/src/App.tsx-simstep-d020487f-6f97-438e-a80b-aa9ba8d22b53",
			"fileName": "App.tsx",
			"wiki": "When multiple files are loaded in batch mode, the `ConcatDialog` component becomes visible. This is triggered by the `concatDialogVisible` state flag being set to true, allowing the user to configure and initiate the merge process.",
			"cellName": "UI: Display Concatenation Dialog - App.tsx:L2818",
			"cellId": "ca46b6f9-2862-46e8-ae81-6aebfd0d8623",
			"visible": true,
			"startLine": 2818,
			"endLine": 2818,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"219bb17e-4463-4c4a-9db2-c2eb49ca4208": {
			"path": "219bb17e-4463-4c4a-9db2-c2eb49ca4208",
			"fileName": "219bb17e-4463-4c4a-9db2-c2eb49ca4208",
			"cellName": "UI: User Confirms Concatenation - ConcatDialog.tsx:L39-41",
			"cellId": "219bb17e-4463-4c4a-9db2-c2eb49ca4208",
			"visible": true,
			"parentCellId": "74f51150-3da2-41a1-9c6e-30d5ced483a4"
		},
		"src/renderer/src/components/ConcatDialog.tsx-simstep-338e42f2-b700-4d84-b0c5-416c1144afdd": {
			"path": "src/renderer/src/components/ConcatDialog.tsx-simstep-338e42f2-b700-4d84-b0c5-416c1144afdd",
			"fileName": "ConcatDialog.tsx",
			"wiki": "The user configures the output settings in the `ConcatDialog` (e.g., file name, format) and clicks the confirmation button. This action triggers the `onConcat` callback function, passing the selected options back to the main `App` component.",
			"cellName": "UI: User Confirms Concatenation - ConcatDialog.tsx:L39-41",
			"cellId": "219bb17e-4463-4c4a-9db2-c2eb49ca4208",
			"visible": true,
			"startLine": 39,
			"endLine": 41,
			"parentCellId": "74f51150-3da2-41a1-9c6e-30d5ced483a4",
			"parentPath": "src/renderer/src/components/ConcatDialog.tsx"
		},
		"0fb76bee-7ac9-454e-8839-0bb36f81c800": {
			"path": "0fb76bee-7ac9-454e-8839-0bb36f81c800",
			"fileName": "0fb76bee-7ac9-454e-8839-0bb36f81c800",
			"cellName": "Business Logic: Initiate Merging Operation - App.tsx:L944",
			"cellId": "0fb76bee-7ac9-454e-8839-0bb36f81c800",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-f7e7d684-641a-4b90-93e5-6b7e10a0d042": {
			"path": "src/renderer/src/App.tsx-simstep-f7e7d684-641a-4b90-93e5-6b7e10a0d042",
			"fileName": "App.tsx",
			"wiki": "The `userConcatFiles` function in `App.tsx` receives the parameters from the dialog. It determines the final output path and then calls the `concatFiles` function from the `useFfmpegOperations` hook to start the merging process.",
			"cellName": "Business Logic: Initiate Merging Operation - App.tsx:L944",
			"cellId": "0fb76bee-7ac9-454e-8839-0bb36f81c800",
			"visible": true,
			"startLine": 944,
			"endLine": 944,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"d2872d2f-395a-4318-9b07-616af5a57ccc": {
			"path": "d2872d2f-395a-4318-9b07-616af5a57ccc",
			"fileName": "d2872d2f-395a-4318-9b07-616af5a57ccc",
			"cellName": "FFmpeg Logic: Prepare FFmpeg Concatenation Command - useFfmpegOperations.ts:L226",
			"cellId": "d2872d2f-395a-4318-9b07-616af5a57ccc",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1f57a8af-ea7a-4d97-bdbb-7909b5b95fb9": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1f57a8af-ea7a-4d97-bdbb-7909b5b95fb9",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `concatFiles` function in `useFfmpegOperations` prepares the necessary arguments for FFmpeg. It generates a special text input (`concatTxt`) listing the files to be merged and then calls `runFfmpegConcat` to execute the command.",
			"cellName": "FFmpeg Logic: Prepare FFmpeg Concatenation Command - useFfmpegOperations.ts:L226",
			"cellId": "d2872d2f-395a-4318-9b07-616af5a57ccc",
			"visible": true,
			"startLine": 226,
			"endLine": 226,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"75294aa0-e6bd-47f4-8daf-980e6b860fb2": {
			"path": "75294aa0-e6bd-47f4-8daf-980e6b860fb2",
			"fileName": "75294aa0-e6bd-47f4-8daf-980e6b860fb2",
			"cellName": "Process Execution: Execute FFmpeg Process - ffmpeg.ts:L136-146",
			"cellId": "75294aa0-e6bd-47f4-8daf-980e6b860fb2",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-71c6a858-d542-42d7-a07f-3115d0cc0282": {
			"path": "src/main/ffmpeg.ts-simstep-71c6a858-d542-42d7-a07f-3115d0cc0282",
			"fileName": "ffmpeg.ts",
			"wiki": "In the main process, `runFfmpegConcat` receives the arguments. It spawns an FFmpeg child process and pipes the `concatTxt` content to its standard input, causing FFmpeg to merge the files as specified.",
			"cellName": "Process Execution: Execute FFmpeg Process - ffmpeg.ts:L136-146",
			"cellId": "75294aa0-e6bd-47f4-8daf-980e6b860fb2",
			"visible": true,
			"startLine": 136,
			"endLine": 146,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"3dca4ccd-53e3-4667-9be1-285bb23657dc": {
			"path": "3dca4ccd-53e3-4667-9be1-285bb23657dc",
			"fileName": "3dca4ccd-53e3-4667-9be1-285bb23657dc",
			"cellName": "Data Transfer:\nPass File\nPaths to\nDialog",
			"cellId": "3dca4ccd-53e3-4667-9be1-285bb23657dc",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-42640ecb-79de-4a74-b249-d115117044a6-3dca4ccd-53e3-4667-9be1-285bb23657dc": {
			"path": "generated-edge-simstep-42640ecb-79de-4a74-b249-d115117044a6-3dca4ccd-53e3-4667-9be1-285bb23657dc",
			"fileName": "App.tsx",
			"cellName": "Data Transfer: Pass File Paths to Dialog",
			"cellId": "3dca4ccd-53e3-4667-9be1-285bb23657dc",
			"visible": true,
			"startLine": 2818,
			"endLine": 2818,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"406e921c-9faf-4e2a-88ea-94317276cd6d": {
			"path": "406e921c-9faf-4e2a-88ea-94317276cd6d",
			"fileName": "406e921c-9faf-4e2a-88ea-94317276cd6d",
			"cellName": "Data Transfer:\nTransmit Concatenation\nParameters",
			"cellId": "406e921c-9faf-4e2a-88ea-94317276cd6d",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-3f85400f-d6fc-4f92-b578-4c91aca74b72-406e921c-9faf-4e2a-88ea-94317276cd6d": {
			"path": "generated-edge-simstep-3f85400f-d6fc-4f92-b578-4c91aca74b72-406e921c-9faf-4e2a-88ea-94317276cd6d",
			"fileName": "ConcatDialog.tsx",
			"cellName": "Data Transfer: Transmit Concatenation Parameters",
			"cellId": "406e921c-9faf-4e2a-88ea-94317276cd6d",
			"visible": true,
			"startLine": 40,
			"endLine": 40,
			"parentPath": "src/renderer/src/components/ConcatDialog.tsx"
		},
		"754b3a4b-3aaf-4dec-9ead-be3b06f64cdf": {
			"path": "754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
			"fileName": "754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
			"cellName": "Data Transfer:\nPass Parameters\nto FFmpeg\nHook",
			"cellId": "754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-c645a0ec-8fdc-40f5-bfbe-ed1d32b40a17-754b3a4b-3aaf-4dec-9ead-be3b06f64cdf": {
			"path": "generated-edge-simstep-c645a0ec-8fdc-40f5-bfbe-ed1d32b40a17-754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
			"fileName": "App.tsx",
			"cellName": "Data Transfer: Pass Parameters to FFmpeg Hook",
			"cellId": "754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
			"visible": true,
			"startLine": 944,
			"endLine": 944,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"c70d3025-379a-4fbd-8033-9dae6c60e8ce": {
			"path": "c70d3025-379a-4fbd-8033-9dae6c60e8ce",
			"fileName": "c70d3025-379a-4fbd-8033-9dae6c60e8ce",
			"cellName": "IPC: Transmit\nFFmpeg Command\nto Main\nProcess",
			"cellId": "c70d3025-379a-4fbd-8033-9dae6c60e8ce",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-39706b1c-bb97-4758-a307-9d0172e3f2cf-c70d3025-379a-4fbd-8033-9dae6c60e8ce": {
			"path": "generated-edge-simstep-39706b1c-bb97-4758-a307-9d0172e3f2cf-c70d3025-379a-4fbd-8033-9dae6c60e8ce",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "IPC: Transmit FFmpeg Command to Main Process",
			"cellId": "c70d3025-379a-4fbd-8033-9dae6c60e8ce",
			"visible": true,
			"startLine": 15,
			"endLine": 15,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"3703cb7a-6500-43a5-8846-522dec2fd24d": {
			"path": "3703cb7a-6500-43a5-8846-522dec2fd24d",
			"fileName": "3703cb7a-6500-43a5-8846-522dec2fd24d",
			"cellName": "StreamsSelector.tsx",
			"cellId": "3703cb7a-6500-43a5-8846-522dec2fd24d",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"38366ec6-d260-42a4-beca-36866d47ce90": {
			"path": "38366ec6-d260-42a4-beca-36866d47ce90",
			"fileName": "38366ec6-d260-42a4-beca-36866d47ce90",
			"cellName": "util",
			"cellId": "38366ec6-d260-42a4-beca-36866d47ce90",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"aab8b1b6-a5fa-433c-afdd-8bb6ad279a73": {
			"path": "aab8b1b6-a5fa-433c-afdd-8bb6ad279a73",
			"fileName": "aab8b1b6-a5fa-433c-afdd-8bb6ad279a73",
			"cellName": "useStreamsMeta.ts",
			"cellId": "aab8b1b6-a5fa-433c-afdd-8bb6ad279a73",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"c9c09fe8-9874-4a4f-ae0e-5aed788ee876": {
			"path": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876",
			"fileName": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876",
			"cellName": "streams.ts",
			"cellId": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876",
			"visible": true,
			"parentCellId": "38366ec6-d260-42a4-beca-36866d47ce90"
		},
		"905cd6d7-b971-41c9-b1d8-933a1e2dbd65": {
			"path": "905cd6d7-b971-41c9-b1d8-933a1e2dbd65",
			"fileName": "905cd6d7-b971-41c9-b1d8-933a1e2dbd65",
			"cellName": "Render Stream Selector UI - App.tsx:L2772-2797",
			"cellId": "905cd6d7-b971-41c9-b1d8-933a1e2dbd65",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-0013d881-3c4f-4a67-b096-4a030129bb50": {
			"path": "src/renderer/src/App.tsx-simstep-0013d881-3c4f-4a67-b096-4a030129bb50",
			"fileName": "App.tsx",
			"wiki": "The main application component, `App`, renders the `StreamsSelector` component when the user decides to manage media tracks. It passes down the current stream information and state management functions as props, which are primarily managed by the `useStreamsMeta` hook.",
			"cellName": "Render Stream Selector UI - App.tsx:L2772-2797",
			"cellId": "905cd6d7-b971-41c9-b1d8-933a1e2dbd65",
			"visible": true,
			"startLine": 2772,
			"endLine": 2797,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"77a55804-37f5-4eb8-a005-a56e69a90607": {
			"path": "77a55804-37f5-4eb8-a005-a56e69a90607",
			"fileName": "77a55804-37f5-4eb8-a005-a56e69a90607",
			"cellName": "User Toggles a Stream - StreamsSelector.tsx:L445",
			"cellId": "77a55804-37f5-4eb8-a005-a56e69a90607",
			"visible": true,
			"parentCellId": "3703cb7a-6500-43a5-8846-522dec2fd24d"
		},
		"src/renderer/src/StreamsSelector.tsx-simstep-3087e347-b5ed-4f67-97d9-12745403dad8": {
			"path": "src/renderer/src/StreamsSelector.tsx-simstep-3087e347-b5ed-4f67-97d9-12745403dad8",
			"fileName": "StreamsSelector.tsx",
			"wiki": "Inside the `StreamsSelector` component, each media stream is rendered with a toggle. When a user clicks the toggle, the `onToggle` event handler is triggered, calling the `toggleCopyStreamId` function with the file path and the stream's index.",
			"cellName": "User Toggles a Stream - StreamsSelector.tsx:L445",
			"cellId": "77a55804-37f5-4eb8-a005-a56e69a90607",
			"visible": true,
			"startLine": 445,
			"endLine": 445,
			"parentCellId": "3703cb7a-6500-43a5-8846-522dec2fd24d",
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"19c0ca87-f5a7-4e2e-8410-120483a7323e": {
			"path": "19c0ca87-f5a7-4e2e-8410-120483a7323e",
			"fileName": "19c0ca87-f5a7-4e2e-8410-120483a7323e",
			"cellName": "Update Stream Selection State - useStreamsMeta.ts:L127-129",
			"cellId": "19c0ca87-f5a7-4e2e-8410-120483a7323e",
			"visible": true,
			"parentCellId": "aab8b1b6-a5fa-433c-afdd-8bb6ad279a73"
		},
		"src/renderer/src/hooks/useStreamsMeta.ts-simstep-07672606-da5f-4e17-bcfd-59ce4c377e2c": {
			"path": "src/renderer/src/hooks/useStreamsMeta.ts-simstep-07672606-da5f-4e17-bcfd-59ce4c377e2c",
			"fileName": "useStreamsMeta.ts",
			"wiki": "The `toggleCopyStreamId` function in the `useStreamsMeta` hook updates the application's state. It uses `setCopyStreamIdsForPath` to find the existing selection state for the given file and toggles the boolean value for the specified stream index.",
			"cellName": "Update Stream Selection State - useStreamsMeta.ts:L127-129",
			"cellId": "19c0ca87-f5a7-4e2e-8410-120483a7323e",
			"visible": true,
			"startLine": 127,
			"endLine": 129,
			"parentCellId": "aab8b1b6-a5fa-433c-afdd-8bb6ad279a73",
			"parentPath": "src/renderer/src/hooks/useStreamsMeta.ts"
		},
		"2b390644-3e9d-4741-87b5-eac68264e723": {
			"path": "2b390644-3e9d-4741-87b5-eac68264e723",
			"fileName": "2b390644-3e9d-4741-87b5-eac68264e723",
			"cellName": "Initiate Export Operation - useFfmpegOperations.ts:L326",
			"cellId": "2b390644-3e9d-4741-87b5-eac68264e723",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c22a07c2-1beb-467c-8a2b-a2a14784c5e6": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c22a07c2-1beb-467c-8a2b-a2a14784c5e6",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "When the user initiates an export, a function within the `useFfmpegOperations` hook (e.g., `cutMultiple`) is called. This function reads the current stream selection state (`copyFileStreams`) to determine which streams to include in the export.",
			"cellName": "Initiate Export Operation - useFfmpegOperations.ts:L326",
			"cellId": "2b390644-3e9d-4741-87b5-eac68264e723",
			"visible": true,
			"startLine": 326,
			"endLine": 326,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"0abeddc4-ed20-4e7f-9678-6a0b8b42881a": {
			"path": "0abeddc4-ed20-4e7f-9678-6a0b8b42881a",
			"fileName": "0abeddc4-ed20-4e7f-9678-6a0b8b42881a",
			"cellName": "Generate FFmpeg Stream Mapping Arguments - streams.ts:L198-214",
			"cellId": "0abeddc4-ed20-4e7f-9678-6a0b8b42881a",
			"visible": true,
			"parentCellId": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876"
		},
		"src/renderer/src/util/streams.ts-simstep-bfd2b870-2082-4c51-a2c2-bb9c18566025": {
			"path": "src/renderer/src/util/streams.ts-simstep-bfd2b870-2082-4c51-a2c2-bb9c18566025",
			"fileName": "streams.ts",
			"wiki": "The `getMapStreamsArgs` function iterates through the provided `copyFileStreams` data. For each selected stream, it generates the appropriate `-map` and codec (`-c`) arguments that instruct FFmpeg which streams to copy from the input files to the output file.",
			"cellName": "Generate FFmpeg Stream Mapping Arguments - streams.ts:L198-214",
			"cellId": "0abeddc4-ed20-4e7f-9678-6a0b8b42881a",
			"visible": true,
			"startLine": 198,
			"endLine": 214,
			"parentCellId": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876",
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"648db7a7-ce2b-4505-99e0-de8615f3c02f": {
			"path": "648db7a7-ce2b-4505-99e0-de8615f3c02f",
			"fileName": "648db7a7-ce2b-4505-99e0-de8615f3c02f",
			"cellName": "Execute FFmpeg Command - useFfmpegOperations.ts:L480-481",
			"cellId": "648db7a7-ce2b-4505-99e0-de8615f3c02f",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6cdaf881-1781-46b6-94a3-8c5d503c4d8c": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6cdaf881-1781-46b6-94a3-8c5d503c4d8c",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `useFfmpegOperations` hook combines the stream mapping arguments with other necessary FFmpeg parameters (input files, output path, etc.) to form a complete command, which is then executed by a helper function like `runFfmpeg` to perform the final media processing.",
			"cellName": "Execute FFmpeg Command - useFfmpegOperations.ts:L480-481",
			"cellId": "648db7a7-ce2b-4505-99e0-de8615f3c02f",
			"visible": true,
			"startLine": 480,
			"endLine": 481,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"cca3b2e8-b69d-43f4-b483-e2660938686f": {
			"path": "cca3b2e8-b69d-43f4-b483-e2660938686f",
			"fileName": "cca3b2e8-b69d-43f4-b483-e2660938686f",
			"cellName": "Pass Props\nto StreamsSelector",
			"cellId": "cca3b2e8-b69d-43f4-b483-e2660938686f",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-11fc14c2-cb68-46fc-a0ac-f97575891086-cca3b2e8-b69d-43f4-b483-e2660938686f": {
			"path": "generated-edge-simstep-11fc14c2-cb68-46fc-a0ac-f97575891086-cca3b2e8-b69d-43f4-b483-e2660938686f",
			"fileName": "App.tsx",
			"cellName": "Pass Props to StreamsSelector",
			"cellId": "cca3b2e8-b69d-43f4-b483-e2660938686f",
			"visible": true,
			"startLine": 2773,
			"endLine": 2796,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"8586d239-bb64-4bba-9b53-7b177b0a6d7d": {
			"path": "8586d239-bb64-4bba-9b53-7b177b0a6d7d",
			"fileName": "8586d239-bb64-4bba-9b53-7b177b0a6d7d",
			"cellName": "Invoke State\nUpdate Handler",
			"cellId": "8586d239-bb64-4bba-9b53-7b177b0a6d7d",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-5b0cf2a9-48f2-44af-9954-3fc08ec595a6-8586d239-bb64-4bba-9b53-7b177b0a6d7d": {
			"path": "generated-edge-simstep-5b0cf2a9-48f2-44af-9954-3fc08ec595a6-8586d239-bb64-4bba-9b53-7b177b0a6d7d",
			"fileName": "StreamsSelector.tsx",
			"cellName": "Invoke State Update Handler",
			"cellId": "8586d239-bb64-4bba-9b53-7b177b0a6d7d",
			"visible": true,
			"startLine": 445,
			"endLine": 445,
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"2e2e77b9-7459-4d74-9172-5738f4be58e6": {
			"path": "2e2e77b9-7459-4d74-9172-5738f4be58e6",
			"fileName": "2e2e77b9-7459-4d74-9172-5738f4be58e6",
			"cellName": "Propagate State\nChange",
			"cellId": "2e2e77b9-7459-4d74-9172-5738f4be58e6",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"generated-edge-simstep-8002719a-424b-48a2-9ed0-1496224dac62-2e2e77b9-7459-4d74-9172-5738f4be58e6": {
			"path": "generated-edge-simstep-8002719a-424b-48a2-9ed0-1496224dac62-2e2e77b9-7459-4d74-9172-5738f4be58e6",
			"fileName": "useStreamsMeta.ts",
			"cellName": "Propagate State Change",
			"cellId": "2e2e77b9-7459-4d74-9172-5738f4be58e6",
			"visible": true,
			"startLine": 48,
			"endLine": 51,
			"parentPath": "src/renderer/src/hooks/useStreamsMeta.ts"
		},
		"a496e3fe-de3e-41ed-892e-c41440d5fbfc": {
			"path": "a496e3fe-de3e-41ed-892e-c41440d5fbfc",
			"fileName": "a496e3fe-de3e-41ed-892e-c41440d5fbfc",
			"cellName": "Pass Stream\nSelection to\nArgument Generator",
			"cellId": "a496e3fe-de3e-41ed-892e-c41440d5fbfc",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-e57039cf-aae7-4f08-8229-004f6de14a12-a496e3fe-de3e-41ed-892e-c41440d5fbfc": {
			"path": "generated-edge-simstep-e57039cf-aae7-4f08-8229-004f6de14a12-a496e3fe-de3e-41ed-892e-c41440d5fbfc",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Pass Stream Selection to Argument Generator",
			"cellId": "a496e3fe-de3e-41ed-892e-c41440d5fbfc",
			"visible": true,
			"startLine": 326,
			"endLine": 326,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"a9897815-5ce0-4284-8834-9ae72e4ef852": {
			"path": "a9897815-5ce0-4284-8834-9ae72e4ef852",
			"fileName": "a9897815-5ce0-4284-8834-9ae72e4ef852",
			"cellName": "Return FFmpeg\nArguments",
			"cellId": "a9897815-5ce0-4284-8834-9ae72e4ef852",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-bc02ff4f-6f63-4cc1-b3a7-e43dcd9633fd-a9897815-5ce0-4284-8834-9ae72e4ef852": {
			"path": "generated-edge-simstep-bc02ff4f-6f63-4cc1-b3a7-e43dcd9633fd-a9897815-5ce0-4284-8834-9ae72e4ef852",
			"fileName": "streams.ts",
			"cellName": "Return FFmpeg Arguments",
			"cellId": "a9897815-5ce0-4284-8834-9ae72e4ef852",
			"visible": true,
			"startLine": 201,
			"endLine": 201,
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"ac75be33-a9fc-400f-b934-905ce044efd9": {
			"path": "ac75be33-a9fc-400f-b934-905ce044efd9",
			"fileName": "ac75be33-a9fc-400f-b934-905ce044efd9",
			"cellName": "OutputFormatSelect.tsx",
			"cellId": "ac75be33-a9fc-400f-b934-905ce044efd9",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967"
		},
		"ab6d6760-8d86-4277-a029-6d08b9f6a9c0": {
			"path": "ab6d6760-8d86-4277-a029-6d08b9f6a9c0",
			"fileName": "ab6d6760-8d86-4277-a029-6d08b9f6a9c0",
			"cellName": "User Selects New Output Format - OutputFormatSelect.tsx:L24-55",
			"cellId": "ab6d6760-8d86-4277-a029-6d08b9f6a9c0",
			"visible": true,
			"parentCellId": "ac75be33-a9fc-400f-b934-905ce044efd9"
		},
		"src/renderer/src/components/OutputFormatSelect.tsx-simstep-92161c88-d754-46fa-a5ec-7bd231c896a1": {
			"path": "src/renderer/src/components/OutputFormatSelect.tsx-simstep-92161c88-d754-46fa-a5ec-7bd231c896a1",
			"fileName": "OutputFormatSelect.tsx",
			"wiki": "The user interacts with the `OutputFormatSelect` component in the UI to choose a new container format for the output file, for example, changing from 'mkv' to 'mp4'. This action triggers an onChange event.",
			"cellName": "User Selects New Output Format - OutputFormatSelect.tsx:L24-55",
			"cellId": "ab6d6760-8d86-4277-a029-6d08b9f6a9c0",
			"visible": true,
			"startLine": 24,
			"endLine": 55,
			"parentCellId": "ac75be33-a9fc-400f-b934-905ce044efd9",
			"parentPath": "src/renderer/src/components/OutputFormatSelect.tsx"
		},
		"6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e": {
			"path": "6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e",
			"fileName": "6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e",
			"cellName": "Update Application State - App.tsx:L217-222",
			"cellId": "6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-4b7e05e7-fa81-4ef9-964e-55fc440d9520": {
			"path": "src/renderer/src/App.tsx-simstep-4b7e05e7-fa81-4ef9-964e-55fc440d9520",
			"fileName": "App.tsx",
			"wiki": "In the `App` component, the `onOutputFormatUserChange` function calls `setFileFormat` to update the application's state with the new output format. This state will be used when the export operation is initiated.",
			"cellName": "Update Application State - App.tsx:L217-222",
			"cellId": "6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e",
			"visible": true,
			"startLine": 217,
			"endLine": 222,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"438cc3d7-c74e-40ce-94cd-9fa2298aabbf": {
			"path": "438cc3d7-c74e-40ce-94cd-9fa2298aabbf",
			"fileName": "438cc3d7-c74e-40ce-94cd-9fa2298aabbf",
			"cellName": "Invoke FFmpeg Operation Hook - useFfmpegOperations.ts:L485-652",
			"cellId": "438cc3d7-c74e-40ce-94cd-9fa2298aabbf",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-00c406e5-0cc1-4137-a79e-a06564ec1000": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-00c406e5-0cc1-4137-a79e-a06564ec1000",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The main export logic in `App.tsx` calls the `cutMultiple` function from the `useFfmpegOperations` hook. If there are no segments, this function will orchestrate a single export operation for the entire file, effectively performing a remux.",
			"cellName": "Invoke FFmpeg Operation Hook - useFfmpegOperations.ts:L485-652",
			"cellId": "438cc3d7-c74e-40ce-94cd-9fa2298aabbf",
			"visible": true,
			"startLine": 485,
			"endLine": 652,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"99306854-1574-4e2e-8db5-744857c2c9c0": {
			"path": "99306854-1574-4e2e-8db5-744857c2c9c0",
			"fileName": "99306854-1574-4e2e-8db5-744857c2c9c0",
			"cellName": "Generate Stream Mapping Arguments - useFfmpegOperations.ts:L326",
			"cellId": "99306854-1574-4e2e-8db5-744857c2c9c0",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-419d66ba-777c-4d76-a53f-bf621628105d": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-419d66ba-777c-4d76-a53f-bf621628105d",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "Inside `losslessCutSingle`, the `getMapStreamsArgs` utility is called. This function determines how to handle each media stream (video, audio, subtitle) based on the target `outFormat`. For a simple remux, it generates arguments to copy the streams without re-encoding.",
			"cellName": "Generate Stream Mapping Arguments - useFfmpegOperations.ts:L326",
			"cellId": "99306854-1574-4e2e-8db5-744857c2c9c0",
			"visible": true,
			"startLine": 326,
			"endLine": 326,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"66d0854e-1628-4750-881f-5cc41bd882a8": {
			"path": "66d0854e-1628-4750-881f-5cc41bd882a8",
			"fileName": "66d0854e-1628-4750-881f-5cc41bd882a8",
			"cellName": "Determine Per-Stream Codec Flags - streams.ts:L108-201",
			"cellId": "66d0854e-1628-4750-881f-5cc41bd882a8",
			"visible": true,
			"parentCellId": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876"
		},
		"src/renderer/src/util/streams.ts-simstep-6ff789ee-75e7-4836-826d-fe2d42d10887": {
			"path": "src/renderer/src/util/streams.ts-simstep-6ff789ee-75e7-4836-826d-fe2d42d10887",
			"fileName": "streams.ts",
			"wiki": "The `getMapStreamsArgs` function internally calls `getPerStreamFlags` for each stream. This function contains the logic to handle codec compatibility. For simple remuxing, it returns `['c:x', 'copy']`. However, it can also decide to re-encode a stream if the target container (`outFormat`) does not support the source codec (e.g., converting subtitles for MP4 compatibility).",
			"cellName": "Determine Per-Stream Codec Flags - streams.ts:L108-201",
			"cellId": "66d0854e-1628-4750-881f-5cc41bd882a8",
			"visible": true,
			"startLine": 108,
			"endLine": 201,
			"parentCellId": "c9c09fe8-9874-4a4f-ae0e-5aed788ee876",
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"46262f45-c20c-4c0e-b939-72a028504b0f": {
			"path": "46262f45-c20c-4c0e-b939-72a028504b0f",
			"fileName": "46262f45-c20c-4c0e-b939-72a028504b0f",
			"cellName": "Assemble and Execute Final FFmpeg Command - useFfmpegOperations.ts:L406-414",
			"cellId": "46262f45-c20c-4c0e-b939-72a028504b0f",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0bf0d1c6-6653-4711-8ec4-5484ce078298": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0bf0d1c6-6653-4711-8ec4-5484ce078298",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "`losslessCutSingle` assembles the complete FFmpeg command, including input/output paths, stream mappings, and crucially, the output format flag (`-f mp4`). It then executes the command to perform the lossless remux operation.",
			"cellName": "Assemble and Execute Final FFmpeg Command - useFfmpegOperations.ts:L406-414",
			"cellId": "46262f45-c20c-4c0e-b939-72a028504b0f",
			"visible": true,
			"startLine": 406,
			"endLine": 414,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"11fc8bd0-2502-48ca-b87a-dec0102c0a28": {
			"path": "11fc8bd0-2502-48ca-b87a-dec0102c0a28",
			"fileName": "11fc8bd0-2502-48ca-b87a-dec0102c0a28",
			"cellName": "Format Selection\nPropagated",
			"cellId": "11fc8bd0-2502-48ca-b87a-dec0102c0a28",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-987f944e-a82e-407f-b86e-dadbaf351f87-11fc8bd0-2502-48ca-b87a-dec0102c0a28": {
			"path": "generated-edge-simstep-987f944e-a82e-407f-b86e-dadbaf351f87-11fc8bd0-2502-48ca-b87a-dec0102c0a28",
			"fileName": "OutputFormatSelect.tsx",
			"cellName": "Format Selection Propagated",
			"cellId": "11fc8bd0-2502-48ca-b87a-dec0102c0a28",
			"visible": true,
			"startLine": 2461,
			"endLine": 2463,
			"parentPath": "src/renderer/src/components/OutputFormatSelect.tsx"
		},
		"b5d9bef4-34ac-4463-8794-0e316935da0e": {
			"path": "b5d9bef4-34ac-4463-8794-0e316935da0e",
			"fileName": "b5d9bef4-34ac-4463-8794-0e316935da0e",
			"cellName": "Export Triggered\nwith New\nFormat",
			"cellId": "b5d9bef4-34ac-4463-8794-0e316935da0e",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-59645a30-c7ed-4c98-af35-c7271b0a885a-b5d9bef4-34ac-4463-8794-0e316935da0e": {
			"path": "generated-edge-simstep-59645a30-c7ed-4c98-af35-c7271b0a885a-b5d9bef4-34ac-4463-8794-0e316935da0e",
			"fileName": "App.tsx",
			"cellName": "Export Triggered with New Format",
			"cellId": "b5d9bef4-34ac-4463-8794-0e316935da0e",
			"visible": true,
			"startLine": 1106,
			"endLine": 1112,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"45010418-c767-4cda-9699-10f9e21565d3": {
			"path": "45010418-c767-4cda-9699-10f9e21565d3",
			"fileName": "45010418-c767-4cda-9699-10f9e21565d3",
			"cellName": "Pass Parameters\nto `losslessCutSingle`",
			"cellId": "45010418-c767-4cda-9699-10f9e21565d3",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-108f804f-5a01-4c6a-b2a4-c557c3c6e648-45010418-c767-4cda-9699-10f9e21565d3": {
			"path": "generated-edge-simstep-108f804f-5a01-4c6a-b2a4-c557c3c6e648-45010418-c767-4cda-9699-10f9e21565d3",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Pass Parameters to `losslessCutSingle`",
			"cellId": "45010418-c767-4cda-9699-10f9e21565d3",
			"visible": true,
			"startLine": 544,
			"endLine": 547,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"0697f662-55f2-4cc0-bb89-7d34dbcf05d4": {
			"path": "0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
			"fileName": "0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
			"cellName": "Stream Arguments\nReturned",
			"cellId": "0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-f70094bb-2844-486e-8405-a4b95d84816e-0697f662-55f2-4cc0-bb89-7d34dbcf05d4": {
			"path": "generated-edge-simstep-f70094bb-2844-486e-8405-a4b95d84816e-0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Stream Arguments Returned",
			"cellId": "0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
			"visible": true,
			"startLine": 226,
			"endLine": 226,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"c525b1b1-77fa-4d0d-be43-1f8edc959518": {
			"path": "c525b1b1-77fa-4d0d-be43-1f8edc959518",
			"fileName": "c525b1b1-77fa-4d0d-be43-1f8edc959518",
			"cellName": "Codec Flags\nReturned",
			"cellId": "c525b1b1-77fa-4d0d-be43-1f8edc959518",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-e0ea8c47-b33c-4a87-8177-5f546cdcf0f4-c525b1b1-77fa-4d0d-be43-1f8edc959518": {
			"path": "generated-edge-simstep-e0ea8c47-b33c-4a87-8177-5f546cdcf0f4-c525b1b1-77fa-4d0d-be43-1f8edc959518",
			"fileName": "streams.ts",
			"cellName": "Codec Flags Returned",
			"cellId": "c525b1b1-77fa-4d0d-be43-1f8edc959518",
			"visible": true,
			"startLine": 200,
			"endLine": 200,
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"88441075-1da1-4d60-b70b-8df973612076": {
			"path": "88441075-1da1-4d60-b70b-8df973612076",
			"fileName": "88441075-1da1-4d60-b70b-8df973612076",
			"cellName": "menu.ts",
			"cellId": "88441075-1da1-4d60-b70b-8df973612076",
			"visible": true,
			"parentCellId": "ae8820cf-4d61-4362-95a6-7e4e696983c9"
		},
		"1b8acd8a-02ba-47ca-aee8-f266c57ad434": {
			"path": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"fileName": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"cellName": "edlStore.ts",
			"cellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"f226c949-d4c7-485f-b4eb-e546741be2a5": {
			"path": "f226c949-d4c7-485f-b4eb-e546741be2a5",
			"fileName": "f226c949-d4c7-485f-b4eb-e546741be2a5",
			"cellName": "Import Flow: User Initiates EDL Import - menu.ts:L90-94",
			"cellId": "f226c949-d4c7-485f-b4eb-e546741be2a5",
			"visible": true,
			"parentCellId": "88441075-1da1-4d60-b70b-8df973612076"
		},
		"src/main/menu.ts-simstep-b7677740-8ec1-460b-b648-5065f58d5814": {
			"path": "src/main/menu.ts-simstep-b7677740-8ec1-460b-b648-5065f58d5814",
			"fileName": "menu.ts",
			"wiki": "The user clicks on the 'Import project' > 'EDL' menu item to begin the process of importing cut segments from an Edit Decision List (EDL) file.",
			"cellName": "Import Flow: User Initiates EDL Import - menu.ts:L90-94",
			"cellId": "f226c949-d4c7-485f-b4eb-e546741be2a5",
			"visible": true,
			"startLine": 90,
			"endLine": 94,
			"parentCellId": "88441075-1da1-4d60-b70b-8df973612076",
			"parentPath": "src/main/menu.ts"
		},
		"2bdb996a-2731-4e68-a183-dd506755e3ce": {
			"path": "2bdb996a-2731-4e68-a183-dd506755e3ce",
			"fileName": "2bdb996a-2731-4e68-a183-dd506755e3ce",
			"cellName": "Import Flow: Renderer Receives IPC and Calls Import Handler - App.tsx:L2321-2325",
			"cellId": "2bdb996a-2731-4e68-a183-dd506755e3ce",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-1a71a446-0c7e-4e89-84e0-bb9ef8030a65": {
			"path": "src/renderer/src/App.tsx-simstep-1a71a446-0c7e-4e89-84e0-bb9ef8030a65",
			"fileName": "App.tsx",
			"wiki": "An IPC listener in the main React component (`App.tsx`) receives the 'importEdlFile' event and calls the `importEdlFile` function, which wraps the core import logic.",
			"cellName": "Import Flow: Renderer Receives IPC and Calls Import Handler - App.tsx:L2321-2325",
			"cellId": "2bdb996a-2731-4e68-a183-dd506755e3ce",
			"visible": true,
			"startLine": 2321,
			"endLine": 2325,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0": {
			"path": "7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0",
			"fileName": "7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0",
			"cellName": "Import Flow: Displaying File Selection Dialog - edlStore.ts:L157-178",
			"cellId": "7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0",
			"visible": true,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434"
		},
		"src/renderer/src/edlStore.ts-simstep-27acfa9c-8b4a-474c-9a67-65c54258a91c": {
			"path": "src/renderer/src/edlStore.ts-simstep-27acfa9c-8b4a-474c-9a67-65c54258a91c",
			"fileName": "edlStore.ts",
			"wiki": "The `askForEdlImport` function in `edlStore.ts` shows a native file open dialog, allowing the user to select the EDL file they want to import.",
			"cellName": "Import Flow: Displaying File Selection Dialog - edlStore.ts:L157-178",
			"cellId": "7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0",
			"visible": true,
			"startLine": 157,
			"endLine": 178,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"be29d953-3985-4df3-9f6c-37da6c0e41b1": {
			"path": "be29d953-3985-4df3-9f6c-37da6c0e41b1",
			"fileName": "be29d953-3985-4df3-9f6c-37da6c0e41b1",
			"cellName": "Import Flow: Parsing EDL File - edlStore.ts:L179-181",
			"cellId": "be29d953-3985-4df3-9f6c-37da6c0e41b1",
			"visible": true,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434"
		},
		"src/renderer/src/edlStore.ts-simstep-15839cff-a4a2-4b10-8de2-ec2f3ad75503": {
			"path": "src/renderer/src/edlStore.ts-simstep-15839cff-a4a2-4b10-8de2-ec2f3ad75503",
			"fileName": "edlStore.ts",
			"wiki": "The `readEdlFile` function (and its helpers in `edlFormats.ts`) reads the content of the specified file and parses it into a structured array of cut segments.",
			"cellName": "Import Flow: Parsing EDL File - edlStore.ts:L179-181",
			"cellId": "be29d953-3985-4df3-9f6c-37da6c0e41b1",
			"visible": true,
			"startLine": 179,
			"endLine": 181,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"225d123a-bc45-44e8-bb44-673edb5795a4": {
			"path": "225d123a-bc45-44e8-bb44-673edb5795a4",
			"fileName": "225d123a-bc45-44e8-bb44-673edb5795a4",
			"cellName": "Import Flow: Updating Application State - App.tsx:L2321-2328",
			"cellId": "225d123a-bc45-44e8-bb44-673edb5795a4",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-020f8726-672b-4147-9e00-b722c8bfb78f": {
			"path": "src/renderer/src/App.tsx-simstep-020f8726-672b-4147-9e00-b722c8bfb78f",
			"fileName": "App.tsx",
			"wiki": "The main App component receives the new segments and updates its state, causing the timeline UI to re-render and display the imported cut segments.",
			"cellName": "Import Flow: Updating Application State - App.tsx:L2321-2328",
			"cellId": "225d123a-bc45-44e8-bb44-673edb5795a4",
			"visible": true,
			"startLine": 2321,
			"endLine": 2328,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"727b8c8c-58dc-4afe-b58d-3f9353a2b7b2": {
			"path": "727b8c8c-58dc-4afe-b58d-3f9353a2b7b2",
			"fileName": "727b8c8c-58dc-4afe-b58d-3f9353a2b7b2",
			"cellName": "Export Flow: User Initiates CSV Export - menu.ts:L154-158",
			"cellId": "727b8c8c-58dc-4afe-b58d-3f9353a2b7b2",
			"visible": true,
			"parentCellId": "88441075-1da1-4d60-b70b-8df973612076"
		},
		"src/main/menu.ts-simstep-499f449b-956f-4be9-b7d9-f611f4750a84": {
			"path": "src/main/menu.ts-simstep-499f449b-956f-4be9-b7d9-f611f4750a84",
			"fileName": "menu.ts",
			"wiki": "The user clicks on the 'Export project' > 'Times in seconds (CSV)' menu item to begin the process of exporting the current cut segments to a CSV file.",
			"cellName": "Export Flow: User Initiates CSV Export - menu.ts:L154-158",
			"cellId": "727b8c8c-58dc-4afe-b58d-3f9353a2b7b2",
			"visible": true,
			"startLine": 154,
			"endLine": 158,
			"parentCellId": "88441075-1da1-4d60-b70b-8df973612076",
			"parentPath": "src/main/menu.ts"
		},
		"0c38615e-6206-4a35-92ad-c62a2e7f27da": {
			"path": "0c38615e-6206-4a35-92ad-c62a2e7f27da",
			"fileName": "0c38615e-6206-4a35-92ad-c62a2e7f27da",
			"cellName": "Export Flow: Renderer Receives IPC and Calls Export Handler - App.tsx:L2316-2320",
			"cellId": "0c38615e-6206-4a35-92ad-c62a2e7f27da",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-c6840a3d-b648-42b9-b673-fa4a46179cb1": {
			"path": "src/renderer/src/App.tsx-simstep-c6840a3d-b648-42b9-b673-fa4a46179cb1",
			"fileName": "App.tsx",
			"wiki": "An IPC listener in `App.tsx` receives the 'exportEdlFile' event and calls the `tryExportEdlFile` function, which wraps the core export logic.",
			"cellName": "Export Flow: Renderer Receives IPC and Calls Export Handler - App.tsx:L2316-2320",
			"cellId": "0c38615e-6206-4a35-92ad-c62a2e7f27da",
			"visible": true,
			"startLine": 2316,
			"endLine": 2320,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"00a94233-ad22-4fec-8857-99100b2b649b": {
			"path": "00a94233-ad22-4fec-8857-99100b2b649b",
			"fileName": "00a94233-ad22-4fec-8857-99100b2b649b",
			"cellName": "Export Flow: Formatting Segments and Saving File - edlStore.ts:L183-192",
			"cellId": "00a94233-ad22-4fec-8857-99100b2b649b",
			"visible": true,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434"
		},
		"src/renderer/src/edlStore.ts-simstep-0d68eab0-569a-436b-a6a2-640441e8056a": {
			"path": "src/renderer/src/edlStore.ts-simstep-0d68eab0-569a-436b-a6a2-640441e8056a",
			"fileName": "edlStore.ts",
			"wiki": "The `exportEdlFile` function in `edlStore.ts` orchestrates the export. It uses a formatter (from `edlFormats.ts`) to convert the segment data into a CSV string, prompts the user with a 'save' dialog to choose a destination path, and then writes the formatted string to the selected file.",
			"cellName": "Export Flow: Formatting Segments and Saving File - edlStore.ts:L183-192",
			"cellId": "00a94233-ad22-4fec-8857-99100b2b649b",
			"visible": true,
			"startLine": 183,
			"endLine": 192,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"d2b8473f-effc-48b4-8142-d38464f9356f": {
			"path": "d2b8473f-effc-48b4-8142-d38464f9356f",
			"fileName": "d2b8473f-effc-48b4-8142-d38464f9356f",
			"cellName": "Import Flow:\nIPC Call\nfrom Main\nto Renderer",
			"cellId": "d2b8473f-effc-48b4-8142-d38464f9356f",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-1338e875-9c9b-4399-8a2a-eb593eb055e0-d2b8473f-effc-48b4-8142-d38464f9356f": {
			"path": "generated-edge-simstep-1338e875-9c9b-4399-8a2a-eb593eb055e0-d2b8473f-effc-48b4-8142-d38464f9356f",
			"fileName": "menu.ts",
			"cellName": "Import Flow: IPC Call from Main to Renderer",
			"cellId": "d2b8473f-effc-48b4-8142-d38464f9356f",
			"visible": true,
			"startLine": 92,
			"endLine": 92,
			"parentPath": "src/main/menu.ts"
		},
		"2eb46cce-ba00-46d0-b8c4-43b0b67eccc0": {
			"path": "2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
			"fileName": "2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
			"cellName": "Import Flow:\nInvoking EDL\nImport Dialog\nLogic",
			"cellId": "2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-028e1164-45a0-444c-a889-c6aa5219f1f8-2eb46cce-ba00-46d0-b8c4-43b0b67eccc0": {
			"path": "generated-edge-simstep-028e1164-45a0-444c-a889-c6aa5219f1f8-2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
			"fileName": "App.tsx",
			"cellName": "Import Flow: Invoking EDL Import Dialog Logic",
			"cellId": "2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
			"visible": true,
			"startLine": 2324,
			"endLine": 2324,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"3e0bf562-cb0e-4be0-ad61-2b2f184262fe": {
			"path": "3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
			"fileName": "3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
			"cellName": "Import Flow:\nPassing File\nPath for\nParsing",
			"cellId": "3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
			"visible": true,
			"parentCellId": "1b8acd8a-02ba-47ca-aee8-f266c57ad434"
		},
		"generated-edge-simstep-c4322fec-7be5-4029-a38e-15072a7d0f73-3e0bf562-cb0e-4be0-ad61-2b2f184262fe": {
			"path": "generated-edge-simstep-c4322fec-7be5-4029-a38e-15072a7d0f73-3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
			"fileName": "edlStore.ts",
			"cellName": "Import Flow: Passing File Path for Parsing",
			"cellId": "3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
			"visible": true,
			"startLine": 180,
			"endLine": 180,
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"baa9176e-ded0-4b7c-8ce4-c05034a9727b": {
			"path": "baa9176e-ded0-4b7c-8ce4-c05034a9727b",
			"fileName": "baa9176e-ded0-4b7c-8ce4-c05034a9727b",
			"cellName": "Import Flow:\nReturning Parsed\nSegments to\nApp",
			"cellId": "baa9176e-ded0-4b7c-8ce4-c05034a9727b",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-b2551fa8-7f60-4ef8-a571-d713234c9f4a-baa9176e-ded0-4b7c-8ce4-c05034a9727b": {
			"path": "generated-edge-simstep-b2551fa8-7f60-4ef8-a571-d713234c9f4a-baa9176e-ded0-4b7c-8ce4-c05034a9727b",
			"fileName": "edlStore.ts",
			"cellName": "Import Flow: Returning Parsed Segments to App",
			"cellId": "baa9176e-ded0-4b7c-8ce4-c05034a9727b",
			"visible": true,
			"startLine": 2324,
			"endLine": 2324,
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3": {
			"path": "97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
			"fileName": "97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
			"cellName": "Export Flow:\nIPC Call\nfrom Main\nto Renderer",
			"cellId": "97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-83d95334-2525-4424-a2e2-f31f50b358e6-97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3": {
			"path": "generated-edge-simstep-83d95334-2525-4424-a2e2-f31f50b358e6-97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
			"fileName": "menu.ts",
			"cellName": "Export Flow: IPC Call from Main to Renderer",
			"cellId": "97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
			"visible": true,
			"startLine": 156,
			"endLine": 156,
			"parentPath": "src/main/menu.ts"
		},
		"cd479a18-4a0b-4a36-9fdf-86022c51af95": {
			"path": "cd479a18-4a0b-4a36-9fdf-86022c51af95",
			"fileName": "cd479a18-4a0b-4a36-9fdf-86022c51af95",
			"cellName": "Export Flow:\nInvoking EDL\nExport Logic",
			"cellId": "cd479a18-4a0b-4a36-9fdf-86022c51af95",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-64758056-30ed-4b3b-9cab-93d57fa3e957-cd479a18-4a0b-4a36-9fdf-86022c51af95": {
			"path": "generated-edge-simstep-64758056-30ed-4b3b-9cab-93d57fa3e957-cd479a18-4a0b-4a36-9fdf-86022c51af95",
			"fileName": "App.tsx",
			"cellName": "Export Flow: Invoking EDL Export Logic",
			"cellId": "cd479a18-4a0b-4a36-9fdf-86022c51af95",
			"visible": true,
			"startLine": 2318,
			"endLine": 2318,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"3666644f-70f0-4d61-a6c4-3f04fbe82b6f": {
			"path": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f",
			"fileName": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f",
			"cellName": "useFrameCapture.ts",
			"cellId": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"c23fca9d-c10f-4e24-9ced-de9d5eee58d9": {
			"path": "c23fca9d-c10f-4e24-9ced-de9d5eee58d9",
			"fileName": "c23fca9d-c10f-4e24-9ced-de9d5eee58d9",
			"cellName": "Snapshot Flow: User Clicks Snapshot Button - BottomBar.tsx:L563-571",
			"cellId": "c23fca9d-c10f-4e24-9ced-de9d5eee58d9",
			"visible": true,
			"parentCellId": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f"
		},
		"src/renderer/src/BottomBar.tsx-simstep-c97e68f0-0cd5-40d5-bedf-e779622836b6": {
			"path": "src/renderer/src/BottomBar.tsx-simstep-c97e68f0-0cd5-40d5-bedf-e779622836b6",
			"fileName": "BottomBar.tsx",
			"wiki": "The user initiates a snapshot capture by clicking the camera icon in the bottom bar of the application.",
			"cellName": "Snapshot Flow: User Clicks Snapshot Button - BottomBar.tsx:L563-571",
			"cellId": "c23fca9d-c10f-4e24-9ced-de9d5eee58d9",
			"visible": true,
			"startLine": 563,
			"endLine": 571,
			"parentCellId": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f",
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"d68dc56e-889b-4561-9fc1-e99a6021a319": {
			"path": "d68dc56e-889b-4561-9fc1-e99a6021a319",
			"fileName": "d68dc56e-889b-4561-9fc1-e99a6021a319",
			"cellName": "Snapshot Flow: Execute Snapshot Logic in App Component - App.tsx:L1244-1252",
			"cellId": "d68dc56e-889b-4561-9fc1-e99a6021a319",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-28059b2c-b3f8-4b92-82e7-1d8879c55f09": {
			"path": "src/renderer/src/App.tsx-simstep-28059b2c-b3f8-4b92-82e7-1d8879c55f09",
			"fileName": "App.tsx",
			"wiki": "The `captureSnapshot` function in the `App` component is executed. It retrieves the current video time and calls the `captureFrameFromFfmpeg` function from the `useFrameCapture` hook to perform the capture.",
			"cellName": "Snapshot Flow: Execute Snapshot Logic in App Component - App.tsx:L1244-1252",
			"cellId": "d68dc56e-889b-4561-9fc1-e99a6021a319",
			"visible": true,
			"startLine": 1244,
			"endLine": 1252,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"d3c9b1ae-73af-49f2-a0f6-673773181c91": {
			"path": "d3c9b1ae-73af-49f2-a0f6-673773181c91",
			"fileName": "d3c9b1ae-73af-49f2-a0f6-673773181c91",
			"cellName": "Snapshot Flow: Prepare for FFmpeg Execution (Renderer) - useFrameCapture.ts:L127-132",
			"cellId": "d3c9b1ae-73af-49f2-a0f6-673773181c91",
			"visible": true,
			"parentCellId": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f"
		},
		"src/renderer/src/hooks/useFrameCapture.ts-simstep-9db0ec9c-e70b-4f87-a85d-321abbf43227": {
			"path": "src/renderer/src/hooks/useFrameCapture.ts-simstep-9db0ec9c-e70b-4f87-a85d-321abbf43227",
			"fileName": "useFrameCapture.ts",
			"wiki": "The `captureFrameFromFfmpeg` function determines the final output path for the snapshot and makes a call to the main process via IPC to execute the `ffmpeg.captureFrame` command.",
			"cellName": "Snapshot Flow: Prepare for FFmpeg Execution (Renderer) - useFrameCapture.ts:L127-132",
			"cellId": "d3c9b1ae-73af-49f2-a0f6-673773181c91",
			"visible": true,
			"startLine": 127,
			"endLine": 132,
			"parentCellId": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f",
			"parentPath": "src/renderer/src/hooks/useFrameCapture.ts"
		},
		"355896d6-b122-453e-a959-b3825b27c934": {
			"path": "355896d6-b122-453e-a959-b3825b27c934",
			"fileName": "355896d6-b122-453e-a959-b3825b27c934",
			"cellName": "Snapshot Flow: Execute FFmpeg for Snapshot (Main) - ffmpeg.ts:L459-474",
			"cellId": "355896d6-b122-453e-a959-b3825b27c934",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-9f118488-adc2-46d2-b279-12564ac743a2": {
			"path": "src/main/ffmpeg.ts-simstep-9f118488-adc2-46d2-b279-12564ac743a2",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process receives the request, constructs the appropriate FFmpeg command with arguments like `-ss` for timestamp, `-i` for input, `-vframes 1` for a single frame, and quality options, then executes it.",
			"cellName": "Snapshot Flow: Execute FFmpeg for Snapshot (Main) - ffmpeg.ts:L459-474",
			"cellId": "355896d6-b122-453e-a959-b3825b27c934",
			"visible": true,
			"startLine": 459,
			"endLine": 474,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"9a6c8558-5daa-4186-a0cb-b13ec4424fbc": {
			"path": "9a6c8558-5daa-4186-a0cb-b13ec4424fbc",
			"fileName": "9a6c8558-5daa-4186-a0cb-b13ec4424fbc",
			"cellName": "Snapshot Flow: Display Confirmation - App.tsx:L1305-1307",
			"cellId": "9a6c8558-5daa-4186-a0cb-b13ec4424fbc",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-278bc31d-7961-4913-8728-2b35dfeadd27": {
			"path": "src/renderer/src/App.tsx-simstep-278bc31d-7961-4913-8728-2b35dfeadd27",
			"fileName": "App.tsx",
			"wiki": "The UI is updated to show that the process is complete, and a notification is displayed to the user, confirming that the snapshot has been saved.",
			"cellName": "Snapshot Flow: Display Confirmation - App.tsx:L1305-1307",
			"cellId": "9a6c8558-5daa-4186-a0cb-b13ec4424fbc",
			"visible": true,
			"startLine": 1305,
			"endLine": 1307,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"4bef1ab4-2470-4955-8dd2-c8ef303e7124": {
			"path": "4bef1ab4-2470-4955-8dd2-c8ef303e7124",
			"fileName": "4bef1ab4-2470-4955-8dd2-c8ef303e7124",
			"cellName": "Frame Sequence Flow: Initiate Frame Extraction - App.tsx:L1317-1319",
			"cellId": "4bef1ab4-2470-4955-8dd2-c8ef303e7124",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-9b505063-8546-40e5-bb5d-0c098095b5bf": {
			"path": "src/renderer/src/App.tsx-simstep-9b505063-8546-40e5-bb5d-0c098095b5bf",
			"fileName": "App.tsx",
			"wiki": "The user triggers the extraction of frames from a selected segment, typically through a menu action which calls `extractCurrentSegmentFramesAsImages`.",
			"cellName": "Frame Sequence Flow: Initiate Frame Extraction - App.tsx:L1317-1319",
			"cellId": "4bef1ab4-2470-4955-8dd2-c8ef303e7124",
			"visible": true,
			"startLine": 1317,
			"endLine": 1319,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"26da0a67-3056-4154-a102-2fd37b64c61a": {
			"path": "26da0a67-3056-4154-a102-2fd37b64c61a",
			"fileName": "26da0a67-3056-4154-a102-2fd37b64c61a",
			"cellName": "Frame Sequence Flow: Open Configuration Dialog - App.tsx:L1276-1279",
			"cellId": "26da0a67-3056-4154-a102-2fd37b64c61a",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-39ed852a-5463-48d3-b73d-596fa4f17d22": {
			"path": "src/renderer/src/App.tsx-simstep-39ed852a-5463-48d3-b73d-596fa4f17d22",
			"fileName": "App.tsx",
			"wiki": "The application calls `askExtractFramesAsImages`, which opens a dialog prompting the user for extraction settings, such as the frame rate (e.g., every 10th frame).",
			"cellName": "Frame Sequence Flow: Open Configuration Dialog - App.tsx:L1276-1279",
			"cellId": "26da0a67-3056-4154-a102-2fd37b64c61a",
			"visible": true,
			"startLine": 1276,
			"endLine": 1279,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"c3388f52-2738-4905-8085-13f55cabb2a3": {
			"path": "c3388f52-2738-4905-8085-13f55cabb2a3",
			"fileName": "c3388f52-2738-4905-8085-13f55cabb2a3",
			"cellName": "Frame Sequence Flow: Process Segments for Extraction - App.tsx:L1298-1304",
			"cellId": "c3388f52-2738-4905-8085-13f55cabb2a3",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-2c7384a6-3fdb-4bd1-abb4-f559c7cbf824": {
			"path": "src/renderer/src/App.tsx-simstep-2c7384a6-3fdb-4bd1-abb4-f559c7cbf824",
			"fileName": "App.tsx",
			"wiki": "The application iterates through each selected segment and calls the `captureFramesRange` function from the `useFrameCapture` hook to handle the frame capture for that specific time range.",
			"cellName": "Frame Sequence Flow: Process Segments for Extraction - App.tsx:L1298-1304",
			"cellId": "c3388f52-2738-4905-8085-13f55cabb2a3",
			"visible": true,
			"startLine": 1298,
			"endLine": 1304,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a": {
			"path": "5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a",
			"fileName": "5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a",
			"cellName": "Frame Sequence Flow: Prepare FFmpeg Command (Renderer) - useFrameCapture.ts:L50-56",
			"cellId": "5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a",
			"visible": true,
			"parentCellId": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f"
		},
		"src/renderer/src/hooks/useFrameCapture.ts-simstep-2c98d1f4-66d6-4149-8964-5968ecc6097b": {
			"path": "src/renderer/src/hooks/useFrameCapture.ts-simstep-2c98d1f4-66d6-4149-8964-5968ecc6097b",
			"fileName": "useFrameCapture.ts",
			"wiki": "The `captureFramesRange` function calculates the output file path template (e.g., `video-%04d.jpeg`) and calls the main process's `ffmpeg.captureFrames` function with all the necessary parameters.",
			"cellName": "Frame Sequence Flow: Prepare FFmpeg Command (Renderer) - useFrameCapture.ts:L50-56",
			"cellId": "5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a",
			"visible": true,
			"startLine": 50,
			"endLine": 56,
			"parentCellId": "3666644f-70f0-4d61-a6c4-3f04fbe82b6f",
			"parentPath": "src/renderer/src/hooks/useFrameCapture.ts"
		},
		"4958b3cf-a2cf-4e24-af1c-3f78fe975746": {
			"path": "4958b3cf-a2cf-4e24-af1c-3f78fe975746",
			"fileName": "4958b3cf-a2cf-4e24-af1c-3f78fe975746",
			"cellName": "Frame Sequence Flow: Execute FFmpeg for Sequence (Main) - ffmpeg.ts:L459-474",
			"cellId": "4958b3cf-a2cf-4e24-af1c-3f78fe975746",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-c4d240da-55bd-4a5c-8344-4805b4de5ee7": {
			"path": "src/main/ffmpeg.ts-simstep-c4d240da-55bd-4a5c-8344-4805b4de5ee7",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process builds the final FFmpeg command, including the `-vf` filter for selecting frames, and executes it. It also sets up a listener to report progress back to the renderer.",
			"cellName": "Frame Sequence Flow: Execute FFmpeg for Sequence (Main) - ffmpeg.ts:L459-474",
			"cellId": "4958b3cf-a2cf-4e24-af1c-3f78fe975746",
			"visible": true,
			"startLine": 459,
			"endLine": 474,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"e25db789-2b90-4824-b73c-cb6a6bdd4bfa": {
			"path": "e25db789-2b90-4824-b73c-cb6a6bdd4bfa",
			"fileName": "e25db789-2b90-4824-b73c-cb6a6bdd4bfa",
			"cellName": "Frame Sequence Flow: Display Completion Notification - App.tsx:L1305-1307",
			"cellId": "e25db789-2b90-4824-b73c-cb6a6bdd4bfa",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-6d52d5b1-94cd-4262-8998-f2e84172d5a5": {
			"path": "src/renderer/src/App.tsx-simstep-6d52d5b1-94cd-4262-8998-f2e84172d5a5",
			"fileName": "App.tsx",
			"wiki": "Once the FFmpeg process finishes, the renderer hides the progress indicator and shows a success notification, providing a link to open the directory containing the extracted frames.",
			"cellName": "Frame Sequence Flow: Display Completion Notification - App.tsx:L1305-1307",
			"cellId": "e25db789-2b90-4824-b73c-cb6a6bdd4bfa",
			"visible": true,
			"startLine": 1305,
			"endLine": 1307,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7": {
			"path": "6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
			"fileName": "6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
			"cellName": "Snapshot Flow:\nPropagate Snapshot\nRequest",
			"cellId": "6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-e6dc0bb2-9046-4334-b70f-065599b44772-6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7": {
			"path": "generated-edge-simstep-e6dc0bb2-9046-4334-b70f-065599b44772-6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
			"fileName": "BottomBar.tsx",
			"cellName": "Snapshot Flow: Propagate Snapshot Request",
			"cellId": "6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
			"visible": true,
			"startLine": 2718,
			"endLine": 2718,
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"5841034e-45b2-4ee6-af45-7d7f390c06e7": {
			"path": "5841034e-45b2-4ee6-af45-7d7f390c06e7",
			"fileName": "5841034e-45b2-4ee6-af45-7d7f390c06e7",
			"cellName": "Snapshot Flow:\nCall Frame\nCapture Hook",
			"cellId": "5841034e-45b2-4ee6-af45-7d7f390c06e7",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-b377828c-8930-4b31-9183-37b94cc8c0a8-5841034e-45b2-4ee6-af45-7d7f390c06e7": {
			"path": "generated-edge-simstep-b377828c-8930-4b31-9183-37b94cc8c0a8-5841034e-45b2-4ee6-af45-7d7f390c06e7",
			"fileName": "App.tsx",
			"cellName": "Snapshot Flow: Call Frame Capture Hook",
			"cellId": "5841034e-45b2-4ee6-af45-7d7f390c06e7",
			"visible": true,
			"startLine": 662,
			"endLine": 662,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"baf259ae-76aa-4895-a750-b7e4943aaaa3": {
			"path": "baf259ae-76aa-4895-a750-b7e4943aaaa3",
			"fileName": "baf259ae-76aa-4895-a750-b7e4943aaaa3",
			"cellName": "Snapshot Flow:\nIPC from\nRenderer to\nMain",
			"cellId": "baf259ae-76aa-4895-a750-b7e4943aaaa3",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-3ecb3e11-c684-4fa2-a41c-ffdc4efa9370-baf259ae-76aa-4895-a750-b7e4943aaaa3": {
			"path": "generated-edge-simstep-3ecb3e11-c684-4fa2-a41c-ffdc4efa9370-baf259ae-76aa-4895-a750-b7e4943aaaa3",
			"fileName": "useFrameCapture.ts",
			"cellName": "Snapshot Flow: IPC from Renderer to Main",
			"cellId": "baf259ae-76aa-4895-a750-b7e4943aaaa3",
			"visible": true,
			"startLine": 15,
			"endLine": 15,
			"parentPath": "src/renderer/src/hooks/useFrameCapture.ts"
		},
		"5e8fde55-8214-461e-8a76-9aadacaff96f": {
			"path": "5e8fde55-8214-461e-8a76-9aadacaff96f",
			"fileName": "5e8fde55-8214-461e-8a76-9aadacaff96f",
			"cellName": "Snapshot Flow:\nResult Returned\nto Renderer",
			"cellId": "5e8fde55-8214-461e-8a76-9aadacaff96f",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-ca202a6b-9022-4f5a-a733-571d8a807494-5e8fde55-8214-461e-8a76-9aadacaff96f": {
			"path": "generated-edge-simstep-ca202a6b-9022-4f5a-a733-571d8a807494-5e8fde55-8214-461e-8a76-9aadacaff96f",
			"fileName": "ffmpeg.ts",
			"cellName": "Snapshot Flow: Result Returned to Renderer",
			"cellId": "5e8fde55-8214-461e-8a76-9aadacaff96f",
			"visible": true,
			"startLine": 128,
			"endLine": 128,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"7ca81a36-2cdf-456d-886c-a32ea58da381": {
			"path": "7ca81a36-2cdf-456d-886c-a32ea58da381",
			"fileName": "7ca81a36-2cdf-456d-886c-a32ea58da381",
			"cellName": "Frame Sequence\nFlow: Pass\nSegments to\nExtraction Logic",
			"cellId": "7ca81a36-2cdf-456d-886c-a32ea58da381",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"generated-edge-simstep-43fc8b41-3b87-4b11-b61c-9d268bdfeba0-7ca81a36-2cdf-456d-886c-a32ea58da381": {
			"path": "generated-edge-simstep-43fc8b41-3b87-4b11-b61c-9d268bdfeba0-7ca81a36-2cdf-456d-886c-a32ea58da381",
			"fileName": "App.tsx",
			"cellName": "Frame Sequence Flow: Pass Segments to Extraction Logic",
			"cellId": "7ca81a36-2cdf-456d-886c-a32ea58da381",
			"visible": true,
			"startLine": 1318,
			"endLine": 1318,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"3ca18d9f-fb09-4315-9b64-2a8217d4098d": {
			"path": "3ca18d9f-fb09-4315-9b64-2a8217d4098d",
			"fileName": "3ca18d9f-fb09-4315-9b64-2a8217d4098d",
			"cellName": "Frame Sequence\nFlow: Transmit\nUser Configuration",
			"cellId": "3ca18d9f-fb09-4315-9b64-2a8217d4098d",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"generated-edge-simstep-896c1633-2514-4966-b9c6-0c32a3bceed0-3ca18d9f-fb09-4315-9b64-2a8217d4098d": {
			"path": "generated-edge-simstep-896c1633-2514-4966-b9c6-0c32a3bceed0-3ca18d9f-fb09-4315-9b64-2a8217d4098d",
			"fileName": "App.tsx",
			"cellName": "Frame Sequence Flow: Transmit User Configuration",
			"cellId": "3ca18d9f-fb09-4315-9b64-2a8217d4098d",
			"visible": true,
			"startLine": 1281,
			"endLine": 1281,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"b863bc5a-f6fe-4fae-9fed-437787d1af42": {
			"path": "b863bc5a-f6fe-4fae-9fed-437787d1af42",
			"fileName": "b863bc5a-f6fe-4fae-9fed-437787d1af42",
			"cellName": "Frame Sequence\nFlow: Invoke\nFrame Range\nCapture Hook",
			"cellId": "b863bc5a-f6fe-4fae-9fed-437787d1af42",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-7e4a30d1-4838-4cb3-85eb-830fe21626c3-b863bc5a-f6fe-4fae-9fed-437787d1af42": {
			"path": "generated-edge-simstep-7e4a30d1-4838-4cb3-85eb-830fe21626c3-b863bc5a-f6fe-4fae-9fed-437787d1af42",
			"fileName": "App.tsx",
			"cellName": "Frame Sequence Flow: Invoke Frame Range Capture Hook",
			"cellId": "b863bc5a-f6fe-4fae-9fed-437787d1af42",
			"visible": true,
			"startLine": 35,
			"endLine": 38,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"bc515cef-c6e2-4c94-8f71-b183650d2eb7": {
			"path": "bc515cef-c6e2-4c94-8f71-b183650d2eb7",
			"fileName": "bc515cef-c6e2-4c94-8f71-b183650d2eb7",
			"cellName": "Frame Sequence\nFlow: IPC\nfrom Renderer\nto Main",
			"cellId": "bc515cef-c6e2-4c94-8f71-b183650d2eb7",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-065146a1-9434-4a5d-a458-7e641b56c726-bc515cef-c6e2-4c94-8f71-b183650d2eb7": {
			"path": "generated-edge-simstep-065146a1-9434-4a5d-a458-7e641b56c726-bc515cef-c6e2-4c94-8f71-b183650d2eb7",
			"fileName": "useFrameCapture.ts",
			"cellName": "Frame Sequence Flow: IPC from Renderer to Main",
			"cellId": "bc515cef-c6e2-4c94-8f71-b183650d2eb7",
			"visible": true,
			"startLine": 15,
			"endLine": 15,
			"parentPath": "src/renderer/src/hooks/useFrameCapture.ts"
		},
		"fc91e5d8-7045-4d32-999e-bd0c8f60d8ee": {
			"path": "fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
			"fileName": "fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
			"cellName": "Frame Sequence\nFlow: IPC\nProgress Update",
			"cellId": "fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-c534e644-c494-439a-b91c-00acb9450a00-fc91e5d8-7045-4d32-999e-bd0c8f60d8ee": {
			"path": "generated-edge-simstep-c534e644-c494-439a-b91c-00acb9450a00-fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
			"fileName": "ffmpeg.ts",
			"cellName": "Frame Sequence Flow: IPC Progress Update",
			"cellId": "fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
			"visible": true,
			"startLine": 1303,
			"endLine": 1303,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"41413e7c-1736-4001-9e7b-37ea7d0fe577": {
			"path": "41413e7c-1736-4001-9e7b-37ea7d0fe577",
			"fileName": "41413e7c-1736-4001-9e7b-37ea7d0fe577",
			"cellName": "Flow 1: Trigger Black Scene Detection - useSegments.ts:L209-211",
			"cellId": "41413e7c-1736-4001-9e7b-37ea7d0fe577",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-4e3478a8-6bfe-4668-9c60-2538ac5f4cac": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-4e3478a8-6bfe-4668-9c60-2538ac5f4cac",
			"fileName": "useSegments.ts",
			"wiki": "User initiates black scene detection via the UI (e.g., from the 'Tools' menu or a keyboard shortcut). This action calls the `detectBlackScenes` function, which is defined within the `useSegments` hook in the renderer process.",
			"cellName": "Flow 1: Trigger Black Scene Detection - useSegments.ts:L209-211",
			"cellId": "41413e7c-1736-4001-9e7b-37ea7d0fe577",
			"visible": true,
			"startLine": 209,
			"endLine": 211,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"6a1b8dca-200e-4b16-8a50-7db1abca439b": {
			"path": "6a1b8dca-200e-4b16-8a50-7db1abca439b",
			"fileName": "6a1b8dca-200e-4b16-8a50-7db1abca439b",
			"cellName": "Flow 1: Receive User Parameters - useSegments.ts:L213-217",
			"cellId": "6a1b8dca-200e-4b16-8a50-7db1abca439b",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-858f05be-34c9-4465-ad5a-ae1308c8014b": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-858f05be-34c9-4465-ad5a-ae1308c8014b",
			"fileName": "useSegments.ts",
			"wiki": "The user confirms the parameters in the dialog. The `showParametersDialog` promise resolves, returning the specified options to the `detectBlackScenes` function.",
			"cellName": "Flow 1: Receive User Parameters - useSegments.ts:L213-217",
			"cellId": "6a1b8dca-200e-4b16-8a50-7db1abca439b",
			"visible": true,
			"startLine": 213,
			"endLine": 217,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"2a3dd178-2a1b-4ae1-925f-6216f968c240": {
			"path": "2a3dd178-2a1b-4ae1-925f-6216f968c240",
			"fileName": "2a3dd178-2a1b-4ae1-925f-6216f968c240",
			"cellName": "Flow 1: Execute blackdetect FFmpeg Command - ffmpeg.ts:L363-398",
			"cellId": "2a3dd178-2a1b-4ae1-925f-6216f968c240",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-fdc1105b-5396-4625-8593-2de2a5607002": {
			"path": "src/main/ffmpeg.ts-simstep-fdc1105b-5396-4625-8593-2de2a5607002",
			"fileName": "ffmpeg.ts",
			"wiki": "In the main process, the `blackDetect` function constructs and executes an `ffmpeg` command with the `blackdetect` video filter. It continuously parses `ffmpeg`'s standard error stream to find the start and end times of detected black periods.",
			"cellName": "Flow 1: Execute blackdetect FFmpeg Command - ffmpeg.ts:L363-398",
			"cellId": "2a3dd178-2a1b-4ae1-925f-6216f968c240",
			"visible": true,
			"startLine": 363,
			"endLine": 398,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"fe613999-b8b1-476f-bf64-9ec8130e2387": {
			"path": "fe613999-b8b1-476f-bf64-9ec8130e2387",
			"fileName": "fe613999-b8b1-476f-bf64-9ec8130e2387",
			"cellName": "Flow 1: Add Segments to Timeline - useSegments.ts:L218",
			"cellId": "fe613999-b8b1-476f-bf64-9ec8130e2387",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-34148250-afcc-4adc-a830-e3175227167d": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-34148250-afcc-4adc-a830-e3175227167d",
			"fileName": "useSegments.ts",
			"wiki": "Back in the renderer process, the `detectSegments` helper function receives the new segments one by one and adds them to the application's state. This triggers a UI update, displaying the newly created segments on the timeline.",
			"cellName": "Flow 1: Add Segments to Timeline - useSegments.ts:L218",
			"cellId": "fe613999-b8b1-476f-bf64-9ec8130e2387",
			"visible": true,
			"startLine": 218,
			"endLine": 218,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"6c78fb42-5ea8-4258-83ba-1757da0ae75d": {
			"path": "6c78fb42-5ea8-4258-83ba-1757da0ae75d",
			"fileName": "6c78fb42-5ea8-4258-83ba-1757da0ae75d",
			"cellName": "Flow 2: Trigger Silent Scene Detection - useSegments.ts:L223-225",
			"cellId": "6c78fb42-5ea8-4258-83ba-1757da0ae75d",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-f300aea7-2079-46a7-abc1-a74eb9390556": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-f300aea7-2079-46a7-abc1-a74eb9390556",
			"fileName": "useSegments.ts",
			"wiki": "User initiates silent scene detection. This calls the `detectSilentScenes` function from the `useSegments` hook.",
			"cellName": "Flow 2: Trigger Silent Scene Detection - useSegments.ts:L223-225",
			"cellId": "6c78fb42-5ea8-4258-83ba-1757da0ae75d",
			"visible": true,
			"startLine": 223,
			"endLine": 225,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"5a1c35ad-4304-44fb-aeaf-a7298e78dad6": {
			"path": "5a1c35ad-4304-44fb-aeaf-a7298e78dad6",
			"fileName": "5a1c35ad-4304-44fb-aeaf-a7298e78dad6",
			"cellName": "Flow 2: Receive User Parameters - useSegments.ts:L227-231",
			"cellId": "5a1c35ad-4304-44fb-aeaf-a7298e78dad6",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-b02a0c20-a7f6-4048-97ae-30904f1a4b83": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-b02a0c20-a7f6-4048-97ae-30904f1a4b83",
			"fileName": "useSegments.ts",
			"wiki": "The user confirms the parameters, and the dialog returns the configured options for `silencedetect`.",
			"cellName": "Flow 2: Receive User Parameters - useSegments.ts:L227-231",
			"cellId": "5a1c35ad-4304-44fb-aeaf-a7298e78dad6",
			"visible": true,
			"startLine": 227,
			"endLine": 231,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"2d2d7b1e-3944-4360-9a12-ba0c64d82108": {
			"path": "2d2d7b1e-3944-4360-9a12-ba0c64d82108",
			"fileName": "2d2d7b1e-3944-4360-9a12-ba0c64d82108",
			"cellName": "Flow 2: Execute silencedetect FFmpeg Command - ffmpeg.ts:L400-440",
			"cellId": "2d2d7b1e-3944-4360-9a12-ba0c64d82108",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-46dad3a4-09c5-458f-8c88-f7c4814b795d": {
			"path": "src/main/ffmpeg.ts-simstep-46dad3a4-09c5-458f-8c88-f7c4814b795d",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process executes an `ffmpeg` command with the `silencedetect` audio filter. It parses the command's output to identify periods of silence.",
			"cellName": "Flow 2: Execute silencedetect FFmpeg Command - ffmpeg.ts:L400-440",
			"cellId": "2d2d7b1e-3944-4360-9a12-ba0c64d82108",
			"visible": true,
			"startLine": 400,
			"endLine": 440,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"fbc5bf71-7717-4ec3-8b17-f65b0878b5ec": {
			"path": "fbc5bf71-7717-4ec3-8b17-f65b0878b5ec",
			"fileName": "fbc5bf71-7717-4ec3-8b17-f65b0878b5ec",
			"cellName": "Flow 2: Add Segments to Timeline - useSegments.ts:L232",
			"cellId": "fbc5bf71-7717-4ec3-8b17-f65b0878b5ec",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-e99b1e8e-c558-4b50-96ab-d4a823cbb10f": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-e99b1e8e-c558-4b50-96ab-d4a823cbb10f",
			"fileName": "useSegments.ts",
			"wiki": "The renderer receives the silent segments and adds them to the application state, which updates the timeline UI to show the new segments.",
			"cellName": "Flow 2: Add Segments to Timeline - useSegments.ts:L232",
			"cellId": "fbc5bf71-7717-4ec3-8b17-f65b0878b5ec",
			"visible": true,
			"startLine": 232,
			"endLine": 232,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"75b73a32-5957-4815-95e0-67ad7f038911": {
			"path": "75b73a32-5957-4815-95e0-67ad7f038911",
			"fileName": "75b73a32-5957-4815-95e0-67ad7f038911",
			"cellName": "Flow 3: Trigger Scene Change Detection - useSegments.ts:L235-237",
			"cellId": "75b73a32-5957-4815-95e0-67ad7f038911",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-c180e610-6995-4d50-a703-ec902e67d614": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-c180e610-6995-4d50-a703-ec902e67d614",
			"fileName": "useSegments.ts",
			"wiki": "User initiates scene change detection. This calls the `detectSceneChanges` function from the `useSegments` hook.",
			"cellName": "Flow 3: Trigger Scene Change Detection - useSegments.ts:L235-237",
			"cellId": "75b73a32-5957-4815-95e0-67ad7f038911",
			"visible": true,
			"startLine": 235,
			"endLine": 237,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"f8df9560-03ba-4124-aa05-6ed2be191d38": {
			"path": "f8df9560-03ba-4124-aa05-6ed2be191d38",
			"fileName": "f8df9560-03ba-4124-aa05-6ed2be191d38",
			"cellName": "Flow 3: Receive User Parameters - useSegments.ts:L238",
			"cellId": "f8df9560-03ba-4124-aa05-6ed2be191d38",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-83387023-e9d3-49a8-9d44-0d14014dbc26": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-83387023-e9d3-49a8-9d44-0d14014dbc26",
			"fileName": "useSegments.ts",
			"wiki": "The dialog returns the user-configured scene change threshold. The `detectSceneChanges` function in the renderer then prepares to call the main process.",
			"cellName": "Flow 3: Receive User Parameters - useSegments.ts:L238",
			"cellId": "f8df9560-03ba-4124-aa05-6ed2be191d38",
			"visible": true,
			"startLine": 238,
			"endLine": 238,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"b8c56860-e6c1-4420-b4a8-f4abeba736fb": {
			"path": "b8c56860-e6c1-4420-b4a8-f4abeba736fb",
			"fileName": "b8c56860-e6c1-4420-b4a8-f4abeba736fb",
			"cellName": "Flow 3: Execute scdet FFmpeg Command - ffmpeg.ts:L267-271",
			"cellId": "b8c56860-e6c1-4420-b4a8-f4abeba736fb",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-363ee372-3f9f-43d0-acda-51e465492ed8": {
			"path": "src/main/ffmpeg.ts-simstep-363ee372-3f9f-43d0-acda-51e465492ed8",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process executes an `ffmpeg` command using the `scdet` filter to find scene changes. It parses the output to extract the timestamps of each scene change.",
			"cellName": "Flow 3: Execute scdet FFmpeg Command - ffmpeg.ts:L267-271",
			"cellId": "b8c56860-e6c1-4420-b4a8-f4abeba736fb",
			"visible": true,
			"startLine": 267,
			"endLine": 271,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"db988787-3f20-44e9-ae64-c706ac1070da": {
			"path": "db988787-3f20-44e9-ae64-c706ac1070da",
			"fileName": "db988787-3f20-44e9-ae64-c706ac1070da",
			"cellName": "Flow 3: Create Segments from Timestamps - useSegments.ts:L235-238",
			"cellId": "db988787-3f20-44e9-ae64-c706ac1070da",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-70193180-ff87-4d61-9b5a-0d547abaa93e": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-70193180-ff87-4d61-9b5a-0d547abaa93e",
			"fileName": "useSegments.ts",
			"wiki": "The renderer receives the array of timestamps. It then uses the `mapTimesToSegments` utility to convert these points in time into distinct segments, where each segment spans between two consecutive scene changes. These new segments are then added to the state, updating the UI.",
			"cellName": "Flow 3: Create Segments from Timestamps - useSegments.ts:L235-238",
			"cellId": "db988787-3f20-44e9-ae64-c706ac1070da",
			"visible": true,
			"startLine": 235,
			"endLine": 238,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"2713c463-fc15-4764-acdd-e4d851593016": {
			"path": "2713c463-fc15-4764-acdd-e4d851593016",
			"fileName": "2713c463-fc15-4764-acdd-e4d851593016",
			"cellName": "Flow 1:\nRequest Detection\nParameters",
			"cellId": "2713c463-fc15-4764-acdd-e4d851593016",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"generated-edge-simstep-7b7e6a7f-c99d-4a9f-9e6f-11d98f6182f4-2713c463-fc15-4764-acdd-e4d851593016": {
			"path": "generated-edge-simstep-7b7e6a7f-c99d-4a9f-9e6f-11d98f6182f4-2713c463-fc15-4764-acdd-e4d851593016",
			"fileName": "useSegments.ts",
			"cellName": "Flow 1: Request Detection Parameters",
			"cellId": "2713c463-fc15-4764-acdd-e4d851593016",
			"visible": true,
			"startLine": 212,
			"endLine": 212,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"780d8f1a-5abc-4225-bdee-24d239c58421": {
			"path": "780d8f1a-5abc-4225-bdee-24d239c58421",
			"fileName": "780d8f1a-5abc-4225-bdee-24d239c58421",
			"cellName": "Flow 1:\nInvoke FFmpeg\nBlack Detect",
			"cellId": "780d8f1a-5abc-4225-bdee-24d239c58421",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-4a349c48-fa90-4151-8cd3-ecd16c4077aa-780d8f1a-5abc-4225-bdee-24d239c58421": {
			"path": "generated-edge-simstep-4a349c48-fa90-4151-8cd3-ecd16c4077aa-780d8f1a-5abc-4225-bdee-24d239c58421",
			"fileName": "useSegments.ts",
			"cellName": "Flow 1: Invoke FFmpeg Black Detect",
			"cellId": "780d8f1a-5abc-4225-bdee-24d239c58421",
			"visible": true,
			"startLine": 218,
			"endLine": 218,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"68d289d9-a97b-48fe-b0ac-1ee5bf09b417": {
			"path": "68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
			"fileName": "68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
			"cellName": "Flow 1:\nStream Detected\nSegments",
			"cellId": "68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-4e6df59c-398d-445d-97ab-3f99213ed140-68d289d9-a97b-48fe-b0ac-1ee5bf09b417": {
			"path": "generated-edge-simstep-4e6df59c-398d-445d-97ab-3f99213ed140-68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
			"fileName": "ffmpeg.ts",
			"cellName": "Flow 1: Stream Detected Segments",
			"cellId": "68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
			"visible": true,
			"startLine": 377,
			"endLine": 384,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"db5280dd-daf5-4bbd-8e48-4f80bacec604": {
			"path": "db5280dd-daf5-4bbd-8e48-4f80bacec604",
			"fileName": "db5280dd-daf5-4bbd-8e48-4f80bacec604",
			"cellName": "Flow 2:\nRequest Detection\nParameters",
			"cellId": "db5280dd-daf5-4bbd-8e48-4f80bacec604",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"generated-edge-simstep-3c4303ea-133d-4ae1-a684-967f02f6782c-db5280dd-daf5-4bbd-8e48-4f80bacec604": {
			"path": "generated-edge-simstep-3c4303ea-133d-4ae1-a684-967f02f6782c-db5280dd-daf5-4bbd-8e48-4f80bacec604",
			"fileName": "useSegments.ts",
			"cellName": "Flow 2: Request Detection Parameters",
			"cellId": "db5280dd-daf5-4bbd-8e48-4f80bacec604",
			"visible": true,
			"startLine": 226,
			"endLine": 226,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"7ce78810-2070-4baa-bf4a-30046236415a": {
			"path": "7ce78810-2070-4baa-bf4a-30046236415a",
			"fileName": "7ce78810-2070-4baa-bf4a-30046236415a",
			"cellName": "Flow 2:\nInvoke FFmpeg\nSilence Detect",
			"cellId": "7ce78810-2070-4baa-bf4a-30046236415a",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-ac039e3f-4fc3-4a3c-991b-afc9accc3d8a-7ce78810-2070-4baa-bf4a-30046236415a": {
			"path": "generated-edge-simstep-ac039e3f-4fc3-4a3c-991b-afc9accc3d8a-7ce78810-2070-4baa-bf4a-30046236415a",
			"fileName": "useSegments.ts",
			"cellName": "Flow 2: Invoke FFmpeg Silence Detect",
			"cellId": "7ce78810-2070-4baa-bf4a-30046236415a",
			"visible": true,
			"startLine": 232,
			"endLine": 232,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"a66ee729-62e3-4105-8194-5d2cea5184a2": {
			"path": "a66ee729-62e3-4105-8194-5d2cea5184a2",
			"fileName": "a66ee729-62e3-4105-8194-5d2cea5184a2",
			"cellName": "Flow 2:\nStream Detected\nSegments",
			"cellId": "a66ee729-62e3-4105-8194-5d2cea5184a2",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-7c5463b4-716b-43db-9c36-61cd29e84fcb-a66ee729-62e3-4105-8194-5d2cea5184a2": {
			"path": "generated-edge-simstep-7c5463b4-716b-43db-9c36-61cd29e84fcb-a66ee729-62e3-4105-8194-5d2cea5184a2",
			"fileName": "ffmpeg.ts",
			"cellName": "Flow 2: Stream Detected Segments",
			"cellId": "a66ee729-62e3-4105-8194-5d2cea5184a2",
			"visible": true,
			"startLine": 417,
			"endLine": 423,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"7ed7867b-9cae-41e4-92ac-02414b6f1207": {
			"path": "7ed7867b-9cae-41e4-92ac-02414b6f1207",
			"fileName": "7ed7867b-9cae-41e4-92ac-02414b6f1207",
			"cellName": "Flow 3:\nRequest Detection\nParameters",
			"cellId": "7ed7867b-9cae-41e4-92ac-02414b6f1207",
			"visible": true,
			"parentCellId": "affb473b-e658-4871-9c60-5db305eafa52"
		},
		"generated-edge-simstep-09c731c3-1c4f-4043-b5ed-bc42e48cf350-7ed7867b-9cae-41e4-92ac-02414b6f1207": {
			"path": "generated-edge-simstep-09c731c3-1c4f-4043-b5ed-bc42e48cf350-7ed7867b-9cae-41e4-92ac-02414b6f1207",
			"fileName": "useSegments.ts",
			"cellName": "Flow 3: Request Detection Parameters",
			"cellId": "7ed7867b-9cae-41e4-92ac-02414b6f1207",
			"visible": true,
			"startLine": 238,
			"endLine": 238,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"568ede75-20ab-45af-abdf-2785d97c42f7": {
			"path": "568ede75-20ab-45af-abdf-2785d97c42f7",
			"fileName": "568ede75-20ab-45af-abdf-2785d97c42f7",
			"cellName": "Flow 3:\nInvoke FFmpeg\nScene Change\nDetect",
			"cellId": "568ede75-20ab-45af-abdf-2785d97c42f7",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-2fa08b1e-c7e0-4324-a9e9-2e6a688d46f8-568ede75-20ab-45af-abdf-2785d97c42f7": {
			"path": "generated-edge-simstep-2fa08b1e-c7e0-4324-a9e9-2e6a688d46f8-568ede75-20ab-45af-abdf-2785d97c42f7",
			"fileName": "useSegments.ts",
			"cellName": "Flow 3: Invoke FFmpeg Scene Change Detect",
			"cellId": "568ede75-20ab-45af-abdf-2785d97c42f7",
			"visible": true,
			"startLine": 17,
			"endLine": 17,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"7a19e285-3872-49ff-985a-7fa395fb31c9": {
			"path": "7a19e285-3872-49ff-985a-7fa395fb31c9",
			"fileName": "7a19e285-3872-49ff-985a-7fa395fb31c9",
			"cellName": "Flow 3:\nReturn Detected\nScene Change\nTimes",
			"cellId": "7a19e285-3872-49ff-985a-7fa395fb31c9",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-6a8353a9-37ee-4746-83eb-2e4d3d3a0b86-7a19e285-3872-49ff-985a-7fa395fb31c9": {
			"path": "generated-edge-simstep-6a8353a9-37ee-4746-83eb-2e4d3d3a0b86-7a19e285-3872-49ff-985a-7fa395fb31c9",
			"fileName": "ffmpeg.ts",
			"cellName": "Flow 3: Return Detected Scene Change Times",
			"cellId": "7a19e285-3872-49ff-985a-7fa395fb31c9",
			"visible": true,
			"startLine": 17,
			"endLine": 17,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"c38c2bea-da32-4ee2-b8bb-b76853988ffa": {
			"path": "c38c2bea-da32-4ee2-b8bb-b76853988ffa",
			"fileName": "c38c2bea-da32-4ee2-b8bb-b76853988ffa",
			"cellName": "TagEditor.tsx",
			"cellId": "c38c2bea-da32-4ee2-b8bb-b76853988ffa",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967"
		},
		"e8445cce-fa78-4751-aa5d-584945624b4d": {
			"path": "e8445cce-fa78-4751-aa5d-584945624b4d",
			"fileName": "e8445cce-fa78-4751-aa5d-584945624b4d",
			"cellName": "User Initiates Video Rotation - BottomBar.tsx:L545",
			"cellId": "e8445cce-fa78-4751-aa5d-584945624b4d",
			"visible": true,
			"parentCellId": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f"
		},
		"src/renderer/src/BottomBar.tsx-simstep-dd747ef9-736f-4615-8b5e-e4792bcfa06b": {
			"path": "src/renderer/src/BottomBar.tsx-simstep-dd747ef9-736f-4615-8b5e-e4792bcfa06b",
			"fileName": "BottomBar.tsx",
			"wiki": "The user clicks the 'Set output rotation' button in the bottom bar to cycle through rotation options (0, 90, 180, 270 degrees).",
			"cellName": "User Initiates Video Rotation - BottomBar.tsx:L545",
			"cellId": "e8445cce-fa78-4751-aa5d-584945624b4d",
			"visible": true,
			"startLine": 545,
			"endLine": 545,
			"parentCellId": "bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f",
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"380a86e3-1f7e-416d-a639-4e59df16ba0c": {
			"path": "380a86e3-1f7e-416d-a639-4e59df16ba0c",
			"fileName": "380a86e3-1f7e-416d-a639-4e59df16ba0c",
			"cellName": "App Component Updates Rotation State - App.tsx:L442-445",
			"cellId": "380a86e3-1f7e-416d-a639-4e59df16ba0c",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-5f285d87-87e1-44c6-850c-31f2b8e93d3c": {
			"path": "src/renderer/src/App.tsx-simstep-5f285d87-87e1-44c6-850c-31f2b8e93d3c",
			"fileName": "App.tsx",
			"wiki": "The `increaseRotation` function in `App.tsx` is executed. It updates the `rotation` state by adding 90 degrees, wrapping around.",
			"cellName": "App Component Updates Rotation State - App.tsx:L442-445",
			"cellId": "380a86e3-1f7e-416d-a639-4e59df16ba0c",
			"visible": true,
			"startLine": 442,
			"endLine": 445,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec": {
			"path": "08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec",
			"fileName": "08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec",
			"cellName": "User Opens File Metadata Editor - StreamsSelector.tsx:L505-509",
			"cellId": "08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec",
			"visible": true,
			"parentCellId": "3703cb7a-6500-43a5-8846-522dec2fd24d"
		},
		"src/renderer/src/StreamsSelector.tsx-simstep-ccc072ad-de56-4778-93da-5e63173b659d": {
			"path": "src/renderer/src/StreamsSelector.tsx-simstep-ccc072ad-de56-4778-93da-5e63173b659d",
			"fileName": "StreamsSelector.tsx",
			"wiki": "The user navigates to the 'Tracks / metadata' panel and clicks the edit button next to the file name, which opens a dialog to edit the container's metadata.",
			"cellName": "User Opens File Metadata Editor - StreamsSelector.tsx:L505-509",
			"cellId": "08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec",
			"visible": true,
			"startLine": 505,
			"endLine": 509,
			"parentCellId": "3703cb7a-6500-43a5-8846-522dec2fd24d",
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"f170bee2-f9ec-4f08-880b-178aa8120a74": {
			"path": "f170bee2-f9ec-4f08-880b-178aa8120a74",
			"fileName": "f170bee2-f9ec-4f08-880b-178aa8120a74",
			"cellName": "User Edits Metadata in TagEditor - TagEditor.tsx:L21-26",
			"cellId": "f170bee2-f9ec-4f08-880b-178aa8120a74",
			"visible": true,
			"parentCellId": "c38c2bea-da32-4ee2-b8bb-b76853988ffa"
		},
		"src/renderer/src/components/TagEditor.tsx-simstep-948204b8-b1e9-49af-b47a-2d281a967aee": {
			"path": "src/renderer/src/components/TagEditor.tsx-simstep-948204b8-b1e9-49af-b47a-2d281a967aee",
			"fileName": "TagEditor.tsx",
			"wiki": "Inside the `TagEditor`, the user adds or modifies a metadata tag, for example, setting the 'title' to 'My Vacation Video'. This action triggers the `onTagsChange` callback.",
			"cellName": "User Edits Metadata in TagEditor - TagEditor.tsx:L21-26",
			"cellId": "f170bee2-f9ec-4f08-880b-178aa8120a74",
			"visible": true,
			"startLine": 21,
			"endLine": 26,
			"parentCellId": "c38c2bea-da32-4ee2-b8bb-b76853988ffa",
			"parentPath": "src/renderer/src/components/TagEditor.tsx"
		},
		"7a54e3ae-30b8-4237-87ac-e8bc9635f5d7": {
			"path": "7a54e3ae-30b8-4237-87ac-e8bc9635f5d7",
			"fileName": "7a54e3ae-30b8-4237-87ac-e8bc9635f5d7",
			"cellName": "App Component Updates Custom Tags State - App.tsx:L132",
			"cellId": "7a54e3ae-30b8-4237-87ac-e8bc9635f5d7",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-6bfd2a9b-e07b-4406-9d07-c73bf0520b3d": {
			"path": "src/renderer/src/App.tsx-simstep-6bfd2a9b-e07b-4406-9d07-c73bf0520b3d",
			"fileName": "App.tsx",
			"wiki": "The `setCustomTagsByFile` function is called, updating the main `customTagsByFile` state in `App.tsx` with the new metadata for the specific file.",
			"cellName": "App Component Updates Custom Tags State - App.tsx:L132",
			"cellId": "7a54e3ae-30b8-4237-87ac-e8bc9635f5d7",
			"visible": true,
			"startLine": 132,
			"endLine": 132,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"eb55337f-1579-418c-aed2-84fa3123d894": {
			"path": "eb55337f-1579-418c-aed2-84fa3123d894",
			"fileName": "eb55337f-1579-418c-aed2-84fa3123d894",
			"cellName": "User Initiates Export - App.tsx:L1239-1240",
			"cellId": "eb55337f-1579-418c-aed2-84fa3123d894",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-66bcd865-02d6-4ae0-ac5f-675e26038018": {
			"path": "src/renderer/src/App.tsx-simstep-66bcd865-02d6-4ae0-ac5f-675e26038018",
			"fileName": "App.tsx",
			"wiki": "The user clicks the export button, triggering the `onExportPress` function, which orchestrates the entire export process.",
			"cellName": "User Initiates Export - App.tsx:L1239-1240",
			"cellId": "eb55337f-1579-418c-aed2-84fa3123d894",
			"visible": true,
			"startLine": 1239,
			"endLine": 1240,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"cefc02f7-41cc-4cdf-9767-f454f9b582db": {
			"path": "cefc02f7-41cc-4cdf-9767-f454f9b582db",
			"fileName": "cefc02f7-41cc-4cdf-9767-f454f9b582db",
			"cellName": "FFmpeg Command Generation - useFfmpegOperations.ts:L321-323",
			"cellId": "cefc02f7-41cc-4cdf-9767-f454f9b582db",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c0094ec7-6b75-431b-832a-fcb57ce2ff15": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c0094ec7-6b75-431b-832a-fcb57ce2ff15",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "Inside the `useFfmpegOperations` hook, the `losslessCutSingle` function (called by `cutMultiple`) constructs the FFmpeg command. It creates `-metadata` arguments from both the `rotation` value and the `customTagsByFile` object.",
			"cellName": "FFmpeg Command Generation - useFfmpegOperations.ts:L321-323",
			"cellId": "cefc02f7-41cc-4cdf-9767-f454f9b582db",
			"visible": true,
			"startLine": 321,
			"endLine": 323,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"60cef2c2-65c3-49cd-91f2-262ded0acb15": {
			"path": "60cef2c2-65c3-49cd-91f2-262ded0acb15",
			"fileName": "60cef2c2-65c3-49cd-91f2-262ded0acb15",
			"cellName": "Final Output with Modified Metadata - useFfmpegOperations.ts:L482",
			"cellId": "60cef2c2-65c3-49cd-91f2-262ded0acb15",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6a1d34e9-e7d3-471c-b8e2-869676930d30": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6a1d34e9-e7d3-471c-b8e2-869676930d30",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "FFmpeg processes the input file and writes a new output file with the specified rotation and title metadata embedded, without re-encoding the video stream.",
			"cellName": "Final Output with Modified Metadata - useFfmpegOperations.ts:L482",
			"cellId": "60cef2c2-65c3-49cd-91f2-262ded0acb15",
			"visible": true,
			"startLine": 482,
			"endLine": 482,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"b3d8793b-861a-4074-8153-b6a3972019dc": {
			"path": "b3d8793b-861a-4074-8153-b6a3972019dc",
			"fileName": "b3d8793b-861a-4074-8153-b6a3972019dc",
			"cellName": "Data Flow:\nRotation Request",
			"cellId": "b3d8793b-861a-4074-8153-b6a3972019dc",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-e2e44506-d397-4f68-962a-48cc3bf6b272-b3d8793b-861a-4074-8153-b6a3972019dc": {
			"path": "generated-edge-simstep-e2e44506-d397-4f68-962a-48cc3bf6b272-b3d8793b-861a-4074-8153-b6a3972019dc",
			"fileName": "BottomBar.tsx",
			"cellName": "Data Flow: Rotation Request",
			"cellId": "b3d8793b-861a-4074-8153-b6a3972019dc",
			"visible": true,
			"startLine": 2717,
			"endLine": 2717,
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"c16690b1-1e5e-49a9-9c1d-17d465e09fbf": {
			"path": "c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
			"fileName": "c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
			"cellName": "Data Flow:\nRotation State\nReady for\nExport",
			"cellId": "c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-27f6cc77-8798-4fc3-8fed-2b86643a5c3c-c16690b1-1e5e-49a9-9c1d-17d465e09fbf": {
			"path": "generated-edge-simstep-27f6cc77-8798-4fc3-8fed-2b86643a5c3c-c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
			"fileName": "App.tsx",
			"cellName": "Data Flow: Rotation State Ready for Export",
			"cellId": "c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
			"visible": true,
			"startLine": 2715,
			"endLine": 2716,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"b93232b3-d14c-4b9e-b760-8eb449542914": {
			"path": "b93232b3-d14c-4b9e-b760-8eb449542914",
			"fileName": "b93232b3-d14c-4b9e-b760-8eb449542914",
			"cellName": "Data Flow:\nLoading Existing\nMetadata",
			"cellId": "b93232b3-d14c-4b9e-b760-8eb449542914",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-279254d9-ff43-4c22-ab57-93be1228102f-b93232b3-d14c-4b9e-b760-8eb449542914": {
			"path": "generated-edge-simstep-279254d9-ff43-4c22-ab57-93be1228102f-b93232b3-d14c-4b9e-b760-8eb449542914",
			"fileName": "StreamsSelector.tsx",
			"cellName": "Data Flow: Loading Existing Metadata",
			"cellId": "b93232b3-d14c-4b9e-b760-8eb449542914",
			"visible": true,
			"startLine": 39,
			"endLine": 45,
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"b64c5174-9951-4b25-8ad7-8f08ac7ea7bf": {
			"path": "b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
			"fileName": "b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
			"cellName": "Data Flow:\nPropagating Metadata\nChanges",
			"cellId": "b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-bd929234-7704-47ae-af5a-4c1e17bdf2d3-b64c5174-9951-4b25-8ad7-8f08ac7ea7bf": {
			"path": "generated-edge-simstep-bd929234-7704-47ae-af5a-4c1e17bdf2d3-b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
			"fileName": "TagEditor.tsx",
			"cellName": "Data Flow: Propagating Metadata Changes",
			"cellId": "b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
			"visible": true,
			"startLine": 51,
			"endLine": 53,
			"parentPath": "src/renderer/src/components/TagEditor.tsx"
		},
		"ff5c4aea-4ad5-4a18-805f-e5d07fceaece": {
			"path": "ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
			"fileName": "ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
			"cellName": "Data Flow:\nMetadata State\nReady for\nExport",
			"cellId": "ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"generated-edge-simstep-fc6f9e6e-81e5-44af-95dd-ee47b49860d5-ff5c4aea-4ad5-4a18-805f-e5d07fceaece": {
			"path": "generated-edge-simstep-fc6f9e6e-81e5-44af-95dd-ee47b49860d5-ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
			"fileName": "App.tsx",
			"cellName": "Data Flow: Metadata State Ready for Export",
			"cellId": "ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
			"visible": true,
			"startLine": 2787,
			"endLine": 2787,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"0ac852af-dc55-46c3-9f97-f147ea451c76": {
			"path": "0ac852af-dc55-46c3-9f97-f147ea451c76",
			"fileName": "0ac852af-dc55-46c3-9f97-f147ea451c76",
			"cellName": "Data Flow:\nPassing Export\nParameters",
			"cellId": "0ac852af-dc55-46c3-9f97-f147ea451c76",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-c8878685-7061-4233-9b95-98287692b6ee-0ac852af-dc55-46c3-9f97-f147ea451c76": {
			"path": "generated-edge-simstep-c8878685-7061-4233-9b95-98287692b6ee-0ac852af-dc55-46c3-9f97-f147ea451c76",
			"fileName": "App.tsx",
			"cellName": "Data Flow: Passing Export Parameters",
			"cellId": "0ac852af-dc55-46c3-9f97-f147ea451c76",
			"visible": true,
			"startLine": 1125,
			"endLine": 1126,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"7b4e62b2-52a7-4618-9233-ac1763e094c9": {
			"path": "7b4e62b2-52a7-4618-9233-ac1763e094c9",
			"fileName": "7b4e62b2-52a7-4618-9233-ac1763e094c9",
			"cellName": "Data Flow:\nExecuting FFmpeg\nCommand",
			"cellId": "7b4e62b2-52a7-4618-9233-ac1763e094c9",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-20ba9511-9af7-4b45-ab5c-6bac36cb660c-7b4e62b2-52a7-4618-9233-ac1763e094c9": {
			"path": "generated-edge-simstep-20ba9511-9af7-4b45-ab5c-6bac36cb660c-7b4e62b2-52a7-4618-9233-ac1763e094c9",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Data Flow: Executing FFmpeg Command",
			"cellId": "7b4e62b2-52a7-4618-9233-ac1763e094c9",
			"visible": true,
			"startLine": 482,
			"endLine": 482,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"a294a0f8-b3f5-458b-9bcd-9ebaa70ed08e": {
			"path": "a294a0f8-b3f5-458b-9bcd-9ebaa70ed08e",
			"fileName": "a294a0f8-b3f5-458b-9bcd-9ebaa70ed08e",
			"cellName": "smartcut.ts",
			"cellId": "a294a0f8-b3f5-458b-9bcd-9ebaa70ed08e",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"96a6f128-de66-457a-8146-b54529f206ae": {
			"path": "96a6f128-de66-457a-8146-b54529f206ae",
			"fileName": "96a6f128-de66-457a-8146-b54529f206ae",
			"cellName": "ExportConfirm.tsx",
			"cellId": "96a6f128-de66-457a-8146-b54529f206ae",
			"visible": true,
			"parentCellId": "f64dcaa1-9740-4aad-aad8-03cb84a3c967"
		},
		"2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56": {
			"path": "2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56",
			"fileName": "2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56",
			"cellName": "Config: User Enables Smart Cut - ExportConfirm.tsx:L542-544",
			"cellId": "2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56",
			"visible": true,
			"parentCellId": "96a6f128-de66-457a-8146-b54529f206ae"
		},
		"src/renderer/src/components/ExportConfirm.tsx-simstep-e81559ca-edcf-4b1e-9b94-aead55c01a3c": {
			"path": "src/renderer/src/components/ExportConfirm.tsx-simstep-e81559ca-edcf-4b1e-9b94-aead55c01a3c",
			"fileName": "ExportConfirm.tsx",
			"wiki": "In the export confirmation dialog, the user enables the 'Smart cut (experimental)' option. This sets the 'enableSmartCut' flag to true, initiating the smart cut workflow for the export process.",
			"cellName": "Config: User Enables Smart Cut - ExportConfirm.tsx:L542-544",
			"cellId": "2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56",
			"visible": true,
			"startLine": 542,
			"endLine": 544,
			"parentCellId": "96a6f128-de66-457a-8146-b54529f206ae",
			"parentPath": "src/renderer/src/components/ExportConfirm.tsx"
		},
		"c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8": {
			"path": "c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8",
			"fileName": "c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8",
			"cellName": "Logic: Check if Smart Cut is Required - useFfmpegOperations.ts:L592",
			"cellId": "c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2f1b29a0-1fd1-4d75-b295-d1355083b96b": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2f1b29a0-1fd1-4d75-b295-d1355083b96b",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "For a given video segment, the system calls 'needsSmartCut' to determine if the desired cut-from time falls on a keyframe. If it doesn't, the function indicates that a smart cut is necessary and returns the timestamp of the closest previous keyframe.",
			"cellName": "Logic: Check if Smart Cut is Required - useFfmpegOperations.ts:L592",
			"cellId": "c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8",
			"visible": true,
			"startLine": 592,
			"endLine": 592,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"ed27f5ba-4434-4ebc-aa70-8c7d6b31c921": {
			"path": "ed27f5ba-4434-4ebc-aa70-8c7d6b31c921",
			"fileName": "ed27f5ba-4434-4ebc-aa70-8c7d6b31c921",
			"cellName": "Logic: Execute Lossless Cut for Main Segment - useFfmpegOperations.ts:L616-620",
			"cellId": "ed27f5ba-4434-4ebc-aa70-8c7d6b31c921",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3dcf5bf-87cc-4610-a028-2fb93dfc4faa": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3dcf5bf-87cc-4610-a028-2fb93dfc4faa",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "A lossless cut is performed on the main portion of the video segment. This cut starts from the keyframe ('losslessCutFrom') identified in the previous step and ends at the desired cut-to time. The result is saved to a temporary file.",
			"cellName": "Logic: Execute Lossless Cut for Main Segment - useFfmpegOperations.ts:L616-620",
			"cellId": "ed27f5ba-4434-4ebc-aa70-8c7d6b31c921",
			"visible": true,
			"startLine": 616,
			"endLine": 620,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"a1f5638d-5af6-493e-90b7-8edf75d04a29": {
			"path": "a1f5638d-5af6-493e-90b7-8edf75d04a29",
			"fileName": "a1f5638d-5af6-493e-90b7-8edf75d04a29",
			"cellName": "Logic: Re-encode Frame-Accurate 'Smart' Part - useFfmpegOperations.ts:L636",
			"cellId": "a1f5638d-5af6-493e-90b7-8edf75d04a29",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f3312e3-152d-490c-841d-90b7dc8adede": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f3312e3-152d-490c-841d-90b7dc8adede",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The small initial portion of the segment, from the user's desired start time ('desiredCutFrom') to the keyframe ('losslessCutFrom'), is re-encoded. This allows for a frame-accurate start. The result is saved to a second temporary file.",
			"cellName": "Logic: Re-encode Frame-Accurate 'Smart' Part - useFfmpegOperations.ts:L636",
			"cellId": "a1f5638d-5af6-493e-90b7-8edf75d04a29",
			"visible": true,
			"startLine": 636,
			"endLine": 636,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"418438aa-030f-499a-8cf7-aa4eef5d5720": {
			"path": "418438aa-030f-499a-8cf7-aa4eef5d5720",
			"fileName": "418438aa-030f-499a-8cf7-aa4eef5d5720",
			"cellName": "Logic: Concatenate Parts - useFfmpegOperations.ts:L641",
			"cellId": "418438aa-030f-499a-8cf7-aa4eef5d5720",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b3ab9bfc-c3c6-4236-bfb2-9e46c0e6b477": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b3ab9bfc-c3c6-4236-bfb2-9e46c0e6b477",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The two temporary files (the re-encoded 'smart' part and the lossless main part) are concatenated in the correct order to produce the final, frame-accurate video segment.",
			"cellName": "Logic: Concatenate Parts - useFfmpegOperations.ts:L641",
			"cellId": "418438aa-030f-499a-8cf7-aa4eef5d5720",
			"visible": true,
			"startLine": 641,
			"endLine": 641,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"ad450f9e-a81b-46dd-b383-68ad571496e0": {
			"path": "ad450f9e-a81b-46dd-b383-68ad571496e0",
			"fileName": "ad450f9e-a81b-46dd-b383-68ad571496e0",
			"cellName": "Logic: Cleanup Temporary Files - useFfmpegOperations.ts:L644-646",
			"cellId": "ad450f9e-a81b-46dd-b383-68ad571496e0",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b54019e6-5e85-4c06-b937-223c798c9862": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b54019e6-5e85-4c06-b937-223c798c9862",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "After the final file has been successfully created, the temporary files used for the encoded and lossless parts are deleted from the disk to free up space.",
			"cellName": "Logic: Cleanup Temporary Files - useFfmpegOperations.ts:L644-646",
			"cellId": "ad450f9e-a81b-46dd-b383-68ad571496e0",
			"visible": true,
			"startLine": 644,
			"endLine": 646,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"a8ab075a-f680-41b6-80f3-82912c45325f": {
			"path": "a8ab075a-f680-41b6-80f3-82912c45325f",
			"fileName": "a8ab075a-f680-41b6-80f3-82912c45325f",
			"cellName": "Data Flow:\nSmart Cut\nSetting Propagated",
			"cellId": "a8ab075a-f680-41b6-80f3-82912c45325f",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-eab3939c-6342-467f-9f4c-1ff9611ece6a-a8ab075a-f680-41b6-80f3-82912c45325f": {
			"path": "generated-edge-simstep-eab3939c-6342-467f-9f4c-1ff9611ece6a-a8ab075a-f680-41b6-80f3-82912c45325f",
			"fileName": "ExportConfirm.tsx",
			"cellName": "Data Flow: Smart Cut Setting Propagated",
			"cellId": "a8ab075a-f680-41b6-80f3-82912c45325f",
			"visible": true,
			"startLine": 136,
			"endLine": 136,
			"parentPath": "src/renderer/src/components/ExportConfirm.tsx"
		},
		"f8abec73-89d8-4dc9-98ba-f7e88dba81e1": {
			"path": "f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
			"fileName": "f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
			"cellName": "Data Flow:\nSmart Cut\nDecision Transmitted",
			"cellId": "f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-26d89800-20e8-4bc4-9490-e4897d95d936-f8abec73-89d8-4dc9-98ba-f7e88dba81e1": {
			"path": "generated-edge-simstep-26d89800-20e8-4bc4-9490-e4897d95d936-f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Data Flow: Smart Cut Decision Transmitted",
			"cellId": "f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
			"visible": true,
			"startLine": 9,
			"endLine": 15,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"04c12e78-a09b-441e-9662-ee28da381bb5": {
			"path": "04c12e78-a09b-441e-9662-ee28da381bb5",
			"fileName": "04c12e78-a09b-441e-9662-ee28da381bb5",
			"cellName": "Data Flow:\nLossless Part\nCreated",
			"cellId": "04c12e78-a09b-441e-9662-ee28da381bb5",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-d0978219-adf5-4a19-a6a7-19d099d59c74-04c12e78-a09b-441e-9662-ee28da381bb5": {
			"path": "generated-edge-simstep-d0978219-adf5-4a19-a6a7-19d099d59c74-04c12e78-a09b-441e-9662-ee28da381bb5",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Data Flow: Lossless Part Created",
			"cellId": "04c12e78-a09b-441e-9662-ee28da381bb5",
			"visible": true,
			"startLine": 612,
			"endLine": 614,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"5226167c-b75d-459f-b9dc-90316302ce10": {
			"path": "5226167c-b75d-459f-b9dc-90316302ce10",
			"fileName": "5226167c-b75d-459f-b9dc-90316302ce10",
			"cellName": "Data Flow:\nEncoded Part\nCreated",
			"cellId": "5226167c-b75d-459f-b9dc-90316302ce10",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-a9c97069-9d88-43f3-80d9-616a419ee75c-5226167c-b75d-459f-b9dc-90316302ce10": {
			"path": "generated-edge-simstep-a9c97069-9d88-43f3-80d9-616a419ee75c-5226167c-b75d-459f-b9dc-90316302ce10",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Data Flow: Encoded Part Created",
			"cellId": "5226167c-b75d-459f-b9dc-90316302ce10",
			"visible": true,
			"startLine": 626,
			"endLine": 627,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"328f35ce-0a59-4809-a562-e0d798d75254": {
			"path": "328f35ce-0a59-4809-a562-e0d798d75254",
			"fileName": "328f35ce-0a59-4809-a562-e0d798d75254",
			"cellName": "Data Flow:\nFinal File\nReady",
			"cellId": "328f35ce-0a59-4809-a562-e0d798d75254",
			"visible": true,
			"parentCellId": "5649a414-611f-438b-8798-36092666feb1"
		},
		"generated-edge-simstep-a430e6e3-eca5-4109-8a48-c34c6d3ddb8c-328f35ce-0a59-4809-a562-e0d798d75254": {
			"path": "generated-edge-simstep-a430e6e3-eca5-4109-8a48-c34c6d3ddb8c-328f35ce-0a59-4809-a562-e0d798d75254",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Data Flow: Final File Ready",
			"cellId": "328f35ce-0a59-4809-a562-e0d798d75254",
			"visible": true,
			"startLine": 642,
			"endLine": 642,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"74ae1197-e77d-4830-b68a-b20cdcf7d997": {
			"path": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"fileName": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"cellName": "Timeline.tsx",
			"cellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"3cb3c35e-0ea8-4403-b0c4-70370f31884b": {
			"path": "3cb3c35e-0ea8-4403-b0c4-70370f31884b",
			"fileName": "3cb3c35e-0ea8-4403-b0c4-70370f31884b",
			"cellName": "useThumbnails.ts",
			"cellId": "3cb3c35e-0ea8-4403-b0c4-70370f31884b",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"54170fc0-5715-465e-8182-cedb89b69a8e": {
			"path": "54170fc0-5715-465e-8182-cedb89b69a8e",
			"fileName": "54170fc0-5715-465e-8182-cedb89b69a8e",
			"cellName": "useTimelineScroll.ts",
			"cellId": "54170fc0-5715-465e-8182-cedb89b69a8e",
			"visible": true,
			"parentCellId": "e9994d85-90d3-4f26-9f4d-d16f248bf6a2"
		},
		"78d96f28-f575-478d-b45b-f695a1c15aee": {
			"path": "78d96f28-f575-478d-b45b-f695a1c15aee",
			"fileName": "78d96f28-f575-478d-b45b-f695a1c15aee",
			"cellName": "Timeline Initialization - App.tsx:L578-583",
			"cellId": "78d96f28-f575-478d-b45b-f695a1c15aee",
			"visible": true,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a"
		},
		"src/renderer/src/App.tsx-simstep-858293d4-0a8e-4695-b475-e6559f0881b1": {
			"path": "src/renderer/src/App.tsx-simstep-858293d4-0a8e-4695-b475-e6559f0881b1",
			"fileName": "App.tsx",
			"wiki": "The main App component initializes and calls the `useWaveform` and `useThumbnails` custom hooks. These hooks are responsible for managing the state and logic for fetching and displaying the audio waveform and video thumbnails respectively.",
			"cellName": "Timeline Initialization - App.tsx:L578-583",
			"cellId": "78d96f28-f575-478d-b45b-f695a1c15aee",
			"visible": true,
			"startLine": 578,
			"endLine": 583,
			"parentCellId": "28b30cce-6d19-4cdb-9d87-c8a3115ecf1a",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"4244ba21-c22a-4d0f-9daa-e2e3d3277174": {
			"path": "4244ba21-c22a-4d0f-9daa-e2e3d3277174",
			"fileName": "4244ba21-c22a-4d0f-9daa-e2e3d3277174",
			"cellName": "Data Extraction via FFmpeg - ffmpeg.ts:L452-488",
			"cellId": "4244ba21-c22a-4d0f-9daa-e2e3d3277174",
			"visible": true,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c"
		},
		"src/main/ffmpeg.ts-simstep-2d0570f4-1fa8-423f-b260-ccafedf532cd": {
			"path": "src/main/ffmpeg.ts-simstep-2d0570f4-1fa8-423f-b260-ccafedf532cd",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process receives the request and executes `ffmpeg` command-line operations to extract the necessary data. It generates peak audio data for the waveform and extracts frames at intervals to create thumbnail image files.",
			"cellName": "Data Extraction via FFmpeg - ffmpeg.ts:L452-488",
			"cellId": "4244ba21-c22a-4d0f-9daa-e2e3d3277174",
			"visible": true,
			"startLine": 452,
			"endLine": 488,
			"parentCellId": "0177db3d-d803-4aa3-8c88-fce03bfe8e4c",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"839743e8-ed3f-4102-8753-9109c7276157": {
			"path": "839743e8-ed3f-4102-8753-9109c7276157",
			"fileName": "839743e8-ed3f-4102-8753-9109c7276157",
			"cellName": "Update Component State with Data - useThumbnails.ts:L37",
			"cellId": "839743e8-ed3f-4102-8753-9109c7276157",
			"visible": true,
			"parentCellId": "3cb3c35e-0ea8-4403-b0c4-70370f31884b"
		},
		"src/renderer/src/hooks/useThumbnails.ts-simstep-c14eeaae-961a-4675-b5f5-b21f2623971f": {
			"path": "src/renderer/src/hooks/useThumbnails.ts-simstep-c14eeaae-961a-4675-b5f5-b21f2623971f",
			"fileName": "useThumbnails.ts",
			"wiki": "The `useWaveform` and `useThumbnails` hooks receive the data from the main process. They update their internal state using React's state setters (`setWaveforms`, `setThumbnails`), triggering a re-render of the `App` component.",
			"cellName": "Update Component State with Data - useThumbnails.ts:L37",
			"cellId": "839743e8-ed3f-4102-8753-9109c7276157",
			"visible": true,
			"startLine": 37,
			"endLine": 37,
			"parentCellId": "3cb3c35e-0ea8-4403-b0c4-70370f31884b",
			"parentPath": "src/renderer/src/hooks/useThumbnails.ts"
		},
		"33f7866b-3caa-4089-b5d1-99bebc4086b1": {
			"path": "33f7866b-3caa-4089-b5d1-99bebc4086b1",
			"fileName": "33f7866b-3caa-4089-b5d1-99bebc4086b1",
			"cellName": "Render Waveform and Thumbnails - Timeline.tsx:L367-389",
			"cellId": "33f7866b-3caa-4089-b5d1-99bebc4086b1",
			"visible": true,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997"
		},
		"src/renderer/src/Timeline.tsx-simstep-b2c38fa4-8c3a-4a48-b8f6-d3f85c3af555": {
			"path": "src/renderer/src/Timeline.tsx-simstep-b2c38fa4-8c3a-4a48-b8f6-d3f85c3af555",
			"fileName": "Timeline.tsx",
			"wiki": "The `Timeline` component receives the data props and renders the visuals. It maps over the `waveforms` data to render the `<Waveforms>` sub-component and maps over the `thumbnailsSorted` array to render a series of `<img>` tags for the video thumbnails.",
			"cellName": "Render Waveform and Thumbnails - Timeline.tsx:L367-389",
			"cellId": "33f7866b-3caa-4089-b5d1-99bebc4086b1",
			"visible": true,
			"startLine": 367,
			"endLine": 389,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"parentPath": "src/renderer/src/Timeline.tsx"
		},
		"570aa79f-429c-44d8-bf13-63d478a792e4": {
			"path": "570aa79f-429c-44d8-bf13-63d478a792e4",
			"fileName": "570aa79f-429c-44d8-bf13-63d478a792e4",
			"cellName": "Update Zoom State - useTimelineScroll.ts:L57-80",
			"cellId": "570aa79f-429c-44d8-bf13-63d478a792e4",
			"visible": true,
			"parentCellId": "54170fc0-5715-465e-8182-cedb89b69a8e"
		},
		"src/renderer/src/hooks/useTimelineScroll.ts-simstep-ef93fb74-5535-42ff-9af3-0fa679df634d": {
			"path": "src/renderer/src/hooks/useTimelineScroll.ts-simstep-ef93fb74-5535-42ff-9af3-0fa679df634d",
			"fileName": "useTimelineScroll.ts",
			"wiki": "The `onWheel` event handler, managed by the `useTimelineScroll` hook in `App.tsx`, processes the wheel event. It calculates a new zoom level based on the scroll direction and calls the `setZoom` state updater function.",
			"cellName": "Update Zoom State - useTimelineScroll.ts:L57-80",
			"cellId": "570aa79f-429c-44d8-bf13-63d478a792e4",
			"visible": true,
			"startLine": 57,
			"endLine": 80,
			"parentCellId": "54170fc0-5715-465e-8182-cedb89b69a8e",
			"parentPath": "src/renderer/src/hooks/useTimelineScroll.ts"
		},
		"b9382cb9-ac82-4566-b618-c20ee15abd72": {
			"path": "b9382cb9-ac82-4566-b618-c20ee15abd72",
			"fileName": "b9382cb9-ac82-4566-b618-c20ee15abd72",
			"cellName": "Re-render Timeline at New Zoom - Timeline.tsx:L392-395",
			"cellId": "b9382cb9-ac82-4566-b618-c20ee15abd72",
			"visible": true,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997"
		},
		"src/renderer/src/Timeline.tsx-simstep-1ce92ba9-2623-4e03-bdd1-3c3cd9d78086": {
			"path": "src/renderer/src/Timeline.tsx-simstep-1ce92ba9-2623-4e03-bdd1-3c3cd9d78086",
			"fileName": "Timeline.tsx",
			"wiki": "The `Timeline` component re-renders with the new `zoom` prop. It dynamically adjusts the CSS `width` of its inner container to stretch or shrink the content. A `useEffect` hook also programmatically adjusts the scroll position to keep the playhead centered.",
			"cellName": "Re-render Timeline at New Zoom - Timeline.tsx:L392-395",
			"cellId": "b9382cb9-ac82-4566-b618-c20ee15abd72",
			"visible": true,
			"startLine": 392,
			"endLine": 395,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"parentPath": "src/renderer/src/Timeline.tsx"
		},
		"75221063-4f72-499a-a2a6-edf625d3a6e1": {
			"path": "75221063-4f72-499a-a2a6-edf625d3a6e1",
			"fileName": "75221063-4f72-499a-a2a6-edf625d3a6e1",
			"cellName": "Conditionally Render Waveform or Placeholder - Timeline.tsx:L353-359",
			"cellId": "75221063-4f72-499a-a2a6-edf625d3a6e1",
			"visible": true,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997"
		},
		"src/renderer/src/Timeline.tsx-simstep-838a7ef2-7267-4c21-9196-d5bc1c06af30": {
			"path": "src/renderer/src/Timeline.tsx-simstep-838a7ef2-7267-4c21-9196-d5bc1c06af30",
			"fileName": "Timeline.tsx",
			"wiki": "Based on the `shouldShowWaveform` flag (which depends on the zoom level), the `Timeline` component either renders the detailed `<Waveforms>` component or a placeholder message telling the user to 'Zoom in more to view waveform'.",
			"cellName": "Conditionally Render Waveform or Placeholder - Timeline.tsx:L353-359",
			"cellId": "75221063-4f72-499a-a2a6-edf625d3a6e1",
			"visible": true,
			"startLine": 353,
			"endLine": 359,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997",
			"parentPath": "src/renderer/src/Timeline.tsx"
		},
		"97c44006-65d8-458d-9aba-6b898eaa8373": {
			"path": "97c44006-65d8-458d-9aba-6b898eaa8373",
			"fileName": "97c44006-65d8-458d-9aba-6b898eaa8373",
			"cellName": "Request for\nVisual Data",
			"cellId": "97c44006-65d8-458d-9aba-6b898eaa8373",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-11988c6f-a657-4f01-a2a1-73f8fa869b01-97c44006-65d8-458d-9aba-6b898eaa8373": {
			"path": "generated-edge-simstep-11988c6f-a657-4f01-a2a1-73f8fa869b01-97c44006-65d8-458d-9aba-6b898eaa8373",
			"fileName": "App.tsx",
			"cellName": "Request for Visual Data",
			"cellId": "97c44006-65d8-458d-9aba-6b898eaa8373",
			"visible": true,
			"startLine": 24,
			"endLine": 40,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"48a137fd-8326-4e9a-bb8a-1da06f068560": {
			"path": "48a137fd-8326-4e9a-bb8a-1da06f068560",
			"fileName": "48a137fd-8326-4e9a-bb8a-1da06f068560",
			"cellName": "Return Extracted\nData",
			"cellId": "48a137fd-8326-4e9a-bb8a-1da06f068560",
			"visible": true,
			"parentCellId": "463a5eb2-fde0-45da-bac1-9c66a01129dd"
		},
		"generated-edge-simstep-33112a96-2839-4c63-a961-f7d1f3b25286-48a137fd-8326-4e9a-bb8a-1da06f068560": {
			"path": "generated-edge-simstep-33112a96-2839-4c63-a961-f7d1f3b25286-48a137fd-8326-4e9a-bb8a-1da06f068560",
			"fileName": "ffmpeg.ts",
			"cellName": "Return Extracted Data",
			"cellId": "48a137fd-8326-4e9a-bb8a-1da06f068560",
			"visible": true,
			"startLine": 487,
			"endLine": 487,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"75867657-cb23-408a-8227-cd65d5ee6e9c": {
			"path": "75867657-cb23-408a-8227-cd65d5ee6e9c",
			"fileName": "75867657-cb23-408a-8227-cd65d5ee6e9c",
			"cellName": "Pass Visual\nData as\nProps",
			"cellId": "75867657-cb23-408a-8227-cd65d5ee6e9c",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-893dbb26-00db-49f6-b834-785112b7b649-75867657-cb23-408a-8227-cd65d5ee6e9c": {
			"path": "generated-edge-simstep-893dbb26-00db-49f6-b834-785112b7b649-75867657-cb23-408a-8227-cd65d5ee6e9c",
			"fileName": "useThumbnails.ts",
			"cellName": "Pass Visual Data as Props",
			"cellId": "75867657-cb23-408a-8227-cd65d5ee6e9c",
			"visible": true,
			"startLine": 2672,
			"endLine": 2678,
			"parentPath": "src/renderer/src/hooks/useThumbnails.ts"
		},
		"f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54": {
			"path": "f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
			"fileName": "f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
			"cellName": "User Initiates\nZoom Action",
			"cellId": "f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-05391235-324f-4051-8af9-aea526fc99cc-f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54": {
			"path": "generated-edge-simstep-05391235-324f-4051-8af9-aea526fc99cc-f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
			"fileName": "Timeline.tsx",
			"cellName": "User Initiates Zoom Action",
			"cellId": "f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
			"visible": true,
			"startLine": 363,
			"endLine": 363,
			"parentPath": "src/renderer/src/Timeline.tsx"
		},
		"e0f63a89-5164-4a64-bb15-de1d80d6315f": {
			"path": "e0f63a89-5164-4a64-bb15-de1d80d6315f",
			"fileName": "e0f63a89-5164-4a64-bb15-de1d80d6315f",
			"cellName": "Propagate New\nZoom Level",
			"cellId": "e0f63a89-5164-4a64-bb15-de1d80d6315f",
			"visible": true,
			"parentCellId": "e2b2a8e0-6ad4-410e-8f3a-f5b737c30614"
		},
		"generated-edge-simstep-a8b44ddd-002f-466d-8a9f-4fe2ff6f6d58-e0f63a89-5164-4a64-bb15-de1d80d6315f": {
			"path": "generated-edge-simstep-a8b44ddd-002f-466d-8a9f-4fe2ff6f6d58-e0f63a89-5164-4a64-bb15-de1d80d6315f",
			"fileName": "useTimelineScroll.ts",
			"cellName": "Propagate New Zoom Level",
			"cellId": "e0f63a89-5164-4a64-bb15-de1d80d6315f",
			"visible": true,
			"startLine": 2686,
			"endLine": 2709,
			"parentPath": "src/renderer/src/hooks/useTimelineScroll.ts"
		},
		"94de4282-fda9-4c1d-b6a9-7d3a8cfca33e": {
			"path": "94de4282-fda9-4c1d-b6a9-7d3a8cfca33e",
			"fileName": "94de4282-fda9-4c1d-b6a9-7d3a8cfca33e",
			"cellName": "Conditional Visibility\nCheck",
			"cellId": "94de4282-fda9-4c1d-b6a9-7d3a8cfca33e",
			"visible": true,
			"parentCellId": "74ae1197-e77d-4830-b68a-b20cdcf7d997"
		},
		"generated-edge-simstep-46f336ab-b189-45e6-9943-dc52467d310f-94de4282-fda9-4c1d-b6a9-7d3a8cfca33e": {
			"path": "generated-edge-simstep-46f336ab-b189-45e6-9943-dc52467d310f-94de4282-fda9-4c1d-b6a9-7d3a8cfca33e",
			"fileName": "Timeline.tsx",
			"cellName": "Conditional Visibility Check",
			"cellId": "94de4282-fda9-4c1d-b6a9-7d3a8cfca33e",
			"visible": true,
			"startLine": 384,
			"endLine": 384,
			"parentPath": "src/renderer/src/Timeline.tsx"
		}
	},
	"simulations": {
		"Lossless Video and Audio Cutting": {
			"name": "Lossless Video and Audio Cutting",
			"simSteps": [
				{
					"simStepId": "6eb49e2c-c345-4411-a39a-7d5f8503c15a",
					"diagramNodeId": "45fc7484-77e6-4c0f-8442-44e72c622501",
					"simStepLabel": "Set Segment Start Time",
					"simStepDescription": "The user presses a key (e.g., 'i') or clicks the 'Set start' button. This triggers the `setCutStart` function, which captures the video's current time to define the beginning of a new segment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "494",
						"endLine": "502",
						"relevantVariables": [
							"setCutStart",
							"getRelevantTime",
							"currentCutSeg"
						]
					},
					"inputDataExample": "{\"currentTime\": 30.5, \"currentSegments\": []}",
					"outputDataExample": "{\"currentSegments\": [{\"start\": 30.5}]}"
				},
				{
					"simStepId": "06ce4707-16a4-40a1-ace4-7487f11cf713",
					"diagramNodeId": "b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
					"simStepLabel": "Transmit Start Cut Action",
					"simStepDescription": "The UI component in the bottom bar, which contains the cut controls, invokes the `setCutStart` function when the user clicks the button.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/BottomBar.tsx",
						"startLine": "431",
						"endLine": "431",
						"relevantVariables": [
							"SetCutpointButton",
							"onClick",
							"setCutStart"
						]
					},
					"inputDataExample": "{\"action\": \"setCutStart\"}",
					"outputDataExample": "{\"action\": \"setCutStart\"}"
				},
				{
					"simStepId": "08b28a42-f61b-41ac-b21e-cf572c14eb92",
					"diagramNodeId": "9501368b-e6a8-45d9-980d-832b5066287b",
					"simStepLabel": "Set Segment End Time",
					"simStepDescription": "After moving the playhead to a new position, the user presses the 'o' key or clicks the 'Set end' button. This triggers the `setCutEnd` function, capturing the new time and finalizing the segment's duration.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "504",
						"endLine": "517",
						"relevantVariables": [
							"setCutEnd",
							"getRelevantTime",
							"currentCutSeg"
						]
					},
					"inputDataExample": "{\"currentTime\": 95.2, \"currentSegments\": [{\"start\": 30.5}]}",
					"outputDataExample": "{\"currentSegments\": [{\"start\": 30.5, \"end\": 95.2, \"name\": \"Segment 1\"}]}"
				},
				{
					"simStepId": "df5b6f6a-fbae-47f0-b21b-6fcf58175777",
					"diagramNodeId": "55ebca4b-7f50-4c47-8a25-53236a0216c0",
					"simStepLabel": "Transmit Finalized Segment for Export",
					"simStepDescription": "The application state now contains a fully defined segment. When the user initiates an export, this array of segments is passed from the main application component state to the export logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "364",
						"endLine": "364",
						"relevantVariables": [
							"useSegments",
							"cutSegments",
							"segmentsToExport"
						]
					},
					"inputDataExample": "{\"segmentsToExport\": [{\"start\": 30.5, \"end\": 95.2, \"name\": \"Segment 1\"}]}",
					"outputDataExample": "{\"segmentsToExport\": [{\"start\": 30.5, \"end\": 95.2, \"name\": \"Segment 1\"}]}"
				},
				{
					"simStepId": "42700cf0-b1d7-436d-8f3b-8b7b678299f9",
					"diagramNodeId": "ddd5cab6-426e-446d-b7f4-720fd942e4d1",
					"simStepLabel": "Orchestrate Export Operation",
					"simStepDescription": "After the user confirms export settings, the `losslessCut` function is called. It orchestrates the entire cutting process, iterating through each defined segment to be exported.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "493",
						"endLine": "657",
						"relevantVariables": [
							"losslessCut",
							"segments",
							"cutSegment",
							"pMap"
						]
					},
					"inputDataExample": "{\"segments\": [{\"start\": 30.5, \"end\": 95.2}], \"outputFormat\": \"mp4\", \"customOutDir\": \"/Users/john/Movies/Cuts\"}",
					"outputDataExample": "{\"status\": \"processing\", \"processedSegments\": []}"
				},
				{
					"simStepId": "e8a501ed-14af-47c1-a6c5-c519f9f10885",
					"diagramNodeId": "ec371131-7664-46bd-95de-9b8da465ab65",
					"simStepLabel": "Pass Single Segment to Cutter",
					"simStepDescription": "The `losslessCut` orchestrator passes the data for a single segment (start time, end time) to the `cutSegment` function, which is responsible for handling the export of that individual piece.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "649",
						"endLine": "649",
						"relevantVariables": [
							"pMap",
							"segments",
							"cutSegment"
						]
					},
					"inputDataExample": "{\"segment\": {\"start\": 30.5, \"end\": 95.2}, \"index\": 0}",
					"outputDataExample": "{\"segment\": {\"start\": 30.5, \"end\": 95.2}, \"index\": 0}"
				},
				{
					"simStepId": "2b6dcbfc-67fb-40cb-aae2-13d11aa06d4b",
					"diagramNodeId": "211a02ee-1f90-4abe-9bcb-2513f3a6bd5a",
					"simStepLabel": "Handle Single Segment Cutting",
					"simStepDescription": "The `cutSegment` function receives a single segment's data. For a standard lossless cut, it determines the output path and calls `losslessCutSingle` to perform the actual file operation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "525",
						"endLine": "651",
						"relevantVariables": [
							"cutSegment",
							"isEncoding",
							"losslessCutSingle"
						]
					},
					"inputDataExample": "{\"segment\": {\"start\": 30.5, \"end\": 95.2}, \"index\": 0}",
					"outputDataExample": "{\"cutParameters\": {\"cutFrom\": 30.5, \"cutTo\": 95.2, \"outPath\": \"/path/to/output-1.mp4\"}}"
				},
				{
					"simStepId": "c42c9a1e-2651-4617-93b9-459b0b8f41d0",
					"diagramNodeId": "45de532b-bca2-4a29-8e65-cacdbdcad058",
					"simStepLabel": "Pass Arguments for FFmpeg Execution",
					"simStepDescription": "The parameters for the cut operation, including start/end times, file paths, and format options, are passed to the `losslessCutSingle` function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "542",
						"endLine": "545",
						"relevantVariables": [
							"losslessCutSingle"
						]
					},
					"inputDataExample": "{\"cutFrom\": 30.5, \"cutTo\": 95.2, \"outPath\": \"/path/to/output-1.mp4\", \"keyframeCut\": false}",
					"outputDataExample": "{\"cutFrom\": 30.5, \"cutTo\": 95.2, \"outPath\": \"/path/to/output-1.mp4\", \"keyframeCut\": false}"
				},
				{
					"simStepId": "3c2123a1-6be4-4048-b6d3-8a11e718380c",
					"diagramNodeId": "b33a1117-9574-424b-9853-c32fb7e1e673",
					"simStepLabel": "Execute FFmpeg Command",
					"simStepDescription": "The `losslessCutSingle` function assembles the final FFmpeg command-line arguments and uses an IPC call (`ffmpegRun`) to send them to the main process for secure execution. The main process then spawns FFmpeg, which performs the lossless stream copy and writes the new file to disk.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "234",
						"endLine": "477",
						"relevantVariables": [
							"losslessCutSingle",
							"ffmpegArgs",
							"ffmpegRun"
						]
					},
					"inputDataExample": "{\"cutFrom\": 30.5, \"cutTo\": 95.2, \"outPath\": \"/path/to/output-1.mp4\"}",
					"outputDataExample": "{\"success\": true, \"outputPath\": \"/path/to/output-1.mp4\"}"
				}
			],
			"description": "<ul><li>The core feature of the application is to trim and cut large media files without re-encoding</li><li>This is extremely fast and preserves the original quality of the file</li><li>Users can define multiple segments to extract from a single source file</li><li>The application leverages FFmpeg's stream copy capabilities to perform these operations</li></ul>",
			"simulationNodesAndEdges": {
				"45fc7484-77e6-4c0f-8442-44e72c622501": {
					"simStepIds": [
						"6eb49e2c-c345-4411-a39a-7d5f8503c15a"
					]
				},
				"9501368b-e6a8-45d9-980d-832b5066287b": {
					"simStepIds": [
						"08b28a42-f61b-41ac-b21e-cf572c14eb92"
					]
				},
				"ddd5cab6-426e-446d-b7f4-720fd942e4d1": {
					"simStepIds": [
						"42700cf0-b1d7-436d-8f3b-8b7b678299f9"
					]
				},
				"211a02ee-1f90-4abe-9bcb-2513f3a6bd5a": {
					"simStepIds": [
						"2b6dcbfc-67fb-40cb-aae2-13d11aa06d4b"
					]
				},
				"b33a1117-9574-424b-9853-c32fb7e1e673": {
					"simStepIds": [
						"3c2123a1-6be4-4048-b6d3-8a11e718380c"
					]
				},
				"b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36": {
					"simStepIds": [
						"06ce4707-16a4-40a1-ace4-7487f11cf713"
					]
				},
				"55ebca4b-7f50-4c47-8a25-53236a0216c0": {
					"simStepIds": [
						"df5b6f6a-fbae-47f0-b21b-6fcf58175777"
					]
				},
				"ec371131-7664-46bd-95de-9b8da465ab65": {
					"simStepIds": [
						"e8a501ed-14af-47c1-a6c5-c519f9f10885"
					]
				},
				"45de532b-bca2-4a29-8e65-cacdbdcad058": {
					"simStepIds": [
						"c42c9a1e-2651-4617-93b9-459b0b8f41d0"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "losslessCutSingle, setCutStart, useSegments",
			"generationPrompt": "Lossless Video and Audio Cutting",
			"generationKeywords": "losslessCutSingle, setCutStart, useSegments"
		},
		"Merging and Concatenating Media Files": {
			"name": "Merging and Concatenating Media Files",
			"simSteps": [
				{
					"simStepId": "d020487f-6f97-438e-a80b-aa9ba8d22b53",
					"diagramNodeId": "ca46b6f9-2862-46e8-ae81-6aebfd0d8623",
					"simStepLabel": "UI: Display Concatenation Dialog",
					"simStepDescription": "When multiple files are loaded in batch mode, the `ConcatDialog` component becomes visible. This is triggered by the `concatDialogVisible` state flag being set to true, allowing the user to configure and initiate the merge process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2818",
						"endLine": "2818",
						"relevantVariables": [
							"ConcatDialog",
							"concatDialogVisible",
							"batchFiles",
							"batchFilePaths",
							"userConcatFiles"
						]
					},
					"inputDataExample": "{\"batchFiles\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"concatDialogVisible\": false}",
					"outputDataExample": "{\"concatDialogVisible\": true}"
				},
				{
					"simStepId": "42640ecb-79de-4a74-b249-d115117044a6",
					"diagramNodeId": "3dca4ccd-53e3-4667-9be1-285bb23657dc",
					"simStepLabel": "Data Transfer: Pass File Paths to Dialog",
					"simStepDescription": "The list of file paths from the application's state is passed as a prop to the `ConcatDialog` component for display and processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2818",
						"endLine": "2818",
						"relevantVariables": [
							"paths={batchFilePaths}"
						]
					},
					"inputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"]}",
					"outputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"]}"
				},
				{
					"simStepId": "338e42f2-b700-4d84-b0c5-416c1144afdd",
					"diagramNodeId": "219bb17e-4463-4c4a-9db2-c2eb49ca4208",
					"simStepLabel": "UI: User Confirms Concatenation",
					"simStepDescription": "The user configures the output settings in the `ConcatDialog` (e.g., file name, format) and clicks the confirmation button. This action triggers the `onConcat` callback function, passing the selected options back to the main `App` component.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ConcatDialog.tsx",
						"startLine": "39",
						"endLine": "41",
						"relevantVariables": [
							"onConcat"
						]
					},
					"inputDataExample": "{\"userAction\": \"Click Concat Button\", \"dialogState\": {\"outFileName\": \"merged_output.mp4\", \"fileFormat\": \"mp4\", \"includeAllStreams\": true}}",
					"outputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"includeAllStreams\": true, \"streams\": [], \"outFileName\": \"merged_output.mp4\", \"fileFormat\": \"mp4\", \"clearBatchFilesAfterConcat\": true}"
				},
				{
					"simStepId": "3f85400f-d6fc-4f92-b578-4c91aca74b72",
					"diagramNodeId": "406e921c-9faf-4e2a-88ea-94317276cd6d",
					"simStepLabel": "Data Transfer: Transmit Concatenation Parameters",
					"simStepDescription": "The parameters selected by the user in the dialog are passed from the `ConcatDialog` component to the `userConcatFiles` function in the `App` component via the `onConcat` prop.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ConcatDialog.tsx",
						"startLine": "40",
						"endLine": "40",
						"relevantVariables": [
							"onConcat"
						]
					},
					"inputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"includeAllStreams\": true, \"streams\": [], \"outFileName\": \"merged_output.mp4\", \"fileFormat\": \"mp4\", \"clearBatchFilesAfterConcat\": true}",
					"outputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"includeAllStreams\": true, \"streams\": [], \"outFileName\": \"merged_output.mp4\", \"fileFormat\": \"mp4\", \"clearBatchFilesAfterConcat\": true}"
				},
				{
					"simStepId": "f7e7d684-641a-4b90-93e5-6b7e10a0d042",
					"diagramNodeId": "0fb76bee-7ac9-454e-8839-0bb36f81c800",
					"simStepLabel": "Business Logic: Initiate Merging Operation",
					"simStepDescription": "The `userConcatFiles` function in `App.tsx` receives the parameters from the dialog. It determines the final output path and then calls the `concatFiles` function from the `useFfmpegOperations` hook to start the merging process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "944",
						"endLine": "944",
						"relevantVariables": [
							"userConcatFiles",
							"concatFiles"
						]
					},
					"inputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"includeAllStreams\": true, \"streams\": [], \"outFileName\": \"merged_output.mp4\", \"fileFormat\": \"mp4\"}",
					"outputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"outPath\": \"/Users/john/Movies/merged_output.mp4\", \"outDir\": \"/Users/john/Movies/\", \"outFormat\": \"mp4\", \"metadataFromPath\": \"/Users/john/Movies/clip1.mp4\", \"includeAllStreams\": true, \"streams\": []}"
				},
				{
					"simStepId": "c645a0ec-8fdc-40f5-bfbe-ed1d32b40a17",
					"diagramNodeId": "754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
					"simStepLabel": "Data Transfer: Pass Parameters to FFmpeg Hook",
					"simStepDescription": "The structured parameters for the concatenation operation are passed from the `userConcatFiles` function to the `concatFiles` function within the `useFfmpegOperations` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "944",
						"endLine": "944",
						"relevantVariables": [
							"concatFiles"
						]
					},
					"inputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"outPath\": \"/Users/john/Movies/merged_output.mp4\", \"outDir\": \"/Users/john/Movies/\", \"outFormat\": \"mp4\", \"metadataFromPath\": \"/Users/john/Movies/clip1.mp4\", \"includeAllStreams\": true, \"streams\": [], \"ffmpegExperimental\": false, \"preserveMovData\": true, \"movFastStart\": true, \"preserveMetadataOnMerge\": true, \"chapters\": []}",
					"outputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"outPath\": \"/Users/john/Movies/merged_output.mp4\", \"outDir\": \"/Users/john/Movies/\", \"outFormat\": \"mp4\", \"metadataFromPath\": \"/Users/john/Movies/clip1.mp4\", \"includeAllStreams\": true, \"streams\": [], \"ffmpegExperimental\": false, \"preserveMovData\": true, \"movFastStart\": true, \"preserveMetadataOnMerge\": true, \"chapters\": []}"
				},
				{
					"simStepId": "1f57a8af-ea7a-4d97-bdbb-7909b5b95fb9",
					"diagramNodeId": "d2872d2f-395a-4318-9b07-616af5a57ccc",
					"simStepLabel": "FFmpeg Logic: Prepare FFmpeg Concatenation Command",
					"simStepDescription": "The `concatFiles` function in `useFfmpegOperations` prepares the necessary arguments for FFmpeg. It generates a special text input (`concatTxt`) listing the files to be merged and then calls `runFfmpegConcat` to execute the command.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "226",
						"endLine": "226",
						"relevantVariables": [
							"concatFiles",
							"runFfmpegConcat",
							"ffmpegArgs",
							"concatTxt"
						]
					},
					"inputDataExample": "{\"paths\": [\"/Users/john/Movies/clip1.mp4\", \"/Users/john/Movies/clip2.mp4\"], \"outPath\": \"/Users/john/Movies/merged_output.mp4\"}",
					"outputDataExample": "{\"ffmpegArgs\": [\"-f\", \"concat\", \"-safe\", \"0\", \"-i\", \"-\", \"-c\", \"copy\", \"/Users/john/Movies/merged_output.mp4\"], \"concatTxt\": \"file '/Users/john/Movies/clip1.mp4'\\nfile '/Users/john/Movies/clip2.mp4'\", \"totalDuration\": 360}"
				},
				{
					"simStepId": "39706b1c-bb97-4758-a307-9d0172e3f2cf",
					"diagramNodeId": "c70d3025-379a-4fbd-8033-9dae6c60e8ce",
					"simStepLabel": "IPC: Transmit FFmpeg Command to Main Process",
					"simStepDescription": "The `runFfmpegConcat` function in the renderer process makes an Inter-Process Communication (IPC) call to the main process, sending the FFmpeg arguments and the concatenation text to be executed in the backend.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "15",
						"endLine": "15",
						"relevantVariables": [
							"runFfmpegConcat",
							"ffmpeg"
						]
					},
					"inputDataExample": "{\"ffmpegArgs\": [\"-f\", \"concat\", \"-safe\", \"0\", \"-i\", \"-\", \"-c\", \"copy\", \"/Users/john/Movies/merged_output.mp4\"], \"concatTxt\": \"file '/Users/john/Movies/clip1.mp4'\\nfile '/Users/john/Movies/clip2.mp4'\", \"totalDuration\": 360}",
					"outputDataExample": "{\"ffmpegArgs\": [\"-f\", \"concat\", \"-safe\", \"0\", \"-i\", \"-\", \"-c\", \"copy\", \"/Users/john/Movies/merged_output.mp4\"], \"concatTxt\": \"file '/Users/john/Movies/clip1.mp4'\\nfile '/Users/john/Movies/clip2.mp4'\", \"totalDuration\": 360}"
				},
				{
					"simStepId": "71c6a858-d542-42d7-a07f-3115d0cc0282",
					"diagramNodeId": "75294aa0-e6bd-47f4-8daf-980e6b860fb2",
					"simStepLabel": "Process Execution: Execute FFmpeg Process",
					"simStepDescription": "In the main process, `runFfmpegConcat` receives the arguments. It spawns an FFmpeg child process and pipes the `concatTxt` content to its standard input, causing FFmpeg to merge the files as specified.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "136",
						"endLine": "146",
						"relevantVariables": [
							"runFfmpegConcat",
							"runFfmpegProcess",
							"process",
							"concatTxt",
							"process.stdin"
						]
					},
					"inputDataExample": "{\"ffmpegArgs\": [\"-f\", \"concat\", \"-safe\", \"0\", \"-i\", \"-\", \"-c\", \"copy\", \"/Users/john/Movies/merged_output.mp4\"], \"concatTxt\": \"file '/Users/john/Movies/clip1.mp4'\\nfile '/Users/john/Movies/clip2.mp4'\", \"totalDuration\": 360}",
					"outputDataExample": "{\"process\": {\"pid\": 54321, \"exitCode\": 0}, \"stdout\": \"\", \"stderr\": \"ffmpeg version 5.1...\"}"
				}
			],
			"description": "<ul><li>Users can combine multiple media files into a single file</li><li>This operation is lossless if the source files share the same codec parameters (e</li><li>g</li><li>, clips from the same camera)</li><li>The application can also merge the exported segments from a single file into one output file</li></ul>",
			"simulationNodesAndEdges": {
				"ca46b6f9-2862-46e8-ae81-6aebfd0d8623": {
					"simStepIds": [
						"d020487f-6f97-438e-a80b-aa9ba8d22b53"
					]
				},
				"219bb17e-4463-4c4a-9db2-c2eb49ca4208": {
					"simStepIds": [
						"338e42f2-b700-4d84-b0c5-416c1144afdd"
					]
				},
				"0fb76bee-7ac9-454e-8839-0bb36f81c800": {
					"simStepIds": [
						"f7e7d684-641a-4b90-93e5-6b7e10a0d042"
					]
				},
				"d2872d2f-395a-4318-9b07-616af5a57ccc": {
					"simStepIds": [
						"1f57a8af-ea7a-4d97-bdbb-7909b5b95fb9"
					]
				},
				"75294aa0-e6bd-47f4-8daf-980e6b860fb2": {
					"simStepIds": [
						"71c6a858-d542-42d7-a07f-3115d0cc0282"
					]
				},
				"3dca4ccd-53e3-4667-9be1-285bb23657dc": {
					"simStepIds": [
						"42640ecb-79de-4a74-b249-d115117044a6"
					]
				},
				"406e921c-9faf-4e2a-88ea-94317276cd6d": {
					"simStepIds": [
						"3f85400f-d6fc-4f92-b578-4c91aca74b72"
					]
				},
				"754b3a4b-3aaf-4dec-9ead-be3b06f64cdf": {
					"simStepIds": [
						"c645a0ec-8fdc-40f5-bfbe-ed1d32b40a17"
					]
				},
				"c70d3025-379a-4fbd-8033-9dae6c60e8ce": {
					"simStepIds": [
						"39706b1c-bb97-4758-a307-9d0172e3f2cf"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "concatFiles, runFfmpegConcat, ConcatDialog",
			"generationPrompt": "Merging and Concatenating Media Files",
			"generationKeywords": "concatFiles, runFfmpegConcat, ConcatDialog"
		},
		"Managing Media Tracks and Streams": {
			"name": "Managing Media Tracks and Streams",
			"simSteps": [
				{
					"simStepId": "0013d881-3c4f-4a67-b096-4a030129bb50",
					"diagramNodeId": "905cd6d7-b971-41c9-b1d8-933a1e2dbd65",
					"simStepLabel": "Render Stream Selector UI",
					"simStepDescription": "The main application component, `App`, renders the `StreamsSelector` component when the user decides to manage media tracks. It passes down the current stream information and state management functions as props, which are primarily managed by the `useStreamsMeta` hook.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2772",
						"endLine": "2797",
						"relevantVariables": [
							"StreamsSelector",
							"streamsSelectorShown",
							"mainStreams",
							"isCopyingStreamId",
							"toggleCopyStreamId",
							"toggleCopyStreamIds",
							"useStreamsMeta"
						]
					},
					"inputDataExample": "{\"streamsSelectorShown\": true, \"mainStreams\": [{\"index\": 0, \"codec_type\": \"video\"}, {\"index\": 1, \"codec_type\": \"audio\"}], \"filePath\": \"/path/to/media.mp4\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "11fc14c2-cb68-46fc-a0ac-f97575891086",
					"diagramNodeId": "cca3b2e8-b69d-43f4-b483-e2660938686f",
					"simStepLabel": "Pass Props to StreamsSelector",
					"simStepDescription": "State and handler functions are passed as props from the `App` component to the `StreamsSelector` component to enable UI interaction and state display.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2773",
						"endLine": "2796",
						"relevantVariables": [
							"mainFilePath",
							"mainFileStreams",
							"isCopyingStreamId",
							"toggleCopyStreamId",
							"setCopyStreamIdsForPath"
						]
					},
					"inputDataExample": "{\"mainFilePath\": \"/path/to/media.mp4\", \"mainFileStreams\": [{\"index\": 0, \"codec_type\": \"video\"}, {\"index\": 1, \"codec_type\": \"audio\"}], \"isCopyingStreamId\": \"<function>\", \"toggleCopyStreamId\": \"<function>\"}",
					"outputDataExample": "{\"mainFilePath\": \"/path/to/media.mp4\", \"mainFileStreams\": [{\"index\": 0, \"codec_type\": \"video\"}, {\"index\": 1, \"codec_type\": \"audio\"}], \"isCopyingStreamId\": \"<function>\", \"toggleCopyStreamId\": \"<function>\"}"
				},
				{
					"simStepId": "3087e347-b5ed-4f67-97d9-12745403dad8",
					"diagramNodeId": "77a55804-37f5-4eb8-a005-a56e69a90607",
					"simStepLabel": "User Toggles a Stream",
					"simStepDescription": "Inside the `StreamsSelector` component, each media stream is rendered with a toggle. When a user clicks the toggle, the `onToggle` event handler is triggered, calling the `toggleCopyStreamId` function with the file path and the stream's index.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "445",
						"endLine": "445",
						"relevantVariables": [
							"toggleCopyStreamId",
							"onToggle",
							"mainFilePath",
							"streamId"
						]
					},
					"inputDataExample": "{\"event\": \"click\", \"streamId\": 1}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "5b0cf2a9-48f2-44af-9954-3fc08ec595a6",
					"diagramNodeId": "8586d239-bb64-4bba-9b53-7b177b0a6d7d",
					"simStepLabel": "Invoke State Update Handler",
					"simStepDescription": "The file path and stream index are passed as arguments from the `StreamsSelector` component to the `toggleCopyStreamId` function, which is defined in the `useStreamsMeta` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "445",
						"endLine": "445",
						"relevantVariables": [
							"toggleCopyStreamId"
						]
					},
					"inputDataExample": "{\"path\": \"/path/to/media.mp4\", \"index\": 1}",
					"outputDataExample": "{\"path\": \"/path/to/media.mp4\", \"index\": 1}"
				},
				{
					"simStepId": "07672606-da5f-4e17-bcfd-59ce4c377e2c",
					"diagramNodeId": "19c0ca87-f5a7-4e2e-8410-120483a7323e",
					"simStepLabel": "Update Stream Selection State",
					"simStepDescription": "The `toggleCopyStreamId` function in the `useStreamsMeta` hook updates the application's state. It uses `setCopyStreamIdsForPath` to find the existing selection state for the given file and toggles the boolean value for the specified stream index.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useStreamsMeta.ts",
						"startLine": "127",
						"endLine": "129",
						"relevantVariables": [
							"toggleCopyStreamId",
							"setCopyStreamIdsForPath",
							"path",
							"index"
						]
					},
					"inputDataExample": "{\"path\": \"/path/to/media.mp4\", \"index\": 1}",
					"outputDataExample": "{\"copyStreamIdsByFile\": {\"/path/to/media.mp4\": {\"0\": true, \"1\": false}}}"
				},
				{
					"simStepId": "8002719a-424b-48a2-9ed0-1496224dac62",
					"diagramNodeId": "2e2e77b9-7459-4d74-9172-5738f4be58e6",
					"simStepLabel": "Propagate State Change",
					"simStepDescription": "The updated `copyStreamIdsByFile` state, which holds the selection status for all streams, is propagated through the React component tree. This causes the UI to re-render and reflect the new selection status (e.g., a checked or unchecked checkbox).",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useStreamsMeta.ts",
						"startLine": "48",
						"endLine": "51",
						"relevantVariables": [
							"setCopyStreamIdsByFile",
							"copyStreamIdsByFile"
						]
					},
					"inputDataExample": "{\"copyStreamIdsByFile\": {\"/path/to/media.mp4\": {\"0\": true, \"1\": false}}}",
					"outputDataExample": "{\"copyStreamIdsByFile\": {\"/path/to/media.mp4\": {\"0\": true, \"1\": false}}}"
				},
				{
					"simStepId": "c22a07c2-1beb-467c-8a2b-a2a14784c5e6",
					"diagramNodeId": "2b390644-3e9d-4741-87b5-eac68264e723",
					"simStepLabel": "Initiate Export Operation",
					"simStepDescription": "When the user initiates an export, a function within the `useFfmpegOperations` hook (e.g., `cutMultiple`) is called. This function reads the current stream selection state (`copyFileStreams`) to determine which streams to include in the export.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "326",
						"endLine": "326",
						"relevantVariables": [
							"cutMultiple",
							"getMapStreamsArgs",
							"copyFileStreams",
							"allFilesMeta"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/path/to/media.mp4\", \"streamIds\": [0]}], \"outFormat\": \"mp4\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "e57039cf-aae7-4f08-8229-004f6de14a12",
					"diagramNodeId": "a496e3fe-de3e-41ed-892e-c41440d5fbfc",
					"simStepLabel": "Pass Stream Selection to Argument Generator",
					"simStepDescription": "The list of selected streams (`copyFileStreams`), along with other metadata like output format, is passed to the `getMapStreamsArgs` utility function to generate the corresponding FFmpeg command line arguments.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "326",
						"endLine": "326",
						"relevantVariables": [
							"getMapStreamsArgs",
							"copyFileStreamsFiltered",
							"allFilesMeta",
							"outFormat"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/path/to/media.mp4\", \"streamIds\": [0]}], \"allFilesMeta\": {\"/path/to/media.mp4\": {\"streams\": [{\"index\": 0, \"codec_type\": \"video\"}]}}, \"outFormat\": \"mp4\"}",
					"outputDataExample": "{\"copyFileStreams\": [{\"path\": \"/path/to/media.mp4\", \"streamIds\": [0]}], \"allFilesMeta\": {\"/path/to/media.mp4\": {\"streams\": [{\"index\": 0, \"codec_type\": \"video\"}]}}, \"outFormat\": \"mp4\"}"
				},
				{
					"simStepId": "bfd2b870-2082-4c51-a2c2-bb9c18566025",
					"diagramNodeId": "0abeddc4-ed20-4e7f-9678-6a0b8b42881a",
					"simStepLabel": "Generate FFmpeg Stream Mapping Arguments",
					"simStepDescription": "The `getMapStreamsArgs` function iterates through the provided `copyFileStreams` data. For each selected stream, it generates the appropriate `-map` and codec (`-c`) arguments that instruct FFmpeg which streams to copy from the input files to the output file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "198",
						"endLine": "214",
						"relevantVariables": [
							"getMapStreamsArgs",
							"copyFileStreams",
							"allFilesMeta",
							"outFormat",
							"args"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/path/to/media.mp4\", \"streamIds\": [0, 2]}], \"outFormat\": \"mp4\"}",
					"outputDataExample": "[\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:2\", \"-c:2\", \"copy\"]"
				},
				{
					"simStepId": "bc02ff4f-6f63-4cc1-b3a7-e43dcd9633fd",
					"diagramNodeId": "a9897815-5ce0-4284-8834-9ae72e4ef852",
					"simStepLabel": "Return FFmpeg Arguments",
					"simStepDescription": "The generated array of string arguments is returned to the calling function in the `useFfmpegOperations` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "201",
						"endLine": "201",
						"relevantVariables": [
							"args"
						]
					},
					"inputDataExample": "[\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:2\", \"-c:2\", \"copy\"]",
					"outputDataExample": "[\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:2\", \"-c:2\", \"copy\"]"
				},
				{
					"simStepId": "6cdaf881-1781-46b6-94a3-8c5d503c4d8c",
					"diagramNodeId": "648db7a7-ce2b-4505-99e0-de8615f3c02f",
					"simStepLabel": "Execute FFmpeg Command",
					"simStepDescription": "The `useFfmpegOperations` hook combines the stream mapping arguments with other necessary FFmpeg parameters (input files, output path, etc.) to form a complete command, which is then executed by a helper function like `runFfmpeg` to perform the final media processing.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "480",
						"endLine": "481",
						"relevantVariables": [
							"runFfmpeg",
							"ffmpegArgs",
							"mapStreamsArgs"
						]
					},
					"inputDataExample": "{\"ffmpegArgs\": [\"-i\", \"/path/to/media.mp4\", \"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:2\", \"-c:2\", \"copy\", \"/path/to/output.mp4\"]}",
					"outputDataExample": "null"
				}
			],
			"description": "<ul><li>The application provides a detailed view of all tracks within a media file (video, audio, subtitles, attachments)</li><li>Users can select which tracks to include in the final export</li><li>It's also possible to add tracks from external files, for example, to add a new music track to a video</li></ul>",
			"simulationNodesAndEdges": {
				"905cd6d7-b971-41c9-b1d8-933a1e2dbd65": {
					"simStepIds": [
						"0013d881-3c4f-4a67-b096-4a030129bb50"
					]
				},
				"77a55804-37f5-4eb8-a005-a56e69a90607": {
					"simStepIds": [
						"3087e347-b5ed-4f67-97d9-12745403dad8"
					]
				},
				"19c0ca87-f5a7-4e2e-8410-120483a7323e": {
					"simStepIds": [
						"07672606-da5f-4e17-bcfd-59ce4c377e2c"
					]
				},
				"2b390644-3e9d-4741-87b5-eac68264e723": {
					"simStepIds": [
						"c22a07c2-1beb-467c-8a2b-a2a14784c5e6"
					]
				},
				"0abeddc4-ed20-4e7f-9678-6a0b8b42881a": {
					"simStepIds": [
						"bfd2b870-2082-4c51-a2c2-bb9c18566025"
					]
				},
				"648db7a7-ce2b-4505-99e0-de8615f3c02f": {
					"simStepIds": [
						"6cdaf881-1781-46b6-94a3-8c5d503c4d8c"
					]
				},
				"cca3b2e8-b69d-43f4-b483-e2660938686f": {
					"simStepIds": [
						"11fc14c2-cb68-46fc-a0ac-f97575891086"
					]
				},
				"8586d239-bb64-4bba-9b53-7b177b0a6d7d": {
					"simStepIds": [
						"5b0cf2a9-48f2-44af-9954-3fc08ec595a6"
					]
				},
				"2e2e77b9-7459-4d74-9172-5738f4be58e6": {
					"simStepIds": [
						"8002719a-424b-48a2-9ed0-1496224dac62"
					]
				},
				"a496e3fe-de3e-41ed-892e-c41440d5fbfc": {
					"simStepIds": [
						"e57039cf-aae7-4f08-8229-004f6de14a12"
					]
				},
				"a9897815-5ce0-4284-8834-9ae72e4ef852": {
					"simStepIds": [
						"bc02ff4f-6f63-4cc1-b3a7-e43dcd9633fd"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "StreamsSelector, getMapStreamsArgs, toggleCopyStreamId",
			"generationPrompt": "Managing Media Tracks and Streams",
			"generationKeywords": "StreamsSelector, getMapStreamsArgs, toggleCopyStreamId"
		},
		"Lossless Format Conversion (Remuxing)": {
			"name": "Lossless Format Conversion (Remuxing)",
			"simSteps": [
				{
					"simStepId": "92161c88-d754-46fa-a5ec-7bd231c896a1",
					"diagramNodeId": "ab6d6760-8d86-4277-a029-6d08b9f6a9c0",
					"simStepLabel": "User Selects New Output Format",
					"simStepDescription": "The user interacts with the `OutputFormatSelect` component in the UI to choose a new container format for the output file, for example, changing from 'mkv' to 'mp4'. This action triggers an onChange event.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/OutputFormatSelect.tsx",
						"startLine": "24",
						"endLine": "55",
						"relevantVariables": [
							"OutputFormatSelect",
							"onOutputFormatUserChange"
						]
					},
					"inputDataExample": "{\n  \"currentFormat\": \"matroska\",\n  \"availableFormats\": [\"mp4\", \"mov\", \"mkv\", \"webm\"]\n}",
					"outputDataExample": "{\n  \"selectedFormat\": \"mp4\"\n}"
				},
				{
					"simStepId": "987f944e-a82e-407f-b86e-dadbaf351f87",
					"diagramNodeId": "11fc8bd0-2502-48ca-b87a-dec0102c0a28",
					"simStepLabel": "Format Selection Propagated",
					"simStepDescription": "The `onOutputFormatUserChange` callback is triggered, passing the newly selected format string from the `OutputFormatSelect` component to the main `App` component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2461",
						"endLine": "2463",
						"relevantVariables": [
							"renderOutFmt",
							"OutputFormatSelect",
							"onOutputFormatUserChange"
						]
					},
					"inputDataExample": "{\n  \"newFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"newFormat\": \"mp4\"\n}"
				},
				{
					"simStepId": "4b7e05e7-fa81-4ef9-964e-55fc440d9520",
					"diagramNodeId": "6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e",
					"simStepLabel": "Update Application State",
					"simStepDescription": "In the `App` component, the `onOutputFormatUserChange` function calls `setFileFormat` to update the application's state with the new output format. This state will be used when the export operation is initiated.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "217",
						"endLine": "222",
						"relevantVariables": [
							"onOutputFormatUserChange",
							"setFileFormat",
							"setOutFormatLocked"
						]
					},
					"inputDataExample": "{\n  \"newFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"state\": {\n    \"fileFormat\": \"mp4\"\n  }\n}"
				},
				{
					"simStepId": "59645a30-c7ed-4c98-af35-c7271b0a885a",
					"diagramNodeId": "b5d9bef4-34ac-4463-8794-0e316935da0e",
					"simStepLabel": "Export Triggered with New Format",
					"simStepDescription": "The user clicks the export button, triggering the export process. The application state, including the newly set `fileFormat`, is passed to the core export logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1106",
						"endLine": "1112",
						"relevantVariables": [
							"cutMultiple",
							"fileFormat",
							"copyFileStreams",
							"allFilesMeta"
						]
					},
					"inputDataExample": "{\n  \"state\": {\n    \"fileFormat\": \"mp4\",\n    \"filePath\": \"/path/to/video.mkv\",\n    \"segments\": [],\n    \"copyFileStreams\": [\n      {\n        \"path\": \"/path/to/video.mkv\",\n        \"streamIds\": [0, 1]\n      }\n    ]\n  }\n}",
					"outputDataExample": "{\n  \"state\": {\n    \"fileFormat\": \"mp4\",\n    \"filePath\": \"/path/to/video.mkv\",\n    \"segments\": [],\n    \"copyFileStreams\": [\n      {\n        \"path\": \"/path/to/video.mkv\",\n        \"streamIds\": [0, 1]\n      }\n    ]\n  }\n}"
				},
				{
					"simStepId": "00c406e5-0cc1-4137-a79e-a06564ec1000",
					"diagramNodeId": "438cc3d7-c74e-40ce-94cd-9fa2298aabbf",
					"simStepLabel": "Invoke FFmpeg Operation Hook",
					"simStepDescription": "The main export logic in `App.tsx` calls the `cutMultiple` function from the `useFfmpegOperations` hook. If there are no segments, this function will orchestrate a single export operation for the entire file, effectively performing a remux.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "485",
						"endLine": "652",
						"relevantVariables": [
							"cutMultiple",
							"losslessCutSingle"
						]
					},
					"inputDataExample": "{\n  \"outputDir\": \"/path/to/output\",\n  \"customOutDir\": null,\n  \"outFormat\": \"mp4\",\n  \"fileDuration\": 120.5,\n  \"copyFileStreams\": [\n    {\n      \"path\": \"/path/to/video.mkv\",\n      \"streamIds\": [0, 1]\n    }\n  ]\n}",
					"outputDataExample": "{\n  \"outFiles\": [\n    {\n      \"path\": \"/path/to/output/video.mp4\",\n      \"created\": true\n    }\n  ]\n}"
				},
				{
					"simStepId": "108f804f-5a01-4c6a-b2a4-c557c3c6e648",
					"diagramNodeId": "45010418-c767-4cda-9699-10f9e21565d3",
					"simStepLabel": "Pass Parameters to `losslessCutSingle`",
					"simStepDescription": "The `cutMultiple` function prepares parameters for and calls `losslessCutSingle` to process the file. It passes down the `outFormat` and all other relevant settings for generating the FFmpeg command.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "544",
						"endLine": "547",
						"relevantVariables": [
							"losslessCutSingle",
							"outFormat"
						]
					},
					"inputDataExample": "{\n  \"outPath\": \"/path/to/output/video.mp4\",\n  \"outFormat\": \"mp4\",\n  \"copyFileStreams\": [\n    {\n      \"path\": \"/path/to/video.mkv\",\n      \"streamIds\": [0, 1]\n    }\n  ]\n}",
					"outputDataExample": "{\n  \"outPath\": \"/path/to/output/video.mp4\",\n  \"outFormat\": \"mp4\",\n  \"copyFileStreams\": [\n    {\n      \"path\": \"/path/to/video.mkv\",\n      \"streamIds\": [0, 1]\n    }\n  ]\n}"
				},
				{
					"simStepId": "419d66ba-777c-4d76-a53f-bf621628105d",
					"diagramNodeId": "99306854-1574-4e2e-8db5-744857c2c9c0",
					"simStepLabel": "Generate Stream Mapping Arguments",
					"simStepDescription": "Inside `losslessCutSingle`, the `getMapStreamsArgs` utility is called. This function determines how to handle each media stream (video, audio, subtitle) based on the target `outFormat`. For a simple remux, it generates arguments to copy the streams without re-encoding.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "326",
						"endLine": "326",
						"relevantVariables": [
							"getMapStreamsArgs",
							"outFormat"
						]
					},
					"inputDataExample": "{\n  \"copyFileStreams\": [\n    {\n      \"path\": \"/path/to/video.mkv\",\n      \"streamIds\": [0, 1]\n    }\n  ],\n  \"allFilesMeta\": {\n    \"/path/to/video.mkv\": {\n      \"streams\": [\n        { \"index\": 0, \"codec_type\": \"video\", \"codec_name\": \"h264\" },\n        { \"index\": 1, \"codec_type\": \"audio\", \"codec_name\": \"aac\" }\n      ]\n    }\n  },\n  \"outFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"mapStreamsArgs\": [\n    \"-map\", \"0:0\", \"-c:0\", \"copy\",\n    \"-map\", \"0:1\", \"-c:1\", \"copy\"\n  ]\n}"
				},
				{
					"simStepId": "f70094bb-2844-486e-8405-a4b95d84816e",
					"diagramNodeId": "0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
					"simStepLabel": "Stream Arguments Returned",
					"simStepDescription": "`getMapStreamsArgs` returns an array of command-line arguments to `losslessCutSingle` for stream handling.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "226",
						"endLine": "226",
						"relevantVariables": [
							"args"
						]
					},
					"inputDataExample": "{\n  \"mapStreamsArgs\": [\n    \"-map\", \"0:0\", \"-c:0\", \"copy\",\n    \"-map\", \"0:1\", \"-c:1\", \"copy\"\n  ]\n}",
					"outputDataExample": "{\n  \"mapStreamsArgs\": [\n    \"-map\", \"0:0\", \"-c:0\", \"copy\",\n    \"-map\", \"0:1\", \"-c:1\", \"copy\"\n  ]\n}"
				},
				{
					"simStepId": "6ff789ee-75e7-4836-826d-fe2d42d10887",
					"diagramNodeId": "66d0854e-1628-4750-881f-5cc41bd882a8",
					"simStepLabel": "Determine Per-Stream Codec Flags",
					"simStepDescription": "The `getMapStreamsArgs` function internally calls `getPerStreamFlags` for each stream. This function contains the logic to handle codec compatibility. For simple remuxing, it returns `['c:x', 'copy']`. However, it can also decide to re-encode a stream if the target container (`outFormat`) does not support the source codec (e.g., converting subtitles for MP4 compatibility).",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "108",
						"endLine": "201",
						"relevantVariables": [
							"getPerStreamFlags",
							"isMov",
							"isMatroska",
							"addCodecArgs"
						]
					},
					"inputDataExample": "{\n  \"stream\": {\n    \"codec_type\": \"subtitle\",\n    \"codec_name\": \"ass\"\n  },\n  \"outFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"args\": [\n    \"-c:2\", \"mov_text\"\n  ]\n}"
				},
				{
					"simStepId": "e0ea8c47-b33c-4a87-8177-5f546cdcf0f4",
					"diagramNodeId": "c525b1b1-77fa-4d0d-be43-1f8edc959518",
					"simStepLabel": "Codec Flags Returned",
					"simStepDescription": "The generated flags for a single stream are returned to the `getMapStreamsArgs` function to be aggregated.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "200",
						"endLine": "200",
						"relevantVariables": [
							"args"
						]
					},
					"inputDataExample": "{\n  \"args\": [\n    \"-c:0\", \"copy\"\n  ]\n}",
					"outputDataExample": "{\n  \"args\": [\n    \"-c:0\", \"copy\"\n  ]\n}"
				},
				{
					"simStepId": "0bf0d1c6-6653-4711-8ec4-5484ce078298",
					"diagramNodeId": "46262f45-c20c-4c0e-b939-72a028504b0f",
					"simStepLabel": "Assemble and Execute Final FFmpeg Command",
					"simStepDescription": "`losslessCutSingle` assembles the complete FFmpeg command, including input/output paths, stream mappings, and crucially, the output format flag (`-f mp4`). It then executes the command to perform the lossless remux operation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "406",
						"endLine": "414",
						"relevantVariables": [
							"ffmpegArgs",
							"outFormat",
							"outPath",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\n  \"mapStreamsArgs\": [\n    \"-map\", \"0:0\", \"-c:0\", \"copy\",\n    \"-map\", \"0:1\", \"-c:1\", \"copy\"\n  ],\n  \"outFormat\": \"mp4\",\n  \"outPath\": \"/path/to/output/video.mp4\"\n}",
					"outputDataExample": "{\n  \"result\": {\n    \"code\": 0\n  },\n  \"command\": \"ffmpeg -i in.mkv -map 0:0 -c:0 copy -map 0:1 -c:1 copy -f mp4 /path/to/output/video.mp4\"\n}"
				}
			],
			"description": "<ul><li>Users can change the container format of a media file (e</li><li>g</li><li>, from MKV to MP4) without re-encoding the underlying streams</li><li>This is a very fast operation used to make files compatible with different devices or software (like iPhones or editing software)</li></ul>",
			"simulationNodesAndEdges": {
				"ab6d6760-8d86-4277-a029-6d08b9f6a9c0": {
					"simStepIds": [
						"92161c88-d754-46fa-a5ec-7bd231c896a1"
					]
				},
				"6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e": {
					"simStepIds": [
						"4b7e05e7-fa81-4ef9-964e-55fc440d9520"
					]
				},
				"438cc3d7-c74e-40ce-94cd-9fa2298aabbf": {
					"simStepIds": [
						"00c406e5-0cc1-4137-a79e-a06564ec1000"
					]
				},
				"99306854-1574-4e2e-8db5-744857c2c9c0": {
					"simStepIds": [
						"419d66ba-777c-4d76-a53f-bf621628105d"
					]
				},
				"66d0854e-1628-4750-881f-5cc41bd882a8": {
					"simStepIds": [
						"6ff789ee-75e7-4836-826d-fe2d42d10887"
					]
				},
				"46262f45-c20c-4c0e-b939-72a028504b0f": {
					"simStepIds": [
						"0bf0d1c6-6653-4711-8ec4-5484ce078298"
					]
				},
				"11fc8bd0-2502-48ca-b87a-dec0102c0a28": {
					"simStepIds": [
						"987f944e-a82e-407f-b86e-dadbaf351f87"
					]
				},
				"b5d9bef4-34ac-4463-8794-0e316935da0e": {
					"simStepIds": [
						"59645a30-c7ed-4c98-af35-c7271b0a885a"
					]
				},
				"45010418-c767-4cda-9699-10f9e21565d3": {
					"simStepIds": [
						"108f804f-5a01-4c6a-b2a4-c557c3c6e648"
					]
				},
				"0697f662-55f2-4cc0-bb89-7d34dbcf05d4": {
					"simStepIds": [
						"f70094bb-2844-486e-8405-a4b95d84816e"
					]
				},
				"c525b1b1-77fa-4d0d-be43-1f8edc959518": {
					"simStepIds": [
						"e0ea8c47-b33c-4a87-8177-5f546cdcf0f4"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "outFormat, remux, OutputFormatSelect",
			"generationPrompt": "Lossless Format Conversion (Remuxing)",
			"generationKeywords": "outFormat, remux, OutputFormatSelect"
		},
		"Importing and Exporting Cut Segments (EDL)": {
			"name": "Importing and Exporting Cut Segments (EDL)",
			"simSteps": [
				{
					"simStepId": "b7677740-8ec1-460b-b648-5065f58d5814",
					"diagramNodeId": "f226c949-d4c7-485f-b4eb-e546741be2a5",
					"simStepLabel": "Import Flow: User Initiates EDL Import",
					"simStepDescription": "The user clicks on the 'Import project' > 'EDL' menu item to begin the process of importing cut segments from an Edit Decision List (EDL) file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "90",
						"endLine": "94",
						"relevantVariables": [
							"click",
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"eventType\": \"menuClick\", \"menuItem\": \"EDL\"}"
				},
				{
					"simStepId": "1338e875-9c9b-4399-8a2a-eb593eb055e0",
					"diagramNodeId": "d2b8473f-effc-48b4-8142-d38464f9356f",
					"simStepLabel": "Import Flow: IPC Call from Main to Renderer",
					"simStepDescription": "The main process sends an Inter-Process Communication (IPC) message to the renderer process to trigger the EDL import file selection dialog.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "92",
						"endLine": "92",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{\"channel\": \"importEdlFile\", \"payload\": \"edl\"}",
					"outputDataExample": "{\"channel\": \"importEdlFile\", \"payload\": \"edl\"}"
				},
				{
					"simStepId": "1a71a446-0c7e-4e89-84e0-bb9ef8030a65",
					"diagramNodeId": "2bdb996a-2731-4e68-a183-dd506755e3ce",
					"simStepLabel": "Import Flow: Renderer Receives IPC and Calls Import Handler",
					"simStepDescription": "An IPC listener in the main React component (`App.tsx`) receives the 'importEdlFile' event and calls the `importEdlFile` function, which wraps the core import logic.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2321",
						"endLine": "2325",
						"relevantVariables": [
							"importEdlFile",
							"askForEdlImport",
							"withErrorHandling"
						]
					},
					"inputDataExample": "{\"type\": \"edl\"}",
					"outputDataExample": "{\"type\": \"edl\", \"fps\": 29.97}"
				},
				{
					"simStepId": "028e1164-45a0-444c-a889-c6aa5219f1f8",
					"diagramNodeId": "2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
					"simStepLabel": "Import Flow: Invoking EDL Import Dialog Logic",
					"simStepDescription": "The `importEdlFile` handler calls `askForEdlImport` from the `edlStore`, passing the import type and the detected frames per second (FPS) of the current video file.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2324",
						"endLine": "2324",
						"relevantVariables": [
							"askForEdlImport"
						]
					},
					"inputDataExample": "{\"type\": \"edl\", \"fps\": 29.97}",
					"outputDataExample": "{\"type\": \"edl\", \"fps\": 29.97}"
				},
				{
					"simStepId": "27acfa9c-8b4a-474c-9a67-65c54258a91c",
					"diagramNodeId": "7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0",
					"simStepLabel": "Import Flow: Displaying File Selection Dialog",
					"simStepDescription": "The `askForEdlImport` function in `edlStore.ts` shows a native file open dialog, allowing the user to select the EDL file they want to import.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "157",
						"endLine": "178",
						"relevantVariables": [
							"askForEdlImport",
							"showOpenDialog",
							"filters"
						]
					},
					"inputDataExample": "{\"type\": \"edl\", \"fps\": 29.97}",
					"outputDataExample": "{\"canceled\": false, \"filePaths\": [\"/Users/losslesscut_user/Desktop/project_x/session1_cuts.edl\"]}"
				},
				{
					"simStepId": "c4322fec-7be5-4029-a38e-15072a7d0f73",
					"diagramNodeId": "3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
					"simStepLabel": "Import Flow: Passing File Path for Parsing",
					"simStepDescription": "After the user selects a file, its path is passed to the `readEdlFile` function to be read and parsed.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "180",
						"endLine": "180",
						"relevantVariables": [
							"readEdlFile",
							"firstFilePath"
						]
					},
					"inputDataExample": "{\"type\": \"edl\", \"path\": \"/Users/losslesscut_user/Desktop/project_x/session1_cuts.edl\", \"fps\": 29.97}",
					"outputDataExample": "{\"type\": \"edl\", \"path\": \"/Users/losslesscut_user/Desktop/project_x/session1_cuts.edl\", \"fps\": 29.97}"
				},
				{
					"simStepId": "15839cff-a4a2-4b10-8de2-ec2f3ad75503",
					"diagramNodeId": "be29d953-3985-4df3-9f6c-37da6c0e41b1",
					"simStepLabel": "Import Flow: Parsing EDL File",
					"simStepDescription": "The `readEdlFile` function (and its helpers in `edlFormats.ts`) reads the content of the specified file and parses it into a structured array of cut segments.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "179",
						"endLine": "181",
						"relevantVariables": [
							"readEdlFile"
						]
					},
					"inputDataExample": "{\"type\": \"edl\", \"path\": \"/Users/losslesscut_user/Desktop/project_x/session1_cuts.edl\", \"fps\": 29.97}",
					"outputDataExample": "[{\"start\": 10.5, \"end\": 25.2, \"name\": \"Scene 1\"}, {\"start\": 50.1, \"end\": 65.8, \"name\": \"Scene 2\"}]"
				},
				{
					"simStepId": "b2551fa8-7f60-4ef8-a571-d713234c9f4a",
					"diagramNodeId": "baa9176e-ded0-4b7c-8ce4-c05034a9727b",
					"simStepLabel": "Import Flow: Returning Parsed Segments to App",
					"simStepDescription": "The parsed segments are returned to the `importEdlFile` function in `App.tsx`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2324",
						"endLine": "2324",
						"relevantVariables": [
							"edl"
						]
					},
					"inputDataExample": "[{\"start\": 10.5, \"end\": 25.2, \"name\": \"Scene 1\"}, {\"start\": 50.1, \"end\": 65.8, \"name\": \"Scene 2\"}]",
					"outputDataExample": "[{\"start\": 10.5, \"end\": 25.2, \"name\": \"Scene 1\"}, {\"start\": 50.1, \"end\": 65.8, \"name\": \"Scene 2\"}]"
				},
				{
					"simStepId": "020f8726-672b-4147-9e00-b722c8bfb78f",
					"diagramNodeId": "225d123a-bc45-44e8-bb44-673edb5795a4",
					"simStepLabel": "Import Flow: Updating Application State",
					"simStepDescription": "The main App component receives the new segments and updates its state, causing the timeline UI to re-render and display the imported cut segments.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2321",
						"endLine": "2328",
						"relevantVariables": [
							"importEdlFile",
							"edl",
							"loadCutSegments"
						]
					},
					"inputDataExample": "[{\"start\": 10.5, \"end\": 25.2, \"name\": \"Scene 1\"}, {\"start\": 50.1, \"end\": 65.8, \"name\": \"Scene 2\"}]",
					"outputDataExample": "{\"status\": \"success\", \"message\": \"Segments state updated\"}"
				},
				{
					"simStepId": "499f449b-956f-4be9-b7d9-f611f4750a84",
					"diagramNodeId": "727b8c8c-58dc-4afe-b58d-3f9353a2b7b2",
					"simStepLabel": "Export Flow: User Initiates CSV Export",
					"simStepDescription": "The user clicks on the 'Export project' > 'Times in seconds (CSV)' menu item to begin the process of exporting the current cut segments to a CSV file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "154",
						"endLine": "158",
						"relevantVariables": [
							"click",
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"eventType\": \"menuClick\", \"menuItem\": \"csv\"}"
				},
				{
					"simStepId": "83d95334-2525-4424-a2e2-f31f50b358e6",
					"diagramNodeId": "97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
					"simStepLabel": "Export Flow: IPC Call from Main to Renderer",
					"simStepDescription": "The main process sends an IPC message to the renderer process to trigger the CSV export.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "156",
						"endLine": "156",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{\"channel\": \"exportEdlFile\", \"payload\": \"csv\"}",
					"outputDataExample": "{\"channel\": \"exportEdlFile\", \"payload\": \"csv\"}"
				},
				{
					"simStepId": "c6840a3d-b648-42b9-b673-fa4a46179cb1",
					"diagramNodeId": "0c38615e-6206-4a35-92ad-c62a2e7f27da",
					"simStepLabel": "Export Flow: Renderer Receives IPC and Calls Export Handler",
					"simStepDescription": "An IPC listener in `App.tsx` receives the 'exportEdlFile' event and calls the `tryExportEdlFile` function, which wraps the core export logic.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2316",
						"endLine": "2320",
						"relevantVariables": [
							"tryExportEdlFile",
							"exportEdlFile",
							"selectedSegments"
						]
					},
					"inputDataExample": "{\"type\": \"csv\"}",
					"outputDataExample": "{\"type\":\"csv\",\"cutSegments\":[{\"start\":10.5,\"end\":25.2,\"name\":\"Scene 1\"},{\"start\":50.1,\"end\":65.8,\"name\":\"Scene 2\"}],\"filePath\":\"/home/user/videos/my_drone_footage.mp4\"}"
				},
				{
					"simStepId": "64758056-30ed-4b3b-9cab-93d57fa3e957",
					"diagramNodeId": "cd479a18-4a0b-4a36-9fdf-86022c51af95",
					"simStepLabel": "Export Flow: Invoking EDL Export Logic",
					"simStepDescription": "The `tryExportEdlFile` handler calls `exportEdlFile` from the `edlStore`, passing the export type, the current cut segments, the output directory, and the source file path.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2318",
						"endLine": "2318",
						"relevantVariables": [
							"exportEdlFile"
						]
					},
					"inputDataExample": "{\"type\":\"csv\",\"cutSegments\":[{\"start\":10.5,\"end\":25.2,\"name\":\"Scene 1\"},{\"start\":50.1,\"end\":65.8,\"name\":\"Scene 2\"}],\"filePath\":\"/home/user/videos/my_drone_footage.mp4\"}",
					"outputDataExample": "{\"type\":\"csv\",\"cutSegments\":[{\"start\":10.5,\"end\":25.2,\"name\":\"Scene 1\"},{\"start\":50.1,\"end\":65.8,\"name\":\"Scene 2\"}],\"filePath\":\"/home/user/videos/my_drone_footage.mp4\"}"
				},
				{
					"simStepId": "0d68eab0-569a-436b-a6a2-640441e8056a",
					"diagramNodeId": "00a94233-ad22-4fec-8857-99100b2b649b",
					"simStepLabel": "Export Flow: Formatting Segments and Saving File",
					"simStepDescription": "The `exportEdlFile` function in `edlStore.ts` orchestrates the export. It uses a formatter (from `edlFormats.ts`) to convert the segment data into a CSV string, prompts the user with a 'save' dialog to choose a destination path, and then writes the formatted string to the selected file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "183",
						"endLine": "192",
						"relevantVariables": [
							"exportEdlFile",
							"cutSegments",
							"filePath"
						]
					},
					"inputDataExample": "{\"type\":\"csv\",\"cutSegments\":[{\"start\":10.5,\"end\":25.2,\"name\":\"Scene 1\"},{\"start\":50.1,\"end\":65.8,\"name\":\"Scene 2\"}],\"filePath\":\"/home/user/videos/my_drone_footage.mp4\"}",
					"outputDataExample": "{\"status\": \"success\", \"filePath\": \"/home/user/videos/exports/my_drone_footage-segments.csv\"}"
				}
			],
			"description": "<ul><li>LosslessCut supports interoperability with other tools by importing and exporting Edit Decision Lists (EDLs)</li><li>Users can import cut points from various formats like CSV files, YouTube chapter lists, Final Cut Pro XML, and others</li><li>Segments created within the app can also be exported to these formats</li></ul>",
			"simulationNodesAndEdges": {
				"f226c949-d4c7-485f-b4eb-e546741be2a5": {
					"simStepIds": [
						"b7677740-8ec1-460b-b648-5065f58d5814"
					]
				},
				"2bdb996a-2731-4e68-a183-dd506755e3ce": {
					"simStepIds": [
						"1a71a446-0c7e-4e89-84e0-bb9ef8030a65"
					]
				},
				"7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0": {
					"simStepIds": [
						"27acfa9c-8b4a-474c-9a67-65c54258a91c"
					]
				},
				"be29d953-3985-4df3-9f6c-37da6c0e41b1": {
					"simStepIds": [
						"15839cff-a4a2-4b10-8de2-ec2f3ad75503"
					]
				},
				"225d123a-bc45-44e8-bb44-673edb5795a4": {
					"simStepIds": [
						"020f8726-672b-4147-9e00-b722c8bfb78f"
					]
				},
				"727b8c8c-58dc-4afe-b58d-3f9353a2b7b2": {
					"simStepIds": [
						"499f449b-956f-4be9-b7d9-f611f4750a84"
					]
				},
				"0c38615e-6206-4a35-92ad-c62a2e7f27da": {
					"simStepIds": [
						"c6840a3d-b648-42b9-b673-fa4a46179cb1"
					]
				},
				"00a94233-ad22-4fec-8857-99100b2b649b": {
					"simStepIds": [
						"0d68eab0-569a-436b-a6a2-640441e8056a"
					]
				},
				"d2b8473f-effc-48b4-8142-d38464f9356f": {
					"simStepIds": [
						"1338e875-9c9b-4399-8a2a-eb593eb055e0"
					]
				},
				"2eb46cce-ba00-46d0-b8c4-43b0b67eccc0": {
					"simStepIds": [
						"028e1164-45a0-444c-a889-c6aa5219f1f8"
					]
				},
				"3e0bf562-cb0e-4be0-ad61-2b2f184262fe": {
					"simStepIds": [
						"c4322fec-7be5-4029-a38e-15072a7d0f73"
					]
				},
				"baa9176e-ded0-4b7c-8ce4-c05034a9727b": {
					"simStepIds": [
						"b2551fa8-7f60-4ef8-a571-d713234c9f4a"
					]
				},
				"97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3": {
					"simStepIds": [
						"83d95334-2525-4424-a2e2-f31f50b358e6"
					]
				},
				"cd479a18-4a0b-4a36-9fdf-86022c51af95": {
					"simStepIds": [
						"64758056-30ed-4b3b-9cab-93d57fa3e957"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "importEdlFile, exportEdlFile, edlStore",
			"generationPrompt": "Importing and Exporting Cut Segments (EDL)",
			"generationKeywords": "importEdlFile, exportEdlFile, edlStore"
		},
		"Extracting Snapshots and Frame Sequences": {
			"name": "Extracting Snapshots and Frame Sequences",
			"simSteps": [
				{
					"simStepId": "c97e68f0-0cd5-40d5-bedf-e779622836b6",
					"diagramNodeId": "c23fca9d-c10f-4e24-9ced-de9d5eee58d9",
					"simStepLabel": "Snapshot Flow: User Clicks Snapshot Button",
					"simStepDescription": "The user initiates a snapshot capture by clicking the camera icon in the bottom bar of the application.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/BottomBar.tsx",
						"startLine": "563",
						"endLine": "571",
						"relevantVariables": [
							"IoIosCamera",
							"captureSnapshot"
						]
					},
					"inputDataExample": "{\"event\": \"click\"}",
					"outputDataExample": "{\"action\": \"captureSnapshot\"}"
				},
				{
					"simStepId": "e6dc0bb2-9046-4334-b70f-065599b44772",
					"diagramNodeId": "6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
					"simStepLabel": "Snapshot Flow: Propagate Snapshot Request",
					"simStepDescription": "The click event triggers the `captureSnapshot` function, which is passed as a prop from the main `App` component to the `BottomBar` component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2718",
						"endLine": "2718",
						"relevantVariables": [
							"captureSnapshot"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "28059b2c-b3f8-4b92-82e7-1d8879c55f09",
					"diagramNodeId": "d68dc56e-889b-4561-9fc1-e99a6021a319",
					"simStepLabel": "Snapshot Flow: Execute Snapshot Logic in App Component",
					"simStepDescription": "The `captureSnapshot` function in the `App` component is executed. It retrieves the current video time and calls the `captureFrameFromFfmpeg` function from the `useFrameCapture` hook to perform the capture.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1244",
						"endLine": "1252",
						"relevantVariables": [
							"captureSnapshot",
							"setWorking"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"currentTime\": 42.125}",
					"outputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}"
				},
				{
					"simStepId": "b377828c-8930-4b31-9183-37b94cc8c0a8",
					"diagramNodeId": "5841034e-45b2-4ee6-af45-7d7f390c06e7",
					"simStepLabel": "Snapshot Flow: Call Frame Capture Hook",
					"simStepDescription": "The parameters for capturing the frame are passed to the `captureFrameFromFfmpeg` function within the `useFrameCapture` custom hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "662",
						"endLine": "662",
						"relevantVariables": [
							"useFrameCapture",
							"captureFrameFromFfmpeg"
						]
					},
					"inputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}",
					"outputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}"
				},
				{
					"simStepId": "9db0ec9c-e70b-4f87-a85d-321abbf43227",
					"diagramNodeId": "d3c9b1ae-73af-49f2-a0f6-673773181c91",
					"simStepLabel": "Snapshot Flow: Prepare for FFmpeg Execution (Renderer)",
					"simStepDescription": "The `captureFrameFromFfmpeg` function determines the final output path for the snapshot and makes a call to the main process via IPC to execute the `ffmpeg.captureFrame` command.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFrameCapture.ts",
						"startLine": "127",
						"endLine": "132",
						"relevantVariables": [
							"captureFrameFromFfmpeg",
							"getSuffixedOutPath",
							"ffmpeg.captureFrame"
						]
					},
					"inputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}",
					"outputDataExample": "{\"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}"
				},
				{
					"simStepId": "3ecb3e11-c684-4fa2-a41c-ffdc4efa9370",
					"diagramNodeId": "baf259ae-76aa-4895-a750-b7e4943aaaa3",
					"simStepLabel": "Snapshot Flow: IPC from Renderer to Main",
					"simStepDescription": "An Inter-Process Communication (IPC) call is made from the renderer process to the main process to execute the FFmpeg command for capturing a single frame.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "15",
						"endLine": "15",
						"relevantVariables": [
							"captureFrame"
						]
					},
					"inputDataExample": "{\"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}",
					"outputDataExample": "{\"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}"
				},
				{
					"simStepId": "9f118488-adc2-46d2-b279-12564ac743a2",
					"diagramNodeId": "355896d6-b122-453e-a959-b3825b27c934",
					"simStepLabel": "Snapshot Flow: Execute FFmpeg for Snapshot (Main)",
					"simStepDescription": "The main process receives the request, constructs the appropriate FFmpeg command with arguments like `-ss` for timestamp, `-i` for input, `-vframes 1` for a single frame, and quality options, then executes it.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "459",
						"endLine": "474",
						"relevantVariables": [
							"captureFrames",
							"getQualityOpts",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\", \"time\": 42.125, \"captureFormat\": \"jpeg\", \"quality\": 90}",
					"outputDataExample": "{\"stdout\": \"\", \"stderr\": \"ffmpeg version 5.1...\", \"exitCode\": 0}"
				},
				{
					"simStepId": "ca202a6b-9022-4f5a-a733-571d8a807494",
					"diagramNodeId": "5e8fde55-8214-461e-8a76-9aadacaff96f",
					"simStepLabel": "Snapshot Flow: Result Returned to Renderer",
					"simStepDescription": "The result of the FFmpeg execution, including the path of the created file, is returned to the renderer process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFrameCapture.ts",
						"startLine": "128",
						"endLine": "128",
						"relevantVariables": [
							"ffmpeg.captureFrame"
						]
					},
					"inputDataExample": "{\"outPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\"}",
					"outputDataExample": "{\"outPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\"}"
				},
				{
					"simStepId": "278bc31d-7961-4913-8728-2b35dfeadd27",
					"diagramNodeId": "9a6c8558-5daa-4186-a0cb-b13ec4424fbc",
					"simStepLabel": "Snapshot Flow: Display Confirmation",
					"simStepDescription": "The UI is updated to show that the process is complete, and a notification is displayed to the user, confirming that the snapshot has been saved.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1305",
						"endLine": "1307",
						"relevantVariables": [
							"showOsNotification",
							"openDirToast"
						]
					},
					"inputDataExample": "{\"lastOutPath\": \"/Users/john/Movies/output/drone_footage-00-00-42.125.jpeg\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "9b505063-8546-40e5-bb5d-0c098095b5bf",
					"diagramNodeId": "4bef1ab4-2470-4955-8dd2-c8ef303e7124",
					"simStepLabel": "Frame Sequence Flow: Initiate Frame Extraction",
					"simStepDescription": "The user triggers the extraction of frames from a selected segment, typically through a menu action which calls `extractCurrentSegmentFramesAsImages`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1317",
						"endLine": "1319",
						"relevantVariables": [
							"extractCurrentSegmentFramesAsImages",
							"extractSegmentsFramesAsImages"
						]
					},
					"inputDataExample": "{\"currentCutSeg\": {\"id\": \"seg-1\", \"start\": 15.5, \"end\": 25.0, \"name\": \"Highlight reel\"}}",
					"outputDataExample": "[{\"id\": \"seg-1\", \"start\": 15.5, \"end\": 25.0, \"name\": \"Highlight reel\"}]"
				},
				{
					"simStepId": "43fc8b41-3b87-4b11-b61c-9d268bdfeba0",
					"diagramNodeId": "7ca81a36-2cdf-456d-886c-a32ea58da381",
					"simStepLabel": "Frame Sequence Flow: Pass Segments to Extraction Logic",
					"simStepDescription": "The selected segment(s) are passed as an argument to the main extraction function, `extractSegmentsFramesAsImages`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1318",
						"endLine": "1318",
						"relevantVariables": [
							"extractSegmentsFramesAsImages",
							"currentCutSeg"
						]
					},
					"inputDataExample": "[{\"id\": \"seg-1\", \"start\": 15.5, \"end\": 25.0, \"name\": \"Highlight reel\"}]",
					"outputDataExample": "[{\"id\": \"seg-1\", \"start\": 15.5, \"end\": 25.0, \"name\": \"Highlight reel\"}]"
				},
				{
					"simStepId": "39ed852a-5463-48d3-b73d-596fa4f17d22",
					"diagramNodeId": "26da0a67-3056-4154-a102-2fd37b64c61a",
					"simStepLabel": "Frame Sequence Flow: Open Configuration Dialog",
					"simStepDescription": "The application calls `askExtractFramesAsImages`, which opens a dialog prompting the user for extraction settings, such as the frame rate (e.g., every 10th frame).",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1276",
						"endLine": "1279",
						"relevantVariables": [
							"askExtractFramesAsImages",
							"segmentsNumFrames",
							"detectedFps"
						]
					},
					"inputDataExample": "{\"segmentsNumFrames\": 285, \"plural\": false, \"fps\": 29.97}",
					"outputDataExample": "{\"filter\": \"select='not(mod(n,10))'\", \"estimatedMaxNumFiles\": 29}"
				},
				{
					"simStepId": "896c1633-2514-4966-b9c6-0c32a3bceed0",
					"diagramNodeId": "3ca18d9f-fb09-4315-9b64-2a8217d4098d",
					"simStepLabel": "Frame Sequence Flow: Transmit User Configuration",
					"simStepDescription": "The user's configuration choices, translated into an FFmpeg filter string, are returned from the dialog to the `extractSegmentsFramesAsImages` function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1281",
						"endLine": "1281",
						"relevantVariables": [
							"captureFramesResponse"
						]
					},
					"inputDataExample": "{\"filter\": \"select='not(mod(n,10))'\", \"estimatedMaxNumFiles\": 29}",
					"outputDataExample": "{\"filter\": \"select='not(mod(n,10))'\", \"estimatedMaxNumFiles\": 29}"
				},
				{
					"simStepId": "2c7384a6-3fdb-4bd1-abb4-f559c7cbf824",
					"diagramNodeId": "c3388f52-2738-4905-8085-13f55cabb2a3",
					"simStepLabel": "Frame Sequence Flow: Process Segments for Extraction",
					"simStepDescription": "The application iterates through each selected segment and calls the `captureFramesRange` function from the `useFrameCapture` hook to handle the frame capture for that specific time range.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1298",
						"endLine": "1304",
						"relevantVariables": [
							"segments",
							"captureFramesRange"
						]
					},
					"inputDataExample": "{\"segment\": {\"start\": 15.5, \"end\": 25.0}, \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"fps\": 29.97, \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"lastOutPath\": \"/Users/john/Movies/output/drone_footage-0001.jpeg\"}"
				},
				{
					"simStepId": "7e4a30d1-4838-4cb3-85eb-830fe21626c3",
					"diagramNodeId": "b863bc5a-f6fe-4fae-9fed-437787d1af42",
					"simStepLabel": "Frame Sequence Flow: Invoke Frame Range Capture Hook",
					"simStepDescription": "The parameters for capturing the frame sequence, including time range and filter, are passed to the `captureFramesRange` function in the `useFrameCapture` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFrameCapture.ts",
						"startLine": "35",
						"endLine": "38",
						"relevantVariables": [
							"captureFramesRange"
						]
					},
					"inputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"fromTime\": 15.5, \"toTime\": 25.0, \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"fromTime\": 15.5, \"toTime\": 25.0, \"filter\": \"select='not(mod(n,10))'\"}"
				},
				{
					"simStepId": "2c98d1f4-66d6-4149-8964-5968ecc6097b",
					"diagramNodeId": "5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a",
					"simStepLabel": "Frame Sequence Flow: Prepare FFmpeg Command (Renderer)",
					"simStepDescription": "The `captureFramesRange` function calculates the output file path template (e.g., `video-%04d.jpeg`) and calls the main process's `ffmpeg.captureFrames` function with all the necessary parameters.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFrameCapture.ts",
						"startLine": "50",
						"endLine": "56",
						"relevantVariables": [
							"getSuffixedOutPath",
							"ffmpeg.captureFrames"
						]
					},
					"inputDataExample": "{\"customOutDir\": \"/Users/john/Movies/output\", \"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"fromTime\": 15.5, \"toTime\": 25.0, \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"from\": 15.5, \"to\": 25.0, \"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPathTemplate\": \"/Users/john/Movies/output/drone_footage-%04d.jpeg\", \"filter\": \"select='not(mod(n,10))'\"}"
				},
				{
					"simStepId": "065146a1-9434-4a5d-a458-7e641b56c726",
					"diagramNodeId": "bc515cef-c6e2-4c94-8f71-b183650d2eb7",
					"simStepLabel": "Frame Sequence Flow: IPC from Renderer to Main",
					"simStepDescription": "An IPC call is made from the renderer to the main process, passing all arguments needed for FFmpeg to extract the frame sequence.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "15",
						"endLine": "15",
						"relevantVariables": [
							"captureFrames"
						]
					},
					"inputDataExample": "{\"from\": 15.5, \"to\": 25.0, \"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPathTemplate\": \"/Users/john/Movies/output/drone_footage-%04d.jpeg\", \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"from\": 15.5, \"to\": 25.0, \"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPathTemplate\": \"/Users/john/Movies/output/drone_footage-%04d.jpeg\", \"filter\": \"select='not(mod(n,10))'\"}"
				},
				{
					"simStepId": "c4d240da-55bd-4a5c-8344-4805b4de5ee7",
					"diagramNodeId": "4958b3cf-a2cf-4e24-af1c-3f78fe975746",
					"simStepLabel": "Frame Sequence Flow: Execute FFmpeg for Sequence (Main)",
					"simStepDescription": "The main process builds the final FFmpeg command, including the `-vf` filter for selecting frames, and executes it. It also sets up a listener to report progress back to the renderer.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "459",
						"endLine": "474",
						"relevantVariables": [
							"captureFrames",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\"from\": 15.5, \"to\": 25.0, \"videoPath\": \"/Users/john/Movies/drone_footage.mp4\", \"outPathTemplate\": \"/Users/john/Movies/output/drone_footage-%04d.jpeg\", \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"stdout\": \"\", \"stderr\": \"ffmpeg version 5.1... frame=29 ...\", \"exitCode\": 0}"
				},
				{
					"simStepId": "c534e644-c494-439a-b91c-00acb9450a00",
					"diagramNodeId": "fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
					"simStepLabel": "Frame Sequence Flow: IPC Progress Update",
					"simStepDescription": "While FFmpeg is running, the main process parses its output and sends progress updates back to the renderer process, which are used to update a progress bar in the UI.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1303",
						"endLine": "1303",
						"relevantVariables": [
							"onProgress",
							"handleSegmentProgress"
						]
					},
					"inputDataExample": "{\"progress\": 0.65}",
					"outputDataExample": "{\"progress\": 0.65}"
				},
				{
					"simStepId": "6d52d5b1-94cd-4262-8998-f2e84172d5a5",
					"diagramNodeId": "e25db789-2b90-4824-b73c-cb6a6bdd4bfa",
					"simStepLabel": "Frame Sequence Flow: Display Completion Notification",
					"simStepDescription": "Once the FFmpeg process finishes, the renderer hides the progress indicator and shows a success notification, providing a link to open the directory containing the extracted frames.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1305",
						"endLine": "1307",
						"relevantVariables": [
							"showOsNotification",
							"openDirToast"
						]
					},
					"inputDataExample": "{\"lastOutPath\": \"/Users/john/Movies/output/drone_footage-0001.jpeg\"}",
					"outputDataExample": "{}"
				}
			],
			"description": "<ul><li>The application can capture full-resolution snapshots from the video at any time point in JPEG or PNG format</li><li>It also supports exporting a sequence of frames from a selected segment, with options to control the extraction rate (e</li><li>g</li><li>, every nth frame or second)</li></ul>",
			"simulationNodesAndEdges": {
				"c23fca9d-c10f-4e24-9ced-de9d5eee58d9": {
					"simStepIds": [
						"c97e68f0-0cd5-40d5-bedf-e779622836b6"
					]
				},
				"d68dc56e-889b-4561-9fc1-e99a6021a319": {
					"simStepIds": [
						"28059b2c-b3f8-4b92-82e7-1d8879c55f09"
					]
				},
				"d3c9b1ae-73af-49f2-a0f6-673773181c91": {
					"simStepIds": [
						"9db0ec9c-e70b-4f87-a85d-321abbf43227"
					]
				},
				"355896d6-b122-453e-a959-b3825b27c934": {
					"simStepIds": [
						"9f118488-adc2-46d2-b279-12564ac743a2"
					]
				},
				"9a6c8558-5daa-4186-a0cb-b13ec4424fbc": {
					"simStepIds": [
						"278bc31d-7961-4913-8728-2b35dfeadd27"
					]
				},
				"4bef1ab4-2470-4955-8dd2-c8ef303e7124": {
					"simStepIds": [
						"9b505063-8546-40e5-bb5d-0c098095b5bf"
					]
				},
				"26da0a67-3056-4154-a102-2fd37b64c61a": {
					"simStepIds": [
						"39ed852a-5463-48d3-b73d-596fa4f17d22"
					]
				},
				"c3388f52-2738-4905-8085-13f55cabb2a3": {
					"simStepIds": [
						"2c7384a6-3fdb-4bd1-abb4-f559c7cbf824"
					]
				},
				"5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a": {
					"simStepIds": [
						"2c98d1f4-66d6-4149-8964-5968ecc6097b"
					]
				},
				"4958b3cf-a2cf-4e24-af1c-3f78fe975746": {
					"simStepIds": [
						"c4d240da-55bd-4a5c-8344-4805b4de5ee7"
					]
				},
				"e25db789-2b90-4824-b73c-cb6a6bdd4bfa": {
					"simStepIds": [
						"6d52d5b1-94cd-4262-8998-f2e84172d5a5"
					]
				},
				"6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7": {
					"simStepIds": [
						"e6dc0bb2-9046-4334-b70f-065599b44772"
					]
				},
				"5841034e-45b2-4ee6-af45-7d7f390c06e7": {
					"simStepIds": [
						"b377828c-8930-4b31-9183-37b94cc8c0a8"
					]
				},
				"baf259ae-76aa-4895-a750-b7e4943aaaa3": {
					"simStepIds": [
						"3ecb3e11-c684-4fa2-a41c-ffdc4efa9370"
					]
				},
				"5e8fde55-8214-461e-8a76-9aadacaff96f": {
					"simStepIds": [
						"ca202a6b-9022-4f5a-a733-571d8a807494"
					]
				},
				"7ca81a36-2cdf-456d-886c-a32ea58da381": {
					"simStepIds": [
						"43fc8b41-3b87-4b11-b61c-9d268bdfeba0"
					]
				},
				"3ca18d9f-fb09-4315-9b64-2a8217d4098d": {
					"simStepIds": [
						"896c1633-2514-4966-b9c6-0c32a3bceed0"
					]
				},
				"b863bc5a-f6fe-4fae-9fed-437787d1af42": {
					"simStepIds": [
						"7e4a30d1-4838-4cb3-85eb-830fe21626c3"
					]
				},
				"bc515cef-c6e2-4c94-8f71-b183650d2eb7": {
					"simStepIds": [
						"065146a1-9434-4a5d-a458-7e641b56c726"
					]
				},
				"fc91e5d8-7045-4d32-999e-bd0c8f60d8ee": {
					"simStepIds": [
						"c534e644-c494-439a-b91c-00acb9450a00"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "captureFrames, captureSnapshot, extractFrames",
			"generationPrompt": "Extracting Snapshots and Frame Sequences",
			"generationKeywords": "captureFrames, captureSnapshot, extractFrames"
		},
		"Automated Segment Detection": {
			"name": "Automated Segment Detection",
			"simSteps": [
				{
					"simStepId": "4e3478a8-6bfe-4668-9c60-2538ac5f4cac",
					"diagramNodeId": "41413e7c-1736-4001-9e7b-37ea7d0fe577",
					"simStepLabel": "Flow 1: Trigger Black Scene Detection",
					"simStepDescription": "User initiates black scene detection via the UI (e.g., from the 'Tools' menu or a keyboard shortcut). This action calls the `detectBlackScenes` function, which is defined within the `useSegments` hook in the renderer process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "209",
						"endLine": "211",
						"relevantVariables": [
							"detectBlackScenes",
							"currentCutSegOrWholeTimeline"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"blackdetect\",\"parameters\":{\"black_min_duration\":{\"value\":\"2.0\"},\"picture_black_ratio_th\":{\"value\":\"0.98\"},\"pixel_black_th\":{\"value\":\"0.10\"},\"mode\":{\"value\":\"1\"}}}"
				},
				{
					"simStepId": "7b7e6a7f-c99d-4a9f-9e6f-11d98f6182f4",
					"diagramNodeId": "2713c463-fc15-4764-acdd-e4d851593016",
					"simStepLabel": "Flow 1: Request Detection Parameters",
					"simStepDescription": "The `detectBlackScenes` function calls `showParametersDialog` to open a modal dialog, prompting the user to enter or confirm the parameters for the FFmpeg `blackdetect` filter.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "212",
						"endLine": "212",
						"relevantVariables": [
							"showParametersDialog",
							"getFfmpegParameters"
						]
					},
					"inputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"blackdetect\",\"parameters\":{\"black_min_duration\":{\"value\":\"2.0\"},\"picture_black_ratio_th\":{\"value\":\"0.98\"},\"pixel_black_th\":{\"value\":\"0.10\"},\"mode\":{\"value\":\"1\"}},\"docUrl\":\"https://ffmpeg.org/ffmpeg-filters.html#blackdetect\"}",
					"outputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"blackdetect\",\"parameters\":{\"black_min_duration\":{\"value\":\"2.0\"},\"picture_black_ratio_th\":{\"value\":\"0.98\"},\"pixel_black_th\":{\"value\":\"0.10\"},\"mode\":{\"value\":\"1\"}},\"docUrl\":\"https://ffmpeg.org/ffmpeg-filters.html#blackdetect\"}"
				},
				{
					"simStepId": "858f05be-34c9-4465-ad5a-ae1308c8014b",
					"diagramNodeId": "6a1b8dca-200e-4b16-8a50-7db1abca439b",
					"simStepLabel": "Flow 1: Receive User Parameters",
					"simStepDescription": "The user confirms the parameters in the dialog. The `showParametersDialog` promise resolves, returning the specified options to the `detectBlackScenes` function.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "213",
						"endLine": "217",
						"relevantVariables": [
							"parameters",
							"mode",
							"filterOptions"
						]
					},
					"inputDataExample": "{\"black_min_duration\":\"2.0\",\"picture_black_ratio_th\":\"0.98\",\"pixel_black_th\":\"0.10\",\"mode\":\"1\"}",
					"outputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_drone_footage.mp4\",\"streamId\":0,\"filterOptions\":{\"black_min_duration\":\"2.0\",\"picture_black_ratio_th\":\"0.98\",\"pixel_black_th\":\"0.10\"},\"boundingMode\":true,\"from\":0,\"to\":1830.5}"
				},
				{
					"simStepId": "4a349c48-fa90-4151-8cd3-ecd16c4077aa",
					"diagramNodeId": "780d8f1a-5abc-4225-bdee-24d239c58421",
					"simStepLabel": "Flow 1: Invoke FFmpeg Black Detect",
					"simStepDescription": "The renderer process calls the `blackDetect` function in the main process via Electron's remote module. It passes the file path, selected video stream, and the user-defined filter options.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "218",
						"endLine": "218",
						"relevantVariables": [
							"blackDetect"
						]
					},
					"inputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_drone_footage.mp4\",\"streamId\":0,\"filterOptions\":{\"black_min_duration\":\"2.0\",\"picture_black_ratio_th\":\"0.98\",\"pixel_black_th\":\"0.10\"},\"boundingMode\":true,\"from\":0,\"to\":1830.5}",
					"outputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_drone_footage.mp4\",\"streamId\":0,\"filterOptions\":{\"black_min_duration\":\"2.0\",\"picture_black_ratio_th\":\"0.98\",\"pixel_black_th\":\"0.10\"},\"boundingMode\":true,\"from\":0,\"to\":1830.5}"
				},
				{
					"simStepId": "fdc1105b-5396-4625-8593-2de2a5607002",
					"diagramNodeId": "2a3dd178-2a1b-4ae1-925f-6216f968c240",
					"simStepLabel": "Flow 1: Execute blackdetect FFmpeg Command",
					"simStepDescription": "In the main process, the `blackDetect` function constructs and executes an `ffmpeg` command with the `blackdetect` video filter. It continuously parses `ffmpeg`'s standard error stream to find the start and end times of detected black periods.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "363",
						"endLine": "398",
						"relevantVariables": [
							"blackDetect",
							"runFfmpegWithProgress",
							"mapFilterOptions",
							"matchLineTokens"
						]
					},
					"inputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_drone_footage.mp4\",\"streamId\":0,\"filterOptions\":{\"black_min_duration\":\"2.0\",\"picture_black_ratio_th\":\"0.98\",\"pixel_black_th\":\"0.10\"},\"boundingMode\":true,\"from\":0,\"to\":1830.5}",
					"outputDataExample": "{\"start\":120.5,\"end\":124.75}"
				},
				{
					"simStepId": "4e6df59c-398d-445d-97ab-3f99213ed140",
					"diagramNodeId": "68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
					"simStepLabel": "Flow 1: Stream Detected Segments",
					"simStepDescription": "As black scenes are detected and parsed from the `ffmpeg` output, the `onSegmentDetected` callback (passed from the renderer) is invoked for each detected segment, sending the time data back to the renderer process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "377",
						"endLine": "384",
						"relevantVariables": [
							"matchLineTokens",
							"onSegmentDetected"
						]
					},
					"inputDataExample": "{\"start\":120.5,\"end\":124.75}",
					"outputDataExample": "{\"start\":120.5,\"end\":124.75}"
				},
				{
					"simStepId": "34148250-afcc-4adc-a830-e3175227167d",
					"diagramNodeId": "fe613999-b8b1-476f-bf64-9ec8130e2387",
					"simStepLabel": "Flow 1: Add Segments to Timeline",
					"simStepDescription": "Back in the renderer process, the `detectSegments` helper function receives the new segments one by one and adds them to the application's state. This triggers a UI update, displaying the newly created segments on the timeline.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "218",
						"endLine": "218",
						"relevantVariables": [
							"detectSegments"
						]
					},
					"inputDataExample": "{\"start\":120.5,\"end\":124.75}",
					"outputDataExample": "[{\"start\":120.5,\"end\":124.75,\"name\":\"Segment 1\"},{\"start\":345.1,\"end\":348.9,\"name\":\"Segment 2\"}]"
				},
				{
					"simStepId": "f300aea7-2079-46a7-abc1-a74eb9390556",
					"diagramNodeId": "6c78fb42-5ea8-4258-83ba-1757da0ae75d",
					"simStepLabel": "Flow 2: Trigger Silent Scene Detection",
					"simStepDescription": "User initiates silent scene detection. This calls the `detectSilentScenes` function from the `useSegments` hook.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "223",
						"endLine": "225",
						"relevantVariables": [
							"detectSilentScenes"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"silencedetect\",\"parameters\":{\"noise\":{\"value\":\"-60dB\"},\"duration\":{\"value\":\"2.0\"},\"mode\":{\"value\":\"1\"}}}"
				},
				{
					"simStepId": "3c4303ea-133d-4ae1-a684-967f02f6782c",
					"diagramNodeId": "db5280dd-daf5-4bbd-8e48-4f80bacec604",
					"simStepLabel": "Flow 2: Request Detection Parameters",
					"simStepDescription": "The `detectSilentScenes` function calls `showParametersDialog` to get FFmpeg filter parameters for silence detection from the user.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "226",
						"endLine": "226",
						"relevantVariables": [
							"showParametersDialog",
							"getFfmpegParameters"
						]
					},
					"inputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"silencedetect\",\"parameters\":{\"noise\":{\"value\":\"-60dB\"},\"duration\":{\"value\":\"2.0\"},\"mode\":{\"value\":\"1\"}},\"docUrl\":\"https://ffmpeg.org/ffmpeg-filters.html#silencedetect\"}",
					"outputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"silencedetect\",\"parameters\":{\"noise\":{\"value\":\"-60dB\"},\"duration\":{\"value\":\"2.0\"},\"mode\":{\"value\":\"1\"}},\"docUrl\":\"https://ffmpeg.org/ffmpeg-filters.html#silencedetect\"}"
				},
				{
					"simStepId": "b02a0c20-a7f6-4048-97ae-30904f1a4b83",
					"diagramNodeId": "5a1c35ad-4304-44fb-aeaf-a7298e78dad6",
					"simStepLabel": "Flow 2: Receive User Parameters",
					"simStepDescription": "The user confirms the parameters, and the dialog returns the configured options for `silencedetect`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "227",
						"endLine": "231",
						"relevantVariables": [
							"parameters",
							"mode",
							"filterOptions"
						]
					},
					"inputDataExample": "{\"noise\":\"-55dB\",\"duration\":\"1.5\",\"mode\":\"2\"}",
					"outputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_interview.mov\",\"streamId\":1,\"filterOptions\":{\"noise\":\"-55dB\",\"duration\":\"1.5\"},\"boundingMode\":false,\"from\":0,\"to\":3605.2}"
				},
				{
					"simStepId": "ac039e3f-4fc3-4a3c-991b-afc9accc3d8a",
					"diagramNodeId": "7ce78810-2070-4baa-bf4a-30046236415a",
					"simStepLabel": "Flow 2: Invoke FFmpeg Silence Detect",
					"simStepDescription": "The renderer process invokes the `silenceDetect` function in the main process, passing the file path, active audio stream, and filter options.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "232",
						"endLine": "232",
						"relevantVariables": [
							"silenceDetect"
						]
					},
					"inputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_interview.mov\",\"streamId\":1,\"filterOptions\":{\"noise\":\"-55dB\",\"duration\":\"1.5\"},\"boundingMode\":false,\"from\":0,\"to\":3605.2}",
					"outputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_interview.mov\",\"streamId\":1,\"filterOptions\":{\"noise\":\"-55dB\",\"duration\":\"1.5\"},\"boundingMode\":false,\"from\":0,\"to\":3605.2}"
				},
				{
					"simStepId": "46dad3a4-09c5-458f-8c88-f7c4814b795d",
					"diagramNodeId": "2d2d7b1e-3944-4360-9a12-ba0c64d82108",
					"simStepLabel": "Flow 2: Execute silencedetect FFmpeg Command",
					"simStepDescription": "The main process executes an `ffmpeg` command with the `silencedetect` audio filter. It parses the command's output to identify periods of silence.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "400",
						"endLine": "440",
						"relevantVariables": [
							"silenceDetect",
							"runFfmpegWithProgress",
							"mapFilterOptions",
							"matchLineTokens"
						]
					},
					"inputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_interview.mov\",\"streamId\":1,\"filterOptions\":{\"noise\":\"-55dB\",\"duration\":\"1.5\"},\"boundingMode\":false,\"from\":0,\"to\":3605.2}",
					"outputDataExample": "{\"start\":60.1,\"end\":63.2}"
				},
				{
					"simStepId": "7c5463b4-716b-43db-9c36-61cd29e84fcb",
					"diagramNodeId": "a66ee729-62e3-4105-8194-5d2cea5184a2",
					"simStepLabel": "Flow 2: Stream Detected Segments",
					"simStepDescription": "For each period of silence found, the `onSegmentDetected` callback is invoked, sending the start and end times back to the renderer.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "417",
						"endLine": "423",
						"relevantVariables": [
							"matchLineTokens",
							"onSegmentDetected"
						]
					},
					"inputDataExample": "{\"start\":60.1,\"end\":63.2}",
					"outputDataExample": "{\"start\":60.1,\"end\":63.2}"
				},
				{
					"simStepId": "e99b1e8e-c558-4b50-96ab-d4a823cbb10f",
					"diagramNodeId": "fbc5bf71-7717-4ec3-8b17-f65b0878b5ec",
					"simStepLabel": "Flow 2: Add Segments to Timeline",
					"simStepDescription": "The renderer receives the silent segments and adds them to the application state, which updates the timeline UI to show the new segments.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "232",
						"endLine": "232",
						"relevantVariables": [
							"detectSegments"
						]
					},
					"inputDataExample": "{\"start\":60.1,\"end\":63.2}",
					"outputDataExample": "[{\"start\":60.1,\"end\":63.2,\"name\":\"Segment 1\"},{\"start\":150.3,\"end\":152.0,\"name\":\"Segment 2\"}]"
				},
				{
					"simStepId": "c180e610-6995-4d50-a703-ec902e67d614",
					"diagramNodeId": "75b73a32-5957-4815-95e0-67ad7f038911",
					"simStepLabel": "Flow 3: Trigger Scene Change Detection",
					"simStepDescription": "User initiates scene change detection. This calls the `detectSceneChanges` function from the `useSegments` hook.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "235",
						"endLine": "237",
						"relevantVariables": [
							"detectSceneChanges"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"sceneChange\",\"parameters\":{\"min_scene_change\":{\"value\":\"0.4\"}}}"
				},
				{
					"simStepId": "09c731c3-1c4f-4043-b5ed-bc42e48cf350",
					"diagramNodeId": "7ed7867b-9cae-41e4-92ac-02414b6f1207",
					"simStepLabel": "Flow 3: Request Detection Parameters",
					"simStepDescription": "A dialog is shown to the user to input the scene change detection threshold (a value between 0 and 1).",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "238",
						"endLine": "238",
						"relevantVariables": [
							"showParametersDialog"
						]
					},
					"inputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"sceneChange\",\"parameters\":{\"min_scene_change\":{\"value\":\"0.4\"}}}",
					"outputDataExample": "{\"title\":\"Enter parameters\",\"dialogType\":\"sceneChange\",\"parameters\":{\"min_scene_change\":{\"value\":\"0.4\"}}}"
				},
				{
					"simStepId": "83387023-e9d3-49a8-9d44-0d14014dbc26",
					"diagramNodeId": "f8df9560-03ba-4124-aa05-6ed2be191d38",
					"simStepLabel": "Flow 3: Receive User Parameters",
					"simStepDescription": "The dialog returns the user-configured scene change threshold. The `detectSceneChanges` function in the renderer then prepares to call the main process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "238",
						"endLine": "238",
						"relevantVariables": [
							"parameters",
							"ffmpegDetectSceneChanges"
						]
					},
					"inputDataExample": "{\"min_scene_change\":\"0.5\"}",
					"outputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_vacation.mp4\",\"streamId\":0,\"minChange\":\"0.5\",\"from\":0,\"to\":950.0}"
				},
				{
					"simStepId": "2fa08b1e-c7e0-4324-a9e9-2e6a688d46f8",
					"diagramNodeId": "568ede75-20ab-45af-abdf-2785d97c42f7",
					"simStepLabel": "Flow 3: Invoke FFmpeg Scene Change Detect",
					"simStepDescription": "The renderer process calls the `detectSceneChanges` function in the main process, passing the file path and the detection threshold.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "17",
						"endLine": "17",
						"relevantVariables": [
							"detectSceneChanges"
						]
					},
					"inputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_vacation.mp4\",\"streamId\":0,\"minChange\":\"0.5\",\"from\":0,\"to\":950.0}",
					"outputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_vacation.mp4\",\"streamId\":0,\"minChange\":\"0.5\",\"from\":0,\"to\":950.0}"
				},
				{
					"simStepId": "363ee372-3f9f-43d0-acda-51e465492ed8",
					"diagramNodeId": "b8c56860-e6c1-4420-b4a8-f4abeba736fb",
					"simStepLabel": "Flow 3: Execute scdet FFmpeg Command",
					"simStepDescription": "The main process executes an `ffmpeg` command using the `scdet` filter to find scene changes. It parses the output to extract the timestamps of each scene change.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "267",
						"endLine": "271",
						"relevantVariables": [
							"detectSceneChanges"
						]
					},
					"inputDataExample": "{\"filePath\":\"/Users/mikael/videos/my_vacation.mp4\",\"streamId\":0,\"minChange\":\"0.5\",\"from\":0,\"to\":950.0}",
					"outputDataExample": "[12.34,25.67,45.89,61.05]"
				},
				{
					"simStepId": "6a8353a9-37ee-4746-83eb-2e4d3d3a0b86",
					"diagramNodeId": "7a19e285-3872-49ff-985a-7fa395fb31c9",
					"simStepLabel": "Flow 3: Return Detected Scene Change Times",
					"simStepDescription": "The `detectSceneChanges` function in the main process returns a promise that resolves with an array of all detected scene change timestamps.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "17",
						"endLine": "17",
						"relevantVariables": [
							"detectSceneChanges"
						]
					},
					"inputDataExample": "[12.34,25.67,45.89,61.05]",
					"outputDataExample": "[12.34,25.67,45.89,61.05]"
				},
				{
					"simStepId": "70193180-ff87-4d61-9b5a-0d547abaa93e",
					"diagramNodeId": "db988787-3f20-44e9-ae64-c706ac1070da",
					"simStepLabel": "Flow 3: Create Segments from Timestamps",
					"simStepDescription": "The renderer receives the array of timestamps. It then uses the `mapTimesToSegments` utility to convert these points in time into distinct segments, where each segment spans between two consecutive scene changes. These new segments are then added to the state, updating the UI.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "235",
						"endLine": "238",
						"relevantVariables": [
							"detectSceneChanges",
							"mapTimesToSegments"
						]
					},
					"inputDataExample": "[12.34,25.67,45.89,61.05]",
					"outputDataExample": "[{\"start\":0,\"end\":12.34,\"name\":\"Segment 1\"},{\"start\":12.34,\"end\":25.67,\"name\":\"Segment 2\"},{\"start\":25.67,\"end\":45.89,\"name\":\"Segment 3\"},{\"start\":45.89,\"end\":61.05,\"name\":\"Segment 4\"}]"
				}
			],
			"description": "<ul><li>To speed up the editing process, the application can automatically analyze the media file to detect and create segments</li><li>This includes detecting scene changes in video, periods of silence in audio tracks, and black frames in video, which often correspond to natural cut points</li></ul>",
			"simulationNodesAndEdges": {
				"41413e7c-1736-4001-9e7b-37ea7d0fe577": {
					"simStepIds": [
						"4e3478a8-6bfe-4668-9c60-2538ac5f4cac"
					]
				},
				"6a1b8dca-200e-4b16-8a50-7db1abca439b": {
					"simStepIds": [
						"858f05be-34c9-4465-ad5a-ae1308c8014b"
					]
				},
				"2a3dd178-2a1b-4ae1-925f-6216f968c240": {
					"simStepIds": [
						"fdc1105b-5396-4625-8593-2de2a5607002"
					]
				},
				"fe613999-b8b1-476f-bf64-9ec8130e2387": {
					"simStepIds": [
						"34148250-afcc-4adc-a830-e3175227167d"
					]
				},
				"6c78fb42-5ea8-4258-83ba-1757da0ae75d": {
					"simStepIds": [
						"f300aea7-2079-46a7-abc1-a74eb9390556"
					]
				},
				"5a1c35ad-4304-44fb-aeaf-a7298e78dad6": {
					"simStepIds": [
						"b02a0c20-a7f6-4048-97ae-30904f1a4b83"
					]
				},
				"2d2d7b1e-3944-4360-9a12-ba0c64d82108": {
					"simStepIds": [
						"46dad3a4-09c5-458f-8c88-f7c4814b795d"
					]
				},
				"fbc5bf71-7717-4ec3-8b17-f65b0878b5ec": {
					"simStepIds": [
						"e99b1e8e-c558-4b50-96ab-d4a823cbb10f"
					]
				},
				"75b73a32-5957-4815-95e0-67ad7f038911": {
					"simStepIds": [
						"c180e610-6995-4d50-a703-ec902e67d614"
					]
				},
				"f8df9560-03ba-4124-aa05-6ed2be191d38": {
					"simStepIds": [
						"83387023-e9d3-49a8-9d44-0d14014dbc26"
					]
				},
				"b8c56860-e6c1-4420-b4a8-f4abeba736fb": {
					"simStepIds": [
						"363ee372-3f9f-43d0-acda-51e465492ed8"
					]
				},
				"db988787-3f20-44e9-ae64-c706ac1070da": {
					"simStepIds": [
						"70193180-ff87-4d61-9b5a-0d547abaa93e"
					]
				},
				"2713c463-fc15-4764-acdd-e4d851593016": {
					"simStepIds": [
						"7b7e6a7f-c99d-4a9f-9e6f-11d98f6182f4"
					]
				},
				"780d8f1a-5abc-4225-bdee-24d239c58421": {
					"simStepIds": [
						"4a349c48-fa90-4151-8cd3-ecd16c4077aa"
					]
				},
				"68d289d9-a97b-48fe-b0ac-1ee5bf09b417": {
					"simStepIds": [
						"4e6df59c-398d-445d-97ab-3f99213ed140"
					]
				},
				"db5280dd-daf5-4bbd-8e48-4f80bacec604": {
					"simStepIds": [
						"3c4303ea-133d-4ae1-a684-967f02f6782c"
					]
				},
				"7ce78810-2070-4baa-bf4a-30046236415a": {
					"simStepIds": [
						"ac039e3f-4fc3-4a3c-991b-afc9accc3d8a"
					]
				},
				"a66ee729-62e3-4105-8194-5d2cea5184a2": {
					"simStepIds": [
						"7c5463b4-716b-43db-9c36-61cd29e84fcb"
					]
				},
				"7ed7867b-9cae-41e4-92ac-02414b6f1207": {
					"simStepIds": [
						"09c731c3-1c4f-4043-b5ed-bc42e48cf350"
					]
				},
				"568ede75-20ab-45af-abdf-2785d97c42f7": {
					"simStepIds": [
						"2fa08b1e-c7e0-4324-a9e9-2e6a688d46f8"
					]
				},
				"7a19e285-3872-49ff-985a-7fa395fb31c9": {
					"simStepIds": [
						"6a8353a9-37ee-4746-83eb-2e4d3d3a0b86"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "detectSceneChanges, silenceDetect, blackDetect",
			"generationPrompt": "Automated Segment Detection",
			"generationKeywords": "detectSceneChanges, silenceDetect, blackDetect"
		},
		"Editing Media Metadata": {
			"name": "Editing Media Metadata",
			"simSteps": [
				{
					"simStepId": "dd747ef9-736f-4615-8b5e-e4792bcfa06b",
					"diagramNodeId": "e8445cce-fa78-4751-aa5d-584945624b4d",
					"simStepLabel": "User Initiates Video Rotation",
					"simStepDescription": "The user clicks the 'Set output rotation' button in the bottom bar to cycle through rotation options (0, 90, 180, 270 degrees).",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/BottomBar.tsx",
						"startLine": "545",
						"endLine": "545",
						"relevantVariables": [
							"increaseRotation"
						]
					},
					"inputDataExample": "{\"event\": \"onClick\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "e2e44506-d397-4f68-962a-48cc3bf6b272",
					"diagramNodeId": "b3d8793b-861a-4074-8153-b6a3972019dc",
					"simStepLabel": "Data Flow: Rotation Request",
					"simStepDescription": "The `onClick` event triggers the `increaseRotation` function, which is passed as a prop from the main `App` component to the `BottomBar`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2717",
						"endLine": "2717",
						"relevantVariables": [
							"increaseRotation"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "5f285d87-87e1-44c6-850c-31f2b8e93d3c",
					"diagramNodeId": "380a86e3-1f7e-416d-a639-4e59df16ba0c",
					"simStepLabel": "App Component Updates Rotation State",
					"simStepDescription": "The `increaseRotation` function in `App.tsx` is executed. It updates the `rotation` state by adding 90 degrees, wrapping around.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "442",
						"endLine": "445",
						"relevantVariables": [
							"increaseRotation",
							"setRotation"
						]
					},
					"inputDataExample": "{\"currentRotation\": 0}",
					"outputDataExample": "{\"newRotation\": 90}"
				},
				{
					"simStepId": "27f6cc77-8798-4fc3-8fed-2b86643a5c3c",
					"diagramNodeId": "c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
					"simStepLabel": "Data Flow: Rotation State Ready for Export",
					"simStepDescription": "The updated rotation value is now stored in the application's state, ready to be used when the user initiates an export.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2715",
						"endLine": "2716",
						"relevantVariables": [
							"isRotationSet",
							"rotation"
						]
					},
					"inputDataExample": "{\"rotation\": 90}",
					"outputDataExample": "{\"rotation\": 90}"
				},
				{
					"simStepId": "ccc072ad-de56-4778-93da-5e63173b659d",
					"diagramNodeId": "08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec",
					"simStepLabel": "User Opens File Metadata Editor",
					"simStepDescription": "The user navigates to the 'Tracks / metadata' panel and clicks the edit button next to the file name, which opens a dialog to edit the container's metadata.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "505",
						"endLine": "509",
						"relevantVariables": [
							"Dialog",
							"EditFileDialog",
							"setEditingFile"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/vacation.mp4\"}",
					"outputDataExample": "{\"editingFile\": \"/Users/john/Movies/vacation.mp4\"}"
				},
				{
					"simStepId": "279254d9-ff43-4c22-ab57-93be1228102f",
					"diagramNodeId": "b93232b3-d14c-4b9e-b760-8eb449542914",
					"simStepLabel": "Data Flow: Loading Existing Metadata",
					"simStepDescription": "The `EditFileDialog` component receives the current file's metadata and any existing custom tags from the application state to display them in the `TagEditor`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "39",
						"endLine": "45",
						"relevantVariables": [
							"EditFileDialog",
							"allFilesMeta",
							"customTagsByFile"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/vacation.mp4\", \"customTagsByFile\": {}}",
					"outputDataExample": "{\"filePath\": \"/Users/john/Movies/vacation.mp4\", \"customTagsByFile\": {}}"
				},
				{
					"simStepId": "948204b8-b1e9-49af-b47a-2d281a967aee",
					"diagramNodeId": "f170bee2-f9ec-4f08-880b-178aa8120a74",
					"simStepLabel": "User Edits Metadata in TagEditor",
					"simStepDescription": "Inside the `TagEditor`, the user adds or modifies a metadata tag, for example, setting the 'title' to 'My Vacation Video'. This action triggers the `onTagsChange` callback.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/TagEditor.tsx",
						"startLine": "21",
						"endLine": "26",
						"relevantVariables": [
							"TagEditor",
							"onTagsChange"
						]
					},
					"inputDataExample": "{\"key\": \"title\", \"value\": \"My Vacation Video\"}",
					"outputDataExample": "{\"changedTags\": {\"title\": \"My Vacation Video\"}}"
				},
				{
					"simStepId": "bd929234-7704-47ae-af5a-4c1e17bdf2d3",
					"diagramNodeId": "b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
					"simStepLabel": "Data Flow: Propagating Metadata Changes",
					"simStepDescription": "The `onTagsChange` callback, defined in `EditFileDialog`, receives the updated tags and prepares to update the global application state via `setCustomTagsByFile`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "51",
						"endLine": "53",
						"relevantVariables": [
							"onTagsChange",
							"setCustomTagsByFile"
						]
					},
					"inputDataExample": "{\"keyValues\": {\"title\": \"My Vacation Video\"}}",
					"outputDataExample": "{\"keyValues\": {\"title\": \"My Vacation Video\"}}"
				},
				{
					"simStepId": "6bfd2a9b-e07b-4406-9d07-c73bf0520b3d",
					"diagramNodeId": "7a54e3ae-30b8-4237-87ac-e8bc9635f5d7",
					"simStepLabel": "App Component Updates Custom Tags State",
					"simStepDescription": "The `setCustomTagsByFile` function is called, updating the main `customTagsByFile` state in `App.tsx` with the new metadata for the specific file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "132",
						"endLine": "132",
						"relevantVariables": [
							"customTagsByFile",
							"setCustomTagsByFile"
						]
					},
					"inputDataExample": "{\"editingFile\": \"/Users/john/Movies/vacation.mp4\", \"newTags\": {\"title\": \"My Vacation Video\"}}",
					"outputDataExample": "{\"customTagsByFile\": {\"/Users/john/Movies/vacation.mp4\": {\"title\": \"My Vacation Video\"}}}"
				},
				{
					"simStepId": "fc6f9e6e-81e5-44af-95dd-ee47b49860d5",
					"diagramNodeId": "ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
					"simStepLabel": "Data Flow: Metadata State Ready for Export",
					"simStepDescription": "The updated `customTagsByFile` object is passed from the `App` component to the `StreamsSelector` to ensure the UI is in sync and the data is ready for export.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2787",
						"endLine": "2787",
						"relevantVariables": [
							"customTagsByFile",
							"setCustomTagsByFile"
						]
					},
					"inputDataExample": "{\"customTagsByFile\": {\"/Users/john/Movies/vacation.mp4\": {\"title\": \"My Vacation Video\"}}}",
					"outputDataExample": "{\"customTagsByFile\": {\"/Users/john/Movies/vacation.mp4\": {\"title\": \"My Vacation Video\"}}}"
				},
				{
					"simStepId": "66bcd865-02d6-4ae0-ac5f-675e26038018",
					"diagramNodeId": "eb55337f-1579-418c-aed2-84fa3123d894",
					"simStepLabel": "User Initiates Export",
					"simStepDescription": "The user clicks the export button, triggering the `onExportPress` function, which orchestrates the entire export process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1239",
						"endLine": "1240",
						"relevantVariables": [
							"onExportPress"
						]
					},
					"inputDataExample": "{\"event\": \"onClick\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "c8878685-7061-4233-9b95-98287692b6ee",
					"diagramNodeId": "0ac852af-dc55-46c3-9f97-f147ea451c76",
					"simStepLabel": "Data Flow: Passing Export Parameters",
					"simStepDescription": "The export function gathers all necessary parameters, including the updated `rotation` and `customTagsByFile` state, and passes them to the `cutMultiple` function from the `useFfmpegOperations` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1125",
						"endLine": "1126",
						"relevantVariables": [
							"customTagsByFile",
							"paramsByStreamId"
						]
					},
					"inputDataExample": "{\"rotation\": 90, \"customTagsByFile\": {\"/Users/john/Movies/vacation.mp4\": {\"title\": \"My Vacation Video\"}}, \"segments\": [{\"start\": 10, \"end\": 20}]}",
					"outputDataExample": "{\"rotation\": 90, \"customTagsByFile\": {\"/Users/john/Movies/vacation.mp4\": {\"title\": \"My Vacation Video\"}}, \"segments\": [{\"start\": 10, \"end\": 20}]}"
				},
				{
					"simStepId": "c0094ec7-6b75-431b-832a-fcb57ce2ff15",
					"diagramNodeId": "cefc02f7-41cc-4cdf-9767-f454f9b582db",
					"simStepLabel": "FFmpeg Command Generation",
					"simStepDescription": "Inside the `useFfmpegOperations` hook, the `losslessCutSingle` function (called by `cutMultiple`) constructs the FFmpeg command. It creates `-metadata` arguments from both the `rotation` value and the `customTagsByFile` object.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "321",
						"endLine": "323",
						"relevantVariables": [
							"customTagsArgs",
							"customTagsByFile",
							"losslessCutSingle"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/vacation.mp4\", \"rotation\": 90, \"customTagsByFile\": {\"/Users/john/Movies/vacation.mp4\": {\"title\": \"My Vacation Video\"}}}",
					"outputDataExample": "{\"ffmpegArgs\": [\"-i\", \"/Users/john/Movies/vacation.mp4\", \"-metadata\", \"title=My Vacation Video\", \"-metadata:s:v:0\", \"rotate=90\", \"/Users/john/Movies/vacation-cut.mp4\"]}"
				},
				{
					"simStepId": "20ba9511-9af7-4b45-ab5c-6bac36cb660c",
					"diagramNodeId": "7b4e62b2-52a7-4618-9233-ac1763e094c9",
					"simStepLabel": "Data Flow: Executing FFmpeg Command",
					"simStepDescription": "The generated array of FFmpeg arguments is passed to a utility function that executes it as a system command.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "482",
						"endLine": "482",
						"relevantVariables": [
							"runFfmpeg",
							"ffmpegArgs"
						]
					},
					"inputDataExample": "{\"ffmpegArgs\": [\"-i\", \"/Users/john/Movies/vacation.mp4\", \"-metadata\", \"title=My Vacation Video\", \"-metadata:s:v:0\", \"rotate=90\", \"/Users/john/Movies/vacation-cut.mp4\"]}",
					"outputDataExample": "{\"ffmpegArgs\": [\"-i\", \"/Users/john/Movies/vacation.mp4\", \"-metadata\", \"title=My Vacation Video\", \"-metadata:s:v:0\", \"rotate=90\", \"/Users/john/Movies/vacation-cut.mp4\"]}"
				},
				{
					"simStepId": "6a1d34e9-e7d3-471c-b8e2-869676930d30",
					"diagramNodeId": "60cef2c2-65c3-49cd-91f2-262ded0acb15",
					"simStepLabel": "Final Output with Modified Metadata",
					"simStepDescription": "FFmpeg processes the input file and writes a new output file with the specified rotation and title metadata embedded, without re-encoding the video stream.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "482",
						"endLine": "482",
						"relevantVariables": [
							"runFfmpeg"
						]
					},
					"inputDataExample": "{\"outputPath\": \"/Users/john/Movies/vacation-cut.mp4\"}",
					"outputDataExample": "{\"status\": \"success\", \"file\": \"vacation-cut.mp4\"}"
				}
			],
			"description": "<ul><li>Users can edit metadata for both the container file and individual tracks</li><li>This includes changing fields like title and author</li><li>A key feature is the ability to change the video rotation/orientation flag without re-encoding, which is useful for fixing videos from mobile phones</li></ul>",
			"simulationNodesAndEdges": {
				"e8445cce-fa78-4751-aa5d-584945624b4d": {
					"simStepIds": [
						"dd747ef9-736f-4615-8b5e-e4792bcfa06b"
					]
				},
				"380a86e3-1f7e-416d-a639-4e59df16ba0c": {
					"simStepIds": [
						"5f285d87-87e1-44c6-850c-31f2b8e93d3c"
					]
				},
				"08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec": {
					"simStepIds": [
						"ccc072ad-de56-4778-93da-5e63173b659d"
					]
				},
				"f170bee2-f9ec-4f08-880b-178aa8120a74": {
					"simStepIds": [
						"948204b8-b1e9-49af-b47a-2d281a967aee"
					]
				},
				"7a54e3ae-30b8-4237-87ac-e8bc9635f5d7": {
					"simStepIds": [
						"6bfd2a9b-e07b-4406-9d07-c73bf0520b3d"
					]
				},
				"eb55337f-1579-418c-aed2-84fa3123d894": {
					"simStepIds": [
						"66bcd865-02d6-4ae0-ac5f-675e26038018"
					]
				},
				"cefc02f7-41cc-4cdf-9767-f454f9b582db": {
					"simStepIds": [
						"c0094ec7-6b75-431b-832a-fcb57ce2ff15"
					]
				},
				"60cef2c2-65c3-49cd-91f2-262ded0acb15": {
					"simStepIds": [
						"6a1d34e9-e7d3-471c-b8e2-869676930d30"
					]
				},
				"b3d8793b-861a-4074-8153-b6a3972019dc": {
					"simStepIds": [
						"e2e44506-d397-4f68-962a-48cc3bf6b272"
					]
				},
				"c16690b1-1e5e-49a9-9c1d-17d465e09fbf": {
					"simStepIds": [
						"27f6cc77-8798-4fc3-8fed-2b86643a5c3c"
					]
				},
				"b93232b3-d14c-4b9e-b760-8eb449542914": {
					"simStepIds": [
						"279254d9-ff43-4c22-ab57-93be1228102f"
					]
				},
				"b64c5174-9951-4b25-8ad7-8f08ac7ea7bf": {
					"simStepIds": [
						"bd929234-7704-47ae-af5a-4c1e17bdf2d3"
					]
				},
				"ff5c4aea-4ad5-4a18-805f-e5d07fceaece": {
					"simStepIds": [
						"fc6f9e6e-81e5-44af-95dd-ee47b49860d5"
					]
				},
				"0ac852af-dc55-46c3-9f97-f147ea451c76": {
					"simStepIds": [
						"c8878685-7061-4233-9b95-98287692b6ee"
					]
				},
				"7b4e62b2-52a7-4618-9233-ac1763e094c9": {
					"simStepIds": [
						"20ba9511-9af7-4b45-ab5c-6bac36cb660c"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "TagEditor, customTagsByFile, increaseRotation",
			"generationPrompt": "Editing Media Metadata",
			"generationKeywords": "TagEditor, customTagsByFile, increaseRotation"
		},
		"Smart Cutting for Frame-Accurate Exports": {
			"name": "Smart Cutting for Frame-Accurate Exports",
			"simSteps": [
				{
					"simStepId": "e81559ca-edcf-4b1e-9b94-aead55c01a3c",
					"diagramNodeId": "2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56",
					"simStepLabel": "Config: User Enables Smart Cut",
					"simStepDescription": "In the export confirmation dialog, the user enables the 'Smart cut (experimental)' option. This sets the 'enableSmartCut' flag to true, initiating the smart cut workflow for the export process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ExportConfirm.tsx",
						"startLine": "542",
						"endLine": "544",
						"relevantVariables": [
							"Switch",
							"enableSmartCut",
							"setEnableSmartCut"
						]
					},
					"inputDataExample": "{\"enableSmartCut\": false}",
					"outputDataExample": "{\"enableSmartCut\": true}"
				},
				{
					"simStepId": "eab3939c-6342-467f-9f4c-1ff9611ece6a",
					"diagramNodeId": "a8ab075a-f680-41b6-80f3-82912c45325f",
					"simStepLabel": "Data Flow: Smart Cut Setting Propagated",
					"simStepDescription": "The 'enableSmartCut' setting is passed from the UI component to the core FFmpeg operations logic, making it available when the export is executed.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ExportConfirm.tsx",
						"startLine": "136",
						"endLine": "136",
						"relevantVariables": [
							"enableSmartCut",
							"setEnableSmartCut"
						]
					},
					"inputDataExample": "{\"enableSmartCut\": true}",
					"outputDataExample": "{\"enableSmartCut\": true}"
				},
				{
					"simStepId": "2f1b29a0-1fd1-4d75-b295-d1355083b96b",
					"diagramNodeId": "c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8",
					"simStepLabel": "Logic: Check if Smart Cut is Required",
					"simStepDescription": "For a given video segment, the system calls 'needsSmartCut' to determine if the desired cut-from time falls on a keyframe. If it doesn't, the function indicates that a smart cut is necessary and returns the timestamp of the closest previous keyframe.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "592",
						"endLine": "592",
						"relevantVariables": [
							"needsSmartCut",
							"filePath",
							"desiredCutFrom",
							"videoStream"
						]
					},
					"inputDataExample": "{\"path\": \"/path/to/video.mp4\", \"desiredCutFrom\": 15.3, \"videoStream\": {\"index\": 0}}",
					"outputDataExample": "{\"losslessCutFrom\": 14.8, \"segmentNeedsSmartCut\": true}"
				},
				{
					"simStepId": "26d89800-20e8-4bc4-9490-e4897d95d936",
					"diagramNodeId": "f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
					"simStepLabel": "Data Flow: Smart Cut Decision Transmitted",
					"simStepDescription": "The result from 'needsSmartCut', including the boolean 'segmentNeedsSmartCut' and the 'losslessCutFrom' timestamp, is returned to the main export function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/smartcut.ts",
						"startLine": "9",
						"endLine": "15",
						"relevantVariables": [
							"needsSmartCut"
						]
					},
					"inputDataExample": "{\"losslessCutFrom\": 14.8, \"segmentNeedsSmartCut\": true}",
					"outputDataExample": "{\"losslessCutFrom\": 14.8, \"segmentNeedsSmartCut\": true}"
				},
				{
					"simStepId": "e3dcf5bf-87cc-4610-a028-2fb93dfc4faa",
					"diagramNodeId": "ed27f5ba-4434-4ebc-aa70-8c7d6b31c921",
					"simStepLabel": "Logic: Execute Lossless Cut for Main Segment",
					"simStepDescription": "A lossless cut is performed on the main portion of the video segment. This cut starts from the keyframe ('losslessCutFrom') identified in the previous step and ends at the desired cut-to time. The result is saved to a temporary file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "616",
						"endLine": "620",
						"relevantVariables": [
							"losslessCutSingle",
							"losslessCutFrom",
							"cutTo",
							"losslessPartOutPath"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"cutFrom\": 14.8, \"cutTo\": 45.0, \"outPath\": \"/tmp/smartcut-segment-copy-0.mp4\"}",
					"outputDataExample": "{\"path\": \"/tmp/smartcut-segment-copy-0.mp4\", \"created\": true}"
				},
				{
					"simStepId": "d0978219-adf5-4a19-a6a7-19d099d59c74",
					"diagramNodeId": "04c12e78-a09b-441e-9662-ee28da381bb5",
					"simStepLabel": "Data Flow: Lossless Part Created",
					"simStepDescription": "The path to the temporary file containing the losslessly cut video segment is made available for the final concatenation step.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "612",
						"endLine": "614",
						"relevantVariables": [
							"losslessPartOutPath"
						]
					},
					"inputDataExample": "{\"losslessPartOutPath\": \"/tmp/smartcut-segment-copy-0.mp4\"}",
					"outputDataExample": "{\"losslessPartOutPath\": \"/tmp/smartcut-segment-copy-0.mp4\"}"
				},
				{
					"simStepId": "3f3312e3-152d-490c-841d-90b7dc8adede",
					"diagramNodeId": "a1f5638d-5af6-493e-90b7-8edf75d04a29",
					"simStepLabel": "Logic: Re-encode Frame-Accurate 'Smart' Part",
					"simStepDescription": "The small initial portion of the segment, from the user's desired start time ('desiredCutFrom') to the keyframe ('losslessCutFrom'), is re-encoded. This allows for a frame-accurate start. The result is saved to a second temporary file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "636",
						"endLine": "636",
						"relevantVariables": [
							"cutEncodeSmartPartWrapper",
							"desiredCutFrom",
							"encodeCutToSafe",
							"smartCutEncodedPartOutPath"
						]
					},
					"inputDataExample": "{\"cutFrom\": 15.3, \"cutTo\": 14.76, \"outPath\": \"/tmp/smartcut-segment-encode-0.mp4\"}",
					"outputDataExample": "{\"outputPath\": \"/tmp/smartcut-segment-encode-0.mp4\", \"created\": true}"
				},
				{
					"simStepId": "a9c97069-9d88-43f3-80d9-616a419ee75c",
					"diagramNodeId": "5226167c-b75d-459f-b9dc-90316302ce10",
					"simStepLabel": "Data Flow: Encoded Part Created",
					"simStepDescription": "The path to the second temporary file, containing the short, re-encoded 'smart' part, is now ready for concatenation.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "626",
						"endLine": "627",
						"relevantVariables": [
							"smartCutEncodedPartOutPath",
							"smartCutSegmentsToConcat"
						]
					},
					"inputDataExample": "{\"smartCutEncodedPartOutPath\": \"/tmp/smartcut-segment-encode-0.mp4\"}",
					"outputDataExample": "{\"smartCutEncodedPartOutPath\": \"/tmp/smartcut-segment-encode-0.mp4\"}"
				},
				{
					"simStepId": "b3ab9bfc-c3c6-4236-bfb2-9e46c0e6b477",
					"diagramNodeId": "418438aa-030f-499a-8cf7-aa4eef5d5720",
					"simStepLabel": "Logic: Concatenate Parts",
					"simStepDescription": "The two temporary files (the re-encoded 'smart' part and the lossless main part) are concatenated in the correct order to produce the final, frame-accurate video segment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "641",
						"endLine": "641",
						"relevantVariables": [
							"concatFiles",
							"smartCutSegmentsToConcat",
							"finalOutPath"
						]
					},
					"inputDataExample": "{\"paths\": [\"/tmp/smartcut-segment-encode-0.mp4\", \"/tmp/smartcut-segment-copy-0.mp4\"], \"outPath\": \"/path/to/output/final-cut.mp4\"}",
					"outputDataExample": "{\"path\": \"/path/to/output/final-cut.mp4\", \"created\": true}"
				},
				{
					"simStepId": "a430e6e3-eca5-4109-8a48-c34c6d3ddb8c",
					"diagramNodeId": "328f35ce-0a59-4809-a562-e0d798d75254",
					"simStepLabel": "Data Flow: Final File Ready",
					"simStepDescription": "The final video file, which has been cut with frame accuracy, is now available at its destination path.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "642",
						"endLine": "642",
						"relevantVariables": [
							"finalOutPath"
						]
					},
					"inputDataExample": "{\"finalPath\": \"/path/to/output/final-cut.mp4\"}",
					"outputDataExample": "{\"finalPath\": \"/path/to/output/final-cut.mp4\"}"
				},
				{
					"simStepId": "b54019e6-5e85-4c06-b937-223c798c9862",
					"diagramNodeId": "ad450f9e-a81b-46dd-b383-68ad571496e0",
					"simStepLabel": "Logic: Cleanup Temporary Files",
					"simStepDescription": "After the final file has been successfully created, the temporary files used for the encoded and lossless parts are deleted from the disk to free up space.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "644",
						"endLine": "646",
						"relevantVariables": [
							"tryDeleteFiles",
							"smartCutSegmentsToConcat"
						]
					},
					"inputDataExample": "{\"filesToDelete\": [\"/tmp/smartcut-segment-encode-0.mp4\", \"/tmp/smartcut-segment-copy-0.mp4\"]}",
					"outputDataExample": "{\"cleanupSuccess\": true}"
				}
			],
			"description": "<ul><li>An experimental feature that provides frame-accurate cutting while remaining mostly lossless</li><li>For cuts that don't fall on a keyframe, it re-encodes only the small GOP (Group of Pictures) around the cut point and losslessly copies the rest of the segment</li><li>This provides precision without the time cost of a full re-encode</li></ul>",
			"simulationNodesAndEdges": {
				"2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56": {
					"simStepIds": [
						"e81559ca-edcf-4b1e-9b94-aead55c01a3c"
					]
				},
				"c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8": {
					"simStepIds": [
						"2f1b29a0-1fd1-4d75-b295-d1355083b96b"
					]
				},
				"ed27f5ba-4434-4ebc-aa70-8c7d6b31c921": {
					"simStepIds": [
						"e3dcf5bf-87cc-4610-a028-2fb93dfc4faa"
					]
				},
				"a1f5638d-5af6-493e-90b7-8edf75d04a29": {
					"simStepIds": [
						"3f3312e3-152d-490c-841d-90b7dc8adede"
					]
				},
				"418438aa-030f-499a-8cf7-aa4eef5d5720": {
					"simStepIds": [
						"b3ab9bfc-c3c6-4236-bfb2-9e46c0e6b477"
					]
				},
				"ad450f9e-a81b-46dd-b383-68ad571496e0": {
					"simStepIds": [
						"b54019e6-5e85-4c06-b937-223c798c9862"
					]
				},
				"a8ab075a-f680-41b6-80f3-82912c45325f": {
					"simStepIds": [
						"eab3939c-6342-467f-9f4c-1ff9611ece6a"
					]
				},
				"f8abec73-89d8-4dc9-98ba-f7e88dba81e1": {
					"simStepIds": [
						"26d89800-20e8-4bc4-9490-e4897d95d936"
					]
				},
				"04c12e78-a09b-441e-9662-ee28da381bb5": {
					"simStepIds": [
						"d0978219-adf5-4a19-a6a7-19d099d59c74"
					]
				},
				"5226167c-b75d-459f-b9dc-90316302ce10": {
					"simStepIds": [
						"a9c97069-9d88-43f3-80d9-616a419ee75c"
					]
				},
				"328f35ce-0a59-4809-a562-e0d798d75254": {
					"simStepIds": [
						"a430e6e3-eca5-4109-8a48-c34c6d3ddb8c"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "smartcut, needsSmartCut, cutEncodeSmartPart",
			"generationPrompt": "Smart Cutting for Frame-Accurate Exports",
			"generationKeywords": "smartcut, needsSmartCut, cutEncodeSmartPart"
		},
		"Visual Timeline with Waveform and Thumbnails": {
			"name": "Visual Timeline with Waveform and Thumbnails",
			"simSteps": [
				{
					"simStepId": "858293d4-0a8e-4695-b475-e6559f0881b1",
					"diagramNodeId": "78d96f28-f575-478d-b45b-f695a1c15aee",
					"simStepLabel": "Timeline Initialization",
					"simStepDescription": "The main App component initializes and calls the `useWaveform` and `useThumbnails` custom hooks. These hooks are responsible for managing the state and logic for fetching and displaying the audio waveform and video thumbnails respectively.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "578",
						"endLine": "583",
						"relevantVariables": [
							"useThumbnails",
							"useWaveform",
							"thumbnailsSorted",
							"waveforms",
							"overviewWaveform"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"waveformState\": {\"waveforms\": [], \"overviewWaveform\": null}, \"thumbnailsState\": {\"thumbnailsSorted\": []}}"
				},
				{
					"simStepId": "11988c6f-a657-4f01-a2a1-73f8fa869b01",
					"diagramNodeId": "97c44006-65d8-458d-9aba-6b898eaa8373",
					"simStepLabel": "Request for Visual Data",
					"simStepDescription": "The `useWaveform` and `useThumbnails` hooks, triggered by a file being loaded, make an asynchronous request to the main process via IPC (Inter-Process Communication) to start generating the waveform and thumbnail data from the source video file.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useThumbnails.ts",
						"startLine": "24",
						"endLine": "40",
						"relevantVariables": [
							"window.electron.extractThumbnails"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"zoomedDuration\": 120, \"showThumbnails\": true, \"waveformEnabled\": true}",
					"outputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"zoomedDuration\": 120, \"showThumbnails\": true, \"waveformEnabled\": true}"
				},
				{
					"simStepId": "2d0570f4-1fa8-423f-b260-ccafedf532cd",
					"diagramNodeId": "4244ba21-c22a-4d0f-9daa-e2e3d3277174",
					"simStepLabel": "Data Extraction via FFmpeg",
					"simStepDescription": "The main process receives the request and executes `ffmpeg` command-line operations to extract the necessary data. It generates peak audio data for the waveform and extracts frames at intervals to create thumbnail image files.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "452",
						"endLine": "488",
						"relevantVariables": [
							"extractThumbnails",
							"renderWaveform",
							"ffmpeg"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\"}",
					"outputDataExample": "{\"waveformPeaks\": [-0.5, 0.6, -0.4, 0.5, ...], \"thumbnailPaths\": [\"/tmp/thumb-001.jpg\", \"/tmp/thumb-002.jpg\", ...]}"
				},
				{
					"simStepId": "33112a96-2839-4c63-a961-f7d1f3b25286",
					"diagramNodeId": "48a137fd-8326-4e9a-bb8a-1da06f068560",
					"simStepLabel": "Return Extracted Data",
					"simStepDescription": "The generated data (an array of waveform peak values and a list of file paths for the thumbnails) is sent back from the main process to the renderer process, resolving the promise from the initial IPC call.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "487",
						"endLine": "487",
						"relevantVariables": [
							"return outFiles"
						]
					},
					"inputDataExample": "{\"waveformPeaks\": [-0.5, 0.6, -0.4, 0.5, ...], \"thumbnailPaths\": [\"/tmp/thumb-001.jpg\", \"/tmp/thumb-002.jpg\", ...]}",
					"outputDataExample": "{\"waveformPeaks\": [-0.5, 0.6, -0.4, 0.5, ...], \"thumbnailPaths\": [\"/tmp/thumb-001.jpg\", \"/tmp/thumb-002.jpg\", ...]}"
				},
				{
					"simStepId": "c14eeaae-961a-4675-b5f5-b21f2623971f",
					"diagramNodeId": "839743e8-ed3f-4102-8753-9109c7276157",
					"simStepLabel": "Update Component State with Data",
					"simStepDescription": "The `useWaveform` and `useThumbnails` hooks receive the data from the main process. They update their internal state using React's state setters (`setWaveforms`, `setThumbnails`), triggering a re-render of the `App` component.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useThumbnails.ts",
						"startLine": "37",
						"endLine": "37",
						"relevantVariables": [
							"setThumbnails"
						]
					},
					"inputDataExample": "{\"waveformPeaks\": [-0.5, 0.6, -0.4, 0.5, ...], \"thumbnailPaths\": [\"/tmp/thumb-001.jpg\", \"/tmp/thumb-002.jpg\", ...]}",
					"outputDataExample": "{\"waveforms\": [{\"path\": \"/path/to/waveform.json\", \"peaks\": [-0.5, 0.6, ...]}], \"thumbnailsSorted\": [{\"url\": \"file:///tmp/thumb-001.jpg\", \"time\": 0}, ...]}"
				},
				{
					"simStepId": "893dbb26-00db-49f6-b834-785112b7b649",
					"diagramNodeId": "75867657-cb23-408a-8227-cd65d5ee6e9c",
					"simStepLabel": "Pass Visual Data as Props",
					"simStepDescription": "The `App` component, now having the updated state, passes the `waveforms`, `overviewWaveform`, and `thumbnailsSorted` arrays down to the `Timeline` component as props.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2672",
						"endLine": "2678",
						"relevantVariables": [
							"Timeline",
							"waveforms",
							"overviewWaveform",
							"thumbnailsSorted"
						]
					},
					"inputDataExample": "{\"waveforms\": [{\"path\": \"...\", \"peaks\": [-0.5, 0.6, ...]}], \"thumbnailsSorted\": [{\"url\": \"...\", \"time\": 0}, ...]}",
					"outputDataExample": "{\"waveforms\": [{\"path\": \"...\", \"peaks\": [-0.5, 0.6, ...]}], \"thumbnailsSorted\": [{\"url\": \"...\", \"time\": 0}, ...]}"
				},
				{
					"simStepId": "b2c38fa4-8c3a-4a48-b8f6-d3f85c3af555",
					"diagramNodeId": "33f7866b-3caa-4089-b5d1-99bebc4086b1",
					"simStepLabel": "Render Waveform and Thumbnails",
					"simStepDescription": "The `Timeline` component receives the data props and renders the visuals. It maps over the `waveforms` data to render the `<Waveforms>` sub-component and maps over the `thumbnailsSorted` array to render a series of `<img>` tags for the video thumbnails.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/Timeline.tsx",
						"startLine": "367",
						"endLine": "389",
						"relevantVariables": [
							"Waveforms",
							"thumbnailsSorted"
						]
					},
					"inputDataExample": "{\"waveforms\": [{\"path\": \"...\", \"peaks\": [-0.5, 0.6, ...]}], \"thumbnailsSorted\": [{\"url\": \"file:///tmp/thumb-001.jpg\", \"time\": 0}, ...]}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "05391235-324f-4051-8af9-aea526fc99cc",
					"diagramNodeId": "f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
					"simStepLabel": "User Initiates Zoom Action",
					"simStepDescription": "The user performs a zoom action, such as scrolling the mouse wheel on the timeline. This dispatches a `wheel` event, which contains data about the scroll direction and intensity.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/Timeline.tsx",
						"startLine": "363",
						"endLine": "363",
						"relevantVariables": [
							"onWheel"
						]
					},
					"inputDataExample": "{\"type\": \"wheel\", \"deltaY\": -50, \"ctrlKey\": true}",
					"outputDataExample": "{\"type\": \"wheel\", \"deltaY\": -50, \"ctrlKey\": true}"
				},
				{
					"simStepId": "ef93fb74-5535-42ff-9af3-0fa679df634d",
					"diagramNodeId": "570aa79f-429c-44d8-bf13-63d478a792e4",
					"simStepLabel": "Update Zoom State",
					"simStepDescription": "The `onWheel` event handler, managed by the `useTimelineScroll` hook in `App.tsx`, processes the wheel event. It calculates a new zoom level based on the scroll direction and calls the `setZoom` state updater function.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useTimelineScroll.ts",
						"startLine": "57",
						"endLine": "80",
						"relevantVariables": [
							"onWheel",
							"zoomRel",
							"setZoom"
						]
					},
					"inputDataExample": "{\"previousZoom\": 100, \"scrollDelta\": -50}",
					"outputDataExample": "{\"newZoom\": 120}"
				},
				{
					"simStepId": "a8b44ddd-002f-466d-8a9f-4fe2ff6f6d58",
					"diagramNodeId": "e0f63a89-5164-4a64-bb15-de1d80d6315f",
					"simStepLabel": "Propagate New Zoom Level",
					"simStepDescription": "The updated `zoom` state variable is passed from the parent `App` component down to the `Timeline` and `BottomBar` components as a prop.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2686",
						"endLine": "2709",
						"relevantVariables": [
							"zoom"
						]
					},
					"inputDataExample": "{\"zoom\": 120}",
					"outputDataExample": "{\"zoom\": 120}"
				},
				{
					"simStepId": "1ce92ba9-2623-4e03-bdd1-3c3cd9d78086",
					"diagramNodeId": "b9382cb9-ac82-4566-b618-c20ee15abd72",
					"simStepLabel": "Re-render Timeline at New Zoom",
					"simStepDescription": "The `Timeline` component re-renders with the new `zoom` prop. It dynamically adjusts the CSS `width` of its inner container to stretch or shrink the content. A `useEffect` hook also programmatically adjusts the scroll position to keep the playhead centered.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/Timeline.tsx",
						"startLine": "392",
						"endLine": "395",
						"relevantVariables": [
							"zoom",
							"timelineWrapperRef"
						]
					},
					"inputDataExample": "{\"zoom\": 120}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "46f336ab-b189-45e6-9943-dc52467d310f",
					"diagramNodeId": "94de4282-fda9-4c1d-b6a9-7d3a8cfca33e",
					"simStepLabel": "Conditional Visibility Check",
					"simStepDescription": "The change in zoom level affects the `zoomedDuration` (the visible portion of the timeline). This value is used to determine if detailed visuals like the full waveform should be displayed or if a placeholder message is more appropriate.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "384",
						"endLine": "384",
						"relevantVariables": [
							"zoomedDuration"
						]
					},
					"inputDataExample": "{\"zoom\": 120, \"fileDuration\": 3600}",
					"outputDataExample": "{\"zoomedDuration\": 30}"
				},
				{
					"simStepId": "838a7ef2-7267-4c21-9196-d5bc1c06af30",
					"diagramNodeId": "75221063-4f72-499a-a2a6-edf625d3a6e1",
					"simStepLabel": "Conditionally Render Waveform or Placeholder",
					"simStepDescription": "Based on the `shouldShowWaveform` flag (which depends on the zoom level), the `Timeline` component either renders the detailed `<Waveforms>` component or a placeholder message telling the user to 'Zoom in more to view waveform'.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/Timeline.tsx",
						"startLine": "353",
						"endLine": "359",
						"relevantVariables": [
							"waveformEnabled",
							"shouldShowWaveform",
							"t"
						]
					},
					"inputDataExample": "{\"shouldShowWaveform\": false}",
					"outputDataExample": "null"
				}
			],
			"description": "<ul><li>The user interface is centered around a visual timeline that aids in precise navigation and segment selection</li><li>It can display video thumbnails and an audio waveform to help users visually identify the exact points to cut</li><li>The timeline is zoomable for frame-by-frame inspection</li></ul>",
			"simulationNodesAndEdges": {
				"78d96f28-f575-478d-b45b-f695a1c15aee": {
					"simStepIds": [
						"858293d4-0a8e-4695-b475-e6559f0881b1"
					]
				},
				"4244ba21-c22a-4d0f-9daa-e2e3d3277174": {
					"simStepIds": [
						"2d0570f4-1fa8-423f-b260-ccafedf532cd"
					]
				},
				"839743e8-ed3f-4102-8753-9109c7276157": {
					"simStepIds": [
						"c14eeaae-961a-4675-b5f5-b21f2623971f"
					]
				},
				"33f7866b-3caa-4089-b5d1-99bebc4086b1": {
					"simStepIds": [
						"b2c38fa4-8c3a-4a48-b8f6-d3f85c3af555"
					]
				},
				"570aa79f-429c-44d8-bf13-63d478a792e4": {
					"simStepIds": [
						"ef93fb74-5535-42ff-9af3-0fa679df634d"
					]
				},
				"b9382cb9-ac82-4566-b618-c20ee15abd72": {
					"simStepIds": [
						"1ce92ba9-2623-4e03-bdd1-3c3cd9d78086"
					]
				},
				"75221063-4f72-499a-a2a6-edf625d3a6e1": {
					"simStepIds": [
						"838a7ef2-7267-4c21-9196-d5bc1c06af30"
					]
				},
				"97c44006-65d8-458d-9aba-6b898eaa8373": {
					"simStepIds": [
						"11988c6f-a657-4f01-a2a1-73f8fa869b01"
					]
				},
				"48a137fd-8326-4e9a-bb8a-1da06f068560": {
					"simStepIds": [
						"33112a96-2839-4c63-a961-f7d1f3b25286"
					]
				},
				"75867657-cb23-408a-8227-cd65d5ee6e9c": {
					"simStepIds": [
						"893dbb26-00db-49f6-b834-785112b7b649"
					]
				},
				"f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54": {
					"simStepIds": [
						"05391235-324f-4051-8af9-aea526fc99cc"
					]
				},
				"e0f63a89-5164-4a64-bb15-de1d80d6315f": {
					"simStepIds": [
						"a8b44ddd-002f-466d-8a9f-4fe2ff6f6d58"
					]
				},
				"94de4282-fda9-4c1d-b6a9-7d3a8cfca33e": {
					"simStepIds": [
						"46f336ab-b189-45e6-9943-dc52467d310f"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "Timeline, useWaveform, useThumbnails",
			"generationPrompt": "Visual Timeline with Waveform and Thumbnails",
			"generationKeywords": "Timeline, useWaveform, useThumbnails"
		}
	},
	"cellToPath": {
		"463a5eb2-fde0-45da-bac1-9c66a01129dd": "src",
		"00d3829d-efcf-4e0e-93bc-2c0a0db74e08": "src/renderer",
		"e2b2a8e0-6ad4-410e-8f3a-f5b737c30614": "src/renderer/src",
		"e9994d85-90d3-4f26-9f4d-d16f248bf6a2": "src/renderer/src/hooks",
		"bb381e40-71c2-4fa6-a4fa-5c1d3f9bb39f": "src/renderer/src/BottomBar.tsx",
		"28b30cce-6d19-4cdb-9d87-c8a3115ecf1a": "src/renderer/src/App.tsx",
		"affb473b-e658-4871-9c60-5db305eafa52": "src/renderer/src/hooks/useSegments.ts",
		"5649a414-611f-438b-8798-36092666feb1": "src/renderer/src/hooks/useFfmpegOperations.ts",
		"45fc7484-77e6-4c0f-8442-44e72c622501": "src/renderer/src/hooks/useSegments.ts-simstep-6eb49e2c-c345-4411-a39a-7d5f8503c15a",
		"9501368b-e6a8-45d9-980d-832b5066287b": "src/renderer/src/hooks/useSegments.ts-simstep-08b28a42-f61b-41ac-b21e-cf572c14eb92",
		"ddd5cab6-426e-446d-b7f4-720fd942e4d1": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-42700cf0-b1d7-436d-8f3b-8b7b678299f9",
		"211a02ee-1f90-4abe-9bcb-2513f3a6bd5a": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2b6dcbfc-67fb-40cb-aae2-13d11aa06d4b",
		"b33a1117-9574-424b-9853-c32fb7e1e673": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3c2123a1-6be4-4048-b6d3-8a11e718380c",
		"b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36": "generated-edge-simstep-06ce4707-16a4-40a1-ace4-7487f11cf713-b6ed5071-6bcb-4e9e-99d6-55cd0ea27a36",
		"55ebca4b-7f50-4c47-8a25-53236a0216c0": "generated-edge-simstep-df5b6f6a-fbae-47f0-b21b-6fcf58175777-55ebca4b-7f50-4c47-8a25-53236a0216c0",
		"ec371131-7664-46bd-95de-9b8da465ab65": "generated-edge-simstep-e8a501ed-14af-47c1-a6c5-c519f9f10885-ec371131-7664-46bd-95de-9b8da465ab65",
		"45de532b-bca2-4a29-8e65-cacdbdcad058": "generated-edge-simstep-c42c9a1e-2651-4617-93b9-459b0b8f41d0-45de532b-bca2-4a29-8e65-cacdbdcad058",
		"ae8820cf-4d61-4362-95a6-7e4e696983c9": "src/main",
		"0177db3d-d803-4aa3-8c88-fce03bfe8e4c": "src/main/ffmpeg.ts",
		"f64dcaa1-9740-4aad-aad8-03cb84a3c967": "src/renderer/src/components",
		"45dc8065-3870-4188-8b62-1d24c6224813": "src/renderer/src/ffmpeg.ts",
		"74f51150-3da2-41a1-9c6e-30d5ced483a4": "src/renderer/src/components/ConcatDialog.tsx",
		"ca46b6f9-2862-46e8-ae81-6aebfd0d8623": "src/renderer/src/App.tsx-simstep-d020487f-6f97-438e-a80b-aa9ba8d22b53",
		"219bb17e-4463-4c4a-9db2-c2eb49ca4208": "src/renderer/src/components/ConcatDialog.tsx-simstep-338e42f2-b700-4d84-b0c5-416c1144afdd",
		"0fb76bee-7ac9-454e-8839-0bb36f81c800": "src/renderer/src/App.tsx-simstep-f7e7d684-641a-4b90-93e5-6b7e10a0d042",
		"d2872d2f-395a-4318-9b07-616af5a57ccc": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1f57a8af-ea7a-4d97-bdbb-7909b5b95fb9",
		"75294aa0-e6bd-47f4-8daf-980e6b860fb2": "src/main/ffmpeg.ts-simstep-71c6a858-d542-42d7-a07f-3115d0cc0282",
		"3dca4ccd-53e3-4667-9be1-285bb23657dc": "generated-edge-simstep-42640ecb-79de-4a74-b249-d115117044a6-3dca4ccd-53e3-4667-9be1-285bb23657dc",
		"406e921c-9faf-4e2a-88ea-94317276cd6d": "generated-edge-simstep-3f85400f-d6fc-4f92-b578-4c91aca74b72-406e921c-9faf-4e2a-88ea-94317276cd6d",
		"754b3a4b-3aaf-4dec-9ead-be3b06f64cdf": "generated-edge-simstep-c645a0ec-8fdc-40f5-bfbe-ed1d32b40a17-754b3a4b-3aaf-4dec-9ead-be3b06f64cdf",
		"c70d3025-379a-4fbd-8033-9dae6c60e8ce": "generated-edge-simstep-39706b1c-bb97-4758-a307-9d0172e3f2cf-c70d3025-379a-4fbd-8033-9dae6c60e8ce",
		"3703cb7a-6500-43a5-8846-522dec2fd24d": "src/renderer/src/StreamsSelector.tsx",
		"38366ec6-d260-42a4-beca-36866d47ce90": "src/renderer/src/util",
		"aab8b1b6-a5fa-433c-afdd-8bb6ad279a73": "src/renderer/src/hooks/useStreamsMeta.ts",
		"c9c09fe8-9874-4a4f-ae0e-5aed788ee876": "src/renderer/src/util/streams.ts",
		"905cd6d7-b971-41c9-b1d8-933a1e2dbd65": "src/renderer/src/App.tsx-simstep-0013d881-3c4f-4a67-b096-4a030129bb50",
		"77a55804-37f5-4eb8-a005-a56e69a90607": "src/renderer/src/StreamsSelector.tsx-simstep-3087e347-b5ed-4f67-97d9-12745403dad8",
		"19c0ca87-f5a7-4e2e-8410-120483a7323e": "src/renderer/src/hooks/useStreamsMeta.ts-simstep-07672606-da5f-4e17-bcfd-59ce4c377e2c",
		"2b390644-3e9d-4741-87b5-eac68264e723": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c22a07c2-1beb-467c-8a2b-a2a14784c5e6",
		"0abeddc4-ed20-4e7f-9678-6a0b8b42881a": "src/renderer/src/util/streams.ts-simstep-bfd2b870-2082-4c51-a2c2-bb9c18566025",
		"648db7a7-ce2b-4505-99e0-de8615f3c02f": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6cdaf881-1781-46b6-94a3-8c5d503c4d8c",
		"cca3b2e8-b69d-43f4-b483-e2660938686f": "generated-edge-simstep-11fc14c2-cb68-46fc-a0ac-f97575891086-cca3b2e8-b69d-43f4-b483-e2660938686f",
		"8586d239-bb64-4bba-9b53-7b177b0a6d7d": "generated-edge-simstep-5b0cf2a9-48f2-44af-9954-3fc08ec595a6-8586d239-bb64-4bba-9b53-7b177b0a6d7d",
		"2e2e77b9-7459-4d74-9172-5738f4be58e6": "generated-edge-simstep-8002719a-424b-48a2-9ed0-1496224dac62-2e2e77b9-7459-4d74-9172-5738f4be58e6",
		"a496e3fe-de3e-41ed-892e-c41440d5fbfc": "generated-edge-simstep-e57039cf-aae7-4f08-8229-004f6de14a12-a496e3fe-de3e-41ed-892e-c41440d5fbfc",
		"a9897815-5ce0-4284-8834-9ae72e4ef852": "generated-edge-simstep-bc02ff4f-6f63-4cc1-b3a7-e43dcd9633fd-a9897815-5ce0-4284-8834-9ae72e4ef852",
		"ac75be33-a9fc-400f-b934-905ce044efd9": "src/renderer/src/components/OutputFormatSelect.tsx",
		"ab6d6760-8d86-4277-a029-6d08b9f6a9c0": "src/renderer/src/components/OutputFormatSelect.tsx-simstep-92161c88-d754-46fa-a5ec-7bd231c896a1",
		"6ff2892c-e1f7-41e5-b07c-7d3b2f08b85e": "src/renderer/src/App.tsx-simstep-4b7e05e7-fa81-4ef9-964e-55fc440d9520",
		"438cc3d7-c74e-40ce-94cd-9fa2298aabbf": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-00c406e5-0cc1-4137-a79e-a06564ec1000",
		"99306854-1574-4e2e-8db5-744857c2c9c0": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-419d66ba-777c-4d76-a53f-bf621628105d",
		"66d0854e-1628-4750-881f-5cc41bd882a8": "src/renderer/src/util/streams.ts-simstep-6ff789ee-75e7-4836-826d-fe2d42d10887",
		"46262f45-c20c-4c0e-b939-72a028504b0f": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0bf0d1c6-6653-4711-8ec4-5484ce078298",
		"11fc8bd0-2502-48ca-b87a-dec0102c0a28": "generated-edge-simstep-987f944e-a82e-407f-b86e-dadbaf351f87-11fc8bd0-2502-48ca-b87a-dec0102c0a28",
		"b5d9bef4-34ac-4463-8794-0e316935da0e": "generated-edge-simstep-59645a30-c7ed-4c98-af35-c7271b0a885a-b5d9bef4-34ac-4463-8794-0e316935da0e",
		"45010418-c767-4cda-9699-10f9e21565d3": "generated-edge-simstep-108f804f-5a01-4c6a-b2a4-c557c3c6e648-45010418-c767-4cda-9699-10f9e21565d3",
		"0697f662-55f2-4cc0-bb89-7d34dbcf05d4": "generated-edge-simstep-f70094bb-2844-486e-8405-a4b95d84816e-0697f662-55f2-4cc0-bb89-7d34dbcf05d4",
		"c525b1b1-77fa-4d0d-be43-1f8edc959518": "generated-edge-simstep-e0ea8c47-b33c-4a87-8177-5f546cdcf0f4-c525b1b1-77fa-4d0d-be43-1f8edc959518",
		"88441075-1da1-4d60-b70b-8df973612076": "src/main/menu.ts",
		"1b8acd8a-02ba-47ca-aee8-f266c57ad434": "src/renderer/src/edlStore.ts",
		"f226c949-d4c7-485f-b4eb-e546741be2a5": "src/main/menu.ts-simstep-b7677740-8ec1-460b-b648-5065f58d5814",
		"2bdb996a-2731-4e68-a183-dd506755e3ce": "src/renderer/src/App.tsx-simstep-1a71a446-0c7e-4e89-84e0-bb9ef8030a65",
		"7b24d2f4-3213-4d7c-9f01-ef7b72fe82f0": "src/renderer/src/edlStore.ts-simstep-27acfa9c-8b4a-474c-9a67-65c54258a91c",
		"be29d953-3985-4df3-9f6c-37da6c0e41b1": "src/renderer/src/edlStore.ts-simstep-15839cff-a4a2-4b10-8de2-ec2f3ad75503",
		"225d123a-bc45-44e8-bb44-673edb5795a4": "src/renderer/src/App.tsx-simstep-020f8726-672b-4147-9e00-b722c8bfb78f",
		"727b8c8c-58dc-4afe-b58d-3f9353a2b7b2": "src/main/menu.ts-simstep-499f449b-956f-4be9-b7d9-f611f4750a84",
		"0c38615e-6206-4a35-92ad-c62a2e7f27da": "src/renderer/src/App.tsx-simstep-c6840a3d-b648-42b9-b673-fa4a46179cb1",
		"00a94233-ad22-4fec-8857-99100b2b649b": "src/renderer/src/edlStore.ts-simstep-0d68eab0-569a-436b-a6a2-640441e8056a",
		"d2b8473f-effc-48b4-8142-d38464f9356f": "generated-edge-simstep-1338e875-9c9b-4399-8a2a-eb593eb055e0-d2b8473f-effc-48b4-8142-d38464f9356f",
		"2eb46cce-ba00-46d0-b8c4-43b0b67eccc0": "generated-edge-simstep-028e1164-45a0-444c-a889-c6aa5219f1f8-2eb46cce-ba00-46d0-b8c4-43b0b67eccc0",
		"3e0bf562-cb0e-4be0-ad61-2b2f184262fe": "generated-edge-simstep-c4322fec-7be5-4029-a38e-15072a7d0f73-3e0bf562-cb0e-4be0-ad61-2b2f184262fe",
		"baa9176e-ded0-4b7c-8ce4-c05034a9727b": "generated-edge-simstep-b2551fa8-7f60-4ef8-a571-d713234c9f4a-baa9176e-ded0-4b7c-8ce4-c05034a9727b",
		"97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3": "generated-edge-simstep-83d95334-2525-4424-a2e2-f31f50b358e6-97ae1cd9-3b9e-40a2-8838-62e31f3ef4c3",
		"cd479a18-4a0b-4a36-9fdf-86022c51af95": "generated-edge-simstep-64758056-30ed-4b3b-9cab-93d57fa3e957-cd479a18-4a0b-4a36-9fdf-86022c51af95",
		"3666644f-70f0-4d61-a6c4-3f04fbe82b6f": "src/renderer/src/hooks/useFrameCapture.ts",
		"c23fca9d-c10f-4e24-9ced-de9d5eee58d9": "src/renderer/src/BottomBar.tsx-simstep-c97e68f0-0cd5-40d5-bedf-e779622836b6",
		"d68dc56e-889b-4561-9fc1-e99a6021a319": "src/renderer/src/App.tsx-simstep-28059b2c-b3f8-4b92-82e7-1d8879c55f09",
		"d3c9b1ae-73af-49f2-a0f6-673773181c91": "src/renderer/src/hooks/useFrameCapture.ts-simstep-9db0ec9c-e70b-4f87-a85d-321abbf43227",
		"355896d6-b122-453e-a959-b3825b27c934": "src/main/ffmpeg.ts-simstep-9f118488-adc2-46d2-b279-12564ac743a2",
		"9a6c8558-5daa-4186-a0cb-b13ec4424fbc": "src/renderer/src/App.tsx-simstep-278bc31d-7961-4913-8728-2b35dfeadd27",
		"4bef1ab4-2470-4955-8dd2-c8ef303e7124": "src/renderer/src/App.tsx-simstep-9b505063-8546-40e5-bb5d-0c098095b5bf",
		"26da0a67-3056-4154-a102-2fd37b64c61a": "src/renderer/src/App.tsx-simstep-39ed852a-5463-48d3-b73d-596fa4f17d22",
		"c3388f52-2738-4905-8085-13f55cabb2a3": "src/renderer/src/App.tsx-simstep-2c7384a6-3fdb-4bd1-abb4-f559c7cbf824",
		"5d7e3f1a-697b-4911-bbfa-9eac6bb13c0a": "src/renderer/src/hooks/useFrameCapture.ts-simstep-2c98d1f4-66d6-4149-8964-5968ecc6097b",
		"4958b3cf-a2cf-4e24-af1c-3f78fe975746": "src/main/ffmpeg.ts-simstep-c4d240da-55bd-4a5c-8344-4805b4de5ee7",
		"e25db789-2b90-4824-b73c-cb6a6bdd4bfa": "src/renderer/src/App.tsx-simstep-6d52d5b1-94cd-4262-8998-f2e84172d5a5",
		"6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7": "generated-edge-simstep-e6dc0bb2-9046-4334-b70f-065599b44772-6f954eb0-7a94-48fd-93f4-91c5fe9b2fc7",
		"5841034e-45b2-4ee6-af45-7d7f390c06e7": "generated-edge-simstep-b377828c-8930-4b31-9183-37b94cc8c0a8-5841034e-45b2-4ee6-af45-7d7f390c06e7",
		"baf259ae-76aa-4895-a750-b7e4943aaaa3": "generated-edge-simstep-3ecb3e11-c684-4fa2-a41c-ffdc4efa9370-baf259ae-76aa-4895-a750-b7e4943aaaa3",
		"5e8fde55-8214-461e-8a76-9aadacaff96f": "generated-edge-simstep-ca202a6b-9022-4f5a-a733-571d8a807494-5e8fde55-8214-461e-8a76-9aadacaff96f",
		"7ca81a36-2cdf-456d-886c-a32ea58da381": "generated-edge-simstep-43fc8b41-3b87-4b11-b61c-9d268bdfeba0-7ca81a36-2cdf-456d-886c-a32ea58da381",
		"3ca18d9f-fb09-4315-9b64-2a8217d4098d": "generated-edge-simstep-896c1633-2514-4966-b9c6-0c32a3bceed0-3ca18d9f-fb09-4315-9b64-2a8217d4098d",
		"b863bc5a-f6fe-4fae-9fed-437787d1af42": "generated-edge-simstep-7e4a30d1-4838-4cb3-85eb-830fe21626c3-b863bc5a-f6fe-4fae-9fed-437787d1af42",
		"bc515cef-c6e2-4c94-8f71-b183650d2eb7": "generated-edge-simstep-065146a1-9434-4a5d-a458-7e641b56c726-bc515cef-c6e2-4c94-8f71-b183650d2eb7",
		"fc91e5d8-7045-4d32-999e-bd0c8f60d8ee": "generated-edge-simstep-c534e644-c494-439a-b91c-00acb9450a00-fc91e5d8-7045-4d32-999e-bd0c8f60d8ee",
		"41413e7c-1736-4001-9e7b-37ea7d0fe577": "src/renderer/src/hooks/useSegments.ts-simstep-4e3478a8-6bfe-4668-9c60-2538ac5f4cac",
		"6a1b8dca-200e-4b16-8a50-7db1abca439b": "src/renderer/src/hooks/useSegments.ts-simstep-858f05be-34c9-4465-ad5a-ae1308c8014b",
		"2a3dd178-2a1b-4ae1-925f-6216f968c240": "src/main/ffmpeg.ts-simstep-fdc1105b-5396-4625-8593-2de2a5607002",
		"fe613999-b8b1-476f-bf64-9ec8130e2387": "src/renderer/src/hooks/useSegments.ts-simstep-34148250-afcc-4adc-a830-e3175227167d",
		"6c78fb42-5ea8-4258-83ba-1757da0ae75d": "src/renderer/src/hooks/useSegments.ts-simstep-f300aea7-2079-46a7-abc1-a74eb9390556",
		"5a1c35ad-4304-44fb-aeaf-a7298e78dad6": "src/renderer/src/hooks/useSegments.ts-simstep-b02a0c20-a7f6-4048-97ae-30904f1a4b83",
		"2d2d7b1e-3944-4360-9a12-ba0c64d82108": "src/main/ffmpeg.ts-simstep-46dad3a4-09c5-458f-8c88-f7c4814b795d",
		"fbc5bf71-7717-4ec3-8b17-f65b0878b5ec": "src/renderer/src/hooks/useSegments.ts-simstep-e99b1e8e-c558-4b50-96ab-d4a823cbb10f",
		"75b73a32-5957-4815-95e0-67ad7f038911": "src/renderer/src/hooks/useSegments.ts-simstep-c180e610-6995-4d50-a703-ec902e67d614",
		"f8df9560-03ba-4124-aa05-6ed2be191d38": "src/renderer/src/hooks/useSegments.ts-simstep-83387023-e9d3-49a8-9d44-0d14014dbc26",
		"b8c56860-e6c1-4420-b4a8-f4abeba736fb": "src/main/ffmpeg.ts-simstep-363ee372-3f9f-43d0-acda-51e465492ed8",
		"db988787-3f20-44e9-ae64-c706ac1070da": "src/renderer/src/hooks/useSegments.ts-simstep-70193180-ff87-4d61-9b5a-0d547abaa93e",
		"2713c463-fc15-4764-acdd-e4d851593016": "generated-edge-simstep-7b7e6a7f-c99d-4a9f-9e6f-11d98f6182f4-2713c463-fc15-4764-acdd-e4d851593016",
		"780d8f1a-5abc-4225-bdee-24d239c58421": "generated-edge-simstep-4a349c48-fa90-4151-8cd3-ecd16c4077aa-780d8f1a-5abc-4225-bdee-24d239c58421",
		"68d289d9-a97b-48fe-b0ac-1ee5bf09b417": "generated-edge-simstep-4e6df59c-398d-445d-97ab-3f99213ed140-68d289d9-a97b-48fe-b0ac-1ee5bf09b417",
		"db5280dd-daf5-4bbd-8e48-4f80bacec604": "generated-edge-simstep-3c4303ea-133d-4ae1-a684-967f02f6782c-db5280dd-daf5-4bbd-8e48-4f80bacec604",
		"7ce78810-2070-4baa-bf4a-30046236415a": "generated-edge-simstep-ac039e3f-4fc3-4a3c-991b-afc9accc3d8a-7ce78810-2070-4baa-bf4a-30046236415a",
		"a66ee729-62e3-4105-8194-5d2cea5184a2": "generated-edge-simstep-7c5463b4-716b-43db-9c36-61cd29e84fcb-a66ee729-62e3-4105-8194-5d2cea5184a2",
		"7ed7867b-9cae-41e4-92ac-02414b6f1207": "generated-edge-simstep-09c731c3-1c4f-4043-b5ed-bc42e48cf350-7ed7867b-9cae-41e4-92ac-02414b6f1207",
		"568ede75-20ab-45af-abdf-2785d97c42f7": "generated-edge-simstep-2fa08b1e-c7e0-4324-a9e9-2e6a688d46f8-568ede75-20ab-45af-abdf-2785d97c42f7",
		"7a19e285-3872-49ff-985a-7fa395fb31c9": "generated-edge-simstep-6a8353a9-37ee-4746-83eb-2e4d3d3a0b86-7a19e285-3872-49ff-985a-7fa395fb31c9",
		"c38c2bea-da32-4ee2-b8bb-b76853988ffa": "src/renderer/src/components/TagEditor.tsx",
		"e8445cce-fa78-4751-aa5d-584945624b4d": "src/renderer/src/BottomBar.tsx-simstep-dd747ef9-736f-4615-8b5e-e4792bcfa06b",
		"380a86e3-1f7e-416d-a639-4e59df16ba0c": "src/renderer/src/App.tsx-simstep-5f285d87-87e1-44c6-850c-31f2b8e93d3c",
		"08b2baa6-e91e-4e6c-b2f5-7d8936d5cdec": "src/renderer/src/StreamsSelector.tsx-simstep-ccc072ad-de56-4778-93da-5e63173b659d",
		"f170bee2-f9ec-4f08-880b-178aa8120a74": "src/renderer/src/components/TagEditor.tsx-simstep-948204b8-b1e9-49af-b47a-2d281a967aee",
		"7a54e3ae-30b8-4237-87ac-e8bc9635f5d7": "src/renderer/src/App.tsx-simstep-6bfd2a9b-e07b-4406-9d07-c73bf0520b3d",
		"eb55337f-1579-418c-aed2-84fa3123d894": "src/renderer/src/App.tsx-simstep-66bcd865-02d6-4ae0-ac5f-675e26038018",
		"cefc02f7-41cc-4cdf-9767-f454f9b582db": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-c0094ec7-6b75-431b-832a-fcb57ce2ff15",
		"60cef2c2-65c3-49cd-91f2-262ded0acb15": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-6a1d34e9-e7d3-471c-b8e2-869676930d30",
		"b3d8793b-861a-4074-8153-b6a3972019dc": "generated-edge-simstep-e2e44506-d397-4f68-962a-48cc3bf6b272-b3d8793b-861a-4074-8153-b6a3972019dc",
		"c16690b1-1e5e-49a9-9c1d-17d465e09fbf": "generated-edge-simstep-27f6cc77-8798-4fc3-8fed-2b86643a5c3c-c16690b1-1e5e-49a9-9c1d-17d465e09fbf",
		"b93232b3-d14c-4b9e-b760-8eb449542914": "generated-edge-simstep-279254d9-ff43-4c22-ab57-93be1228102f-b93232b3-d14c-4b9e-b760-8eb449542914",
		"b64c5174-9951-4b25-8ad7-8f08ac7ea7bf": "generated-edge-simstep-bd929234-7704-47ae-af5a-4c1e17bdf2d3-b64c5174-9951-4b25-8ad7-8f08ac7ea7bf",
		"ff5c4aea-4ad5-4a18-805f-e5d07fceaece": "generated-edge-simstep-fc6f9e6e-81e5-44af-95dd-ee47b49860d5-ff5c4aea-4ad5-4a18-805f-e5d07fceaece",
		"0ac852af-dc55-46c3-9f97-f147ea451c76": "generated-edge-simstep-c8878685-7061-4233-9b95-98287692b6ee-0ac852af-dc55-46c3-9f97-f147ea451c76",
		"7b4e62b2-52a7-4618-9233-ac1763e094c9": "generated-edge-simstep-20ba9511-9af7-4b45-ab5c-6bac36cb660c-7b4e62b2-52a7-4618-9233-ac1763e094c9",
		"a294a0f8-b3f5-458b-9bcd-9ebaa70ed08e": "src/renderer/src/smartcut.ts",
		"96a6f128-de66-457a-8146-b54529f206ae": "src/renderer/src/components/ExportConfirm.tsx",
		"2fa9f2eb-2f9c-4a2a-9e5f-3e1d3663eb56": "src/renderer/src/components/ExportConfirm.tsx-simstep-e81559ca-edcf-4b1e-9b94-aead55c01a3c",
		"c0a21570-3a1e-4aaf-b1ab-935bc7b1e5b8": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-2f1b29a0-1fd1-4d75-b295-d1355083b96b",
		"ed27f5ba-4434-4ebc-aa70-8c7d6b31c921": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3dcf5bf-87cc-4610-a028-2fb93dfc4faa",
		"a1f5638d-5af6-493e-90b7-8edf75d04a29": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f3312e3-152d-490c-841d-90b7dc8adede",
		"418438aa-030f-499a-8cf7-aa4eef5d5720": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b3ab9bfc-c3c6-4236-bfb2-9e46c0e6b477",
		"ad450f9e-a81b-46dd-b383-68ad571496e0": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-b54019e6-5e85-4c06-b937-223c798c9862",
		"a8ab075a-f680-41b6-80f3-82912c45325f": "generated-edge-simstep-eab3939c-6342-467f-9f4c-1ff9611ece6a-a8ab075a-f680-41b6-80f3-82912c45325f",
		"f8abec73-89d8-4dc9-98ba-f7e88dba81e1": "generated-edge-simstep-26d89800-20e8-4bc4-9490-e4897d95d936-f8abec73-89d8-4dc9-98ba-f7e88dba81e1",
		"04c12e78-a09b-441e-9662-ee28da381bb5": "generated-edge-simstep-d0978219-adf5-4a19-a6a7-19d099d59c74-04c12e78-a09b-441e-9662-ee28da381bb5",
		"5226167c-b75d-459f-b9dc-90316302ce10": "generated-edge-simstep-a9c97069-9d88-43f3-80d9-616a419ee75c-5226167c-b75d-459f-b9dc-90316302ce10",
		"328f35ce-0a59-4809-a562-e0d798d75254": "generated-edge-simstep-a430e6e3-eca5-4109-8a48-c34c6d3ddb8c-328f35ce-0a59-4809-a562-e0d798d75254",
		"74ae1197-e77d-4830-b68a-b20cdcf7d997": "src/renderer/src/Timeline.tsx",
		"3cb3c35e-0ea8-4403-b0c4-70370f31884b": "src/renderer/src/hooks/useThumbnails.ts",
		"54170fc0-5715-465e-8182-cedb89b69a8e": "src/renderer/src/hooks/useTimelineScroll.ts",
		"78d96f28-f575-478d-b45b-f695a1c15aee": "src/renderer/src/App.tsx-simstep-858293d4-0a8e-4695-b475-e6559f0881b1",
		"4244ba21-c22a-4d0f-9daa-e2e3d3277174": "src/main/ffmpeg.ts-simstep-2d0570f4-1fa8-423f-b260-ccafedf532cd",
		"839743e8-ed3f-4102-8753-9109c7276157": "src/renderer/src/hooks/useThumbnails.ts-simstep-c14eeaae-961a-4675-b5f5-b21f2623971f",
		"33f7866b-3caa-4089-b5d1-99bebc4086b1": "src/renderer/src/Timeline.tsx-simstep-b2c38fa4-8c3a-4a48-b8f6-d3f85c3af555",
		"570aa79f-429c-44d8-bf13-63d478a792e4": "src/renderer/src/hooks/useTimelineScroll.ts-simstep-ef93fb74-5535-42ff-9af3-0fa679df634d",
		"b9382cb9-ac82-4566-b618-c20ee15abd72": "src/renderer/src/Timeline.tsx-simstep-1ce92ba9-2623-4e03-bdd1-3c3cd9d78086",
		"75221063-4f72-499a-a2a6-edf625d3a6e1": "src/renderer/src/Timeline.tsx-simstep-838a7ef2-7267-4c21-9196-d5bc1c06af30",
		"97c44006-65d8-458d-9aba-6b898eaa8373": "generated-edge-simstep-11988c6f-a657-4f01-a2a1-73f8fa869b01-97c44006-65d8-458d-9aba-6b898eaa8373",
		"48a137fd-8326-4e9a-bb8a-1da06f068560": "generated-edge-simstep-33112a96-2839-4c63-a961-f7d1f3b25286-48a137fd-8326-4e9a-bb8a-1da06f068560",
		"75867657-cb23-408a-8227-cd65d5ee6e9c": "generated-edge-simstep-893dbb26-00db-49f6-b834-785112b7b649-75867657-cb23-408a-8227-cd65d5ee6e9c",
		"f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54": "generated-edge-simstep-05391235-324f-4051-8af9-aea526fc99cc-f27fe55b-1c65-4f8a-bbfd-70f6a08f1d54",
		"e0f63a89-5164-4a64-bb15-de1d80d6315f": "generated-edge-simstep-a8b44ddd-002f-466d-8a9f-4fe2ff6f6d58-e0f63a89-5164-4a64-bb15-de1d80d6315f",
		"94de4282-fda9-4c1d-b6a9-7d3a8cfca33e": "generated-edge-simstep-46f336ab-b189-45e6-9943-dc52467d310f-94de4282-fda9-4c1d-b6a9-7d3a8cfca33e"
	}
}