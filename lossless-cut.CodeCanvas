{
	"drawioXML": "<mxfile>\n  <diagram id=\"qqkEZCO5CcE6cfCqwYVm\" name=\"Page-1\">\n    <mxGraphModel dx=\"1246\" dy=\"631\" grid=\"0\" gridSize=\"10\" guides=\"1\" tooltips=\"1\" connect=\"0\" arrows=\"1\" fold=\"1\" page=\"0\" pageScale=\"1\" pageWidth=\"850\" pageHeight=\"1100\" math=\"0\" shadow=\"0\">\n      <root>\n        <mxCell id=\"0\" />\n        <mxCell id=\"1\" parent=\"0\" />\n      </root>\n    </mxGraphModel>\n  </diagram>\n</mxfile>\n",
	"fileName": "lossless-cut.CodeCanvas",
	"fileURL": "github",
	"filePath": "lossless-cut.CodeCanvas",
	"repoData": {
		"src": {
			"path": "src",
			"fileName": "src",
			"cellName": "src",
			"cellId": "9e47606a-7a0a-45fa-b864-958d5c4456de",
			"visible": true,
			"children": [
				"src/renderer",
				"src/main"
			]
		},
		"src/main": {
			"path": "src/main",
			"fileName": "main",
			"cellName": "main",
			"cellId": "43240bc9-1e54-4eff-bb78-cb05ea072c7f",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de",
			"children": [
				"src/main/ffmpeg.ts",
				"src/main/menu.ts"
			]
		},
		"src/main/ffmpeg.ts": {
			"path": "src/main/ffmpeg.ts",
			"fileName": "ffmpeg.ts",
			"cellName": "ffmpeg.ts",
			"cellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"visible": true,
			"parentCellId": "43240bc9-1e54-4eff-bb78-cb05ea072c7f",
			"children": [
				"src/main/ffmpeg.ts-simstep-a9095163-9dec-4c57-8605-e71d2c08043b",
				"src/main/ffmpeg.ts-simstep-388c02fa-079a-475b-8ac4-c4723da308f2",
				"src/main/ffmpeg.ts-simstep-d9c31e85-47d1-4d7e-a4bd-4bc51417cc8d",
				"src/main/ffmpeg.ts-simstep-0bac87ea-95e9-4b90-b96a-d610a64c1fad",
				"src/main/ffmpeg.ts-simstep-18233949-03d9-416d-9f03-60d3458ac1ed",
				"src/main/ffmpeg.ts-simstep-2f1972b9-2423-4435-ab4d-9e7f6f0feb07",
				"src/main/ffmpeg.ts-simstep-9805d75f-b533-4ea9-b818-6a76d9d711c6",
				"src/main/ffmpeg.ts-simstep-b43e3810-6711-4961-9ce9-1e9be832eaa1",
				"src/main/ffmpeg.ts-simstep-774494bf-6b3a-4d1e-9195-a7e8cc4b2fdb"
			]
		},
		"src/main/menu.ts": {
			"path": "src/main/menu.ts",
			"fileName": "menu.ts",
			"cellName": "menu.ts",
			"cellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"visible": true,
			"parentCellId": "43240bc9-1e54-4eff-bb78-cb05ea072c7f",
			"children": [
				"src/main/menu.ts-simstep-26c53604-1eca-405f-b344-7247b1c3a178",
				"src/main/menu.ts-simstep-680e5937-fe58-4e7e-a8fc-9dc5f587d868",
				"src/main/menu.ts-simstep-ea2fa0b3-d112-4d0f-ae15-13f78ea94830",
				"src/main/menu.ts-simstep-b992da02-5f62-4aaa-93a1-a3e35463a5ef",
				"src/main/menu.ts-simstep-cf6724c3-63f2-4fea-9f76-0d246ed4091d",
				"src/main/menu.ts-simstep-1c93d318-c5b8-40b2-915f-dd98944b456f",
				"src/main/menu.ts-simstep-3a9a7494-d01b-42bc-9552-e8bb2072f113"
			]
		},
		"src/renderer": {
			"path": "src/renderer",
			"fileName": "renderer",
			"cellName": "renderer",
			"cellId": "75bf21f9-b842-493a-ba3d-d99e4b2dd8dc",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de",
			"children": [
				"src/renderer/src"
			]
		},
		"src/renderer/src": {
			"path": "src/renderer/src",
			"fileName": "src",
			"cellName": "src",
			"cellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"visible": true,
			"parentCellId": "75bf21f9-b842-493a-ba3d-d99e4b2dd8dc",
			"children": [
				"src/renderer/src/hooks",
				"src/renderer/src/App.tsx",
				"src/renderer/src/ffmpeg.ts",
				"src/renderer/src/StreamsSelector.tsx",
				"src/renderer/src/util",
				"src/renderer/src/BottomBar.tsx",
				"src/renderer/src/components",
				"src/renderer/src/SegmentList.tsx",
				"src/renderer/src/segments.ts",
				"src/renderer/src/edlStore.ts"
			]
		},
		"src/renderer/src/App.tsx": {
			"path": "src/renderer/src/App.tsx",
			"fileName": "App.tsx",
			"cellName": "App.tsx",
			"cellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/App.tsx-simstep-bca0c8ab-c2ac-4cd3-a0ad-c8e55727258e",
				"src/renderer/src/App.tsx-simstep-deb3c08a-c37d-41bc-92ed-d97f83603e78",
				"src/renderer/src/App.tsx-simstep-5b7e48ec-d0fb-4305-b15b-526f0eaeebc7",
				"src/renderer/src/App.tsx-simstep-11ef14e0-36d1-4dfa-8d65-a246038bd1bf",
				"src/renderer/src/App.tsx-simstep-39625942-cb71-4c63-948e-0c9a68e56fa1",
				"src/renderer/src/App.tsx-simstep-9379f763-53c4-4b9e-ba0c-8e5f5db89366",
				"src/renderer/src/App.tsx-simstep-fc061249-6b6f-4196-a9d4-595f577cd82e",
				"src/renderer/src/App.tsx-simstep-1cc20ae2-5be8-4f91-9481-fdb868005a1d",
				"src/renderer/src/App.tsx-simstep-bcff4228-214e-422e-9be0-201c7d339f01",
				"src/renderer/src/App.tsx-simstep-76bf2bfe-811d-435e-b652-effbf655e284",
				"src/renderer/src/App.tsx-simstep-065941a3-b019-496a-975b-7beb4523ad52",
				"src/renderer/src/App.tsx-simstep-5dd7b86f-1c8c-45cf-b370-a3b8428b44a2",
				"src/renderer/src/App.tsx-simstep-23944648-dcd8-4b6e-80cc-1d61b4f4a4c9",
				"src/renderer/src/App.tsx-simstep-e92d2625-3d6b-45ca-8adc-016d9e421fdd",
				"src/renderer/src/App.tsx-simstep-5386d1a0-fb0d-422a-b1bc-f1509fbe85cd",
				"src/renderer/src/App.tsx-simstep-ecc368c7-1378-4eab-a98b-f42a0cfef1d9",
				"src/renderer/src/App.tsx-simstep-9d4ffd66-54f5-4ba1-91eb-61e3a18cf945",
				"src/renderer/src/App.tsx-simstep-135656a2-a458-49f3-993c-c810e9de3e9a",
				"src/renderer/src/App.tsx-simstep-4c52212b-5544-44fa-bb86-bf636c6ed96d",
				"src/renderer/src/App.tsx-simstep-1ca4cb05-7428-4d6c-9fb6-fd4805b4f3a5",
				"src/renderer/src/App.tsx-simstep-cae15d6b-d7e1-4b5e-9ce7-dae4e42a933c",
				"src/renderer/src/App.tsx-simstep-9dad773b-01f8-4039-b042-6bb40d40fc14",
				"src/renderer/src/App.tsx-simstep-ae533980-ab84-4bcb-92a7-640e50e8cf0a",
				"src/renderer/src/App.tsx-simstep-7302041e-2d68-4e62-94fc-1f7c30c44473",
				"src/renderer/src/App.tsx-simstep-a44aee87-4ac5-42e0-884b-9b0b9b3dca1d"
			]
		},
		"src/renderer/src/BottomBar.tsx": {
			"path": "src/renderer/src/BottomBar.tsx",
			"fileName": "BottomBar.tsx",
			"cellName": "BottomBar.tsx",
			"cellId": "303e5960-78cc-4b4b-b8cd-8620d732bbe4",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/BottomBar.tsx-simstep-4386839b-4f53-4009-82f0-4914a3e89685",
				"src/renderer/src/BottomBar.tsx-simstep-e58c04f1-c16f-4de0-adfd-157073daad81"
			]
		},
		"src/renderer/src/SegmentList.tsx": {
			"path": "src/renderer/src/SegmentList.tsx",
			"fileName": "SegmentList.tsx",
			"cellName": "SegmentList.tsx",
			"cellId": "401d252b-6861-45cd-add9-b3a56ebaaea7",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/SegmentList.tsx-simstep-51045728-84e1-4a42-bb63-5d923c75bc35"
			]
		},
		"src/renderer/src/StreamsSelector.tsx": {
			"path": "src/renderer/src/StreamsSelector.tsx",
			"fileName": "StreamsSelector.tsx",
			"cellName": "StreamsSelector.tsx",
			"cellId": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/StreamsSelector.tsx-simstep-c64bdeee-7fa8-4792-8f43-8799ed38001f",
				"src/renderer/src/StreamsSelector.tsx-simstep-345f35f1-0bd9-4516-a0b1-87fa6e143c75"
			]
		},
		"src/renderer/src/components": {
			"path": "src/renderer/src/components",
			"fileName": "components",
			"cellName": "components",
			"cellId": "db2f0701-b8c1-4448-96bd-4e1f0ad45724",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/components/ExportConfirm.tsx",
				"src/renderer/src/components/OutputFormatSelect.tsx"
			]
		},
		"src/renderer/src/components/ExportConfirm.tsx": {
			"path": "src/renderer/src/components/ExportConfirm.tsx",
			"fileName": "ExportConfirm.tsx",
			"cellName": "ExportConfirm.tsx",
			"cellId": "622ee659-0f7a-47e2-a1e3-b886f6c699ef",
			"visible": true,
			"parentCellId": "db2f0701-b8c1-4448-96bd-4e1f0ad45724",
			"children": [
				"src/renderer/src/components/ExportConfirm.tsx-simstep-019434c8-55dc-4693-9300-a6c379d2e4eb"
			]
		},
		"src/renderer/src/components/OutputFormatSelect.tsx": {
			"path": "src/renderer/src/components/OutputFormatSelect.tsx",
			"fileName": "OutputFormatSelect.tsx",
			"cellName": "OutputFormatSelect.tsx",
			"cellId": "cfbd6f14-5221-4cd9-b617-51b8b7d80e60",
			"visible": true,
			"parentCellId": "db2f0701-b8c1-4448-96bd-4e1f0ad45724",
			"children": [
				"src/renderer/src/components/OutputFormatSelect.tsx-simstep-b1b71a21-474c-4cd9-87f8-8975b1904582"
			]
		},
		"src/renderer/src/edlStore.ts": {
			"path": "src/renderer/src/edlStore.ts",
			"fileName": "edlStore.ts",
			"cellName": "edlStore.ts",
			"cellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/edlStore.ts-simstep-969a4f98-3b9d-43d4-8e21-ec8bbd08879b",
				"src/renderer/src/edlStore.ts-simstep-e2fca9a3-8304-4d96-8390-3257aa11378f",
				"src/renderer/src/edlStore.ts-simstep-c60cb2ff-055f-459f-adb1-ede0e4696123",
				"src/renderer/src/edlStore.ts-simstep-e7014807-34fb-4755-b27e-f90f2250ddda"
			]
		},
		"src/renderer/src/ffmpeg.ts": {
			"path": "src/renderer/src/ffmpeg.ts",
			"fileName": "ffmpeg.ts",
			"cellName": "ffmpeg.ts",
			"cellId": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/ffmpeg.ts-simstep-38f172e4-ced8-481b-813a-c76509477df6",
				"src/renderer/src/ffmpeg.ts-simstep-95259c41-72c8-4d14-8495-0a4d68e5fe95"
			]
		},
		"src/renderer/src/hooks": {
			"path": "src/renderer/src/hooks",
			"fileName": "hooks",
			"cellName": "hooks",
			"cellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/hooks/useSegments.ts",
				"src/renderer/src/hooks/useFfmpegOperations.ts",
				"src/renderer/src/hooks/useUserSettingsRoot.ts",
				"src/renderer/src/hooks/useStreamsMeta.ts",
				"src/renderer/src/hooks/useFrameCapture.ts"
			]
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "useFfmpegOperations.ts",
			"cellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"children": [
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-ccd507b4-f01d-47f6-b292-7232995f9ffa",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f520a7e-d598-4e4f-995e-7df8140b043c",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3820262-64db-48d3-8db1-fb47a2af6882",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-8d81c5d3-dcf8-47bd-95bf-072d86d6b9b9",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1136c0a4-df1d-4983-90b4-4908537f7306",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0a3ff59b-e764-4e02-be90-fd3177beb027",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-d9b3a16a-3afd-4899-8092-4c717c3032b5",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-7c8ef42a-dca6-408c-9029-b503989aeb8c",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-4ba960e3-552e-40d2-b642-8635c2627854",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-969b5adc-831c-4636-89d1-588306adbd7c",
				"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-a5ae538c-f867-4f30-ada2-395c21e25f38"
			]
		},
		"src/renderer/src/hooks/useFrameCapture.ts": {
			"path": "src/renderer/src/hooks/useFrameCapture.ts",
			"fileName": "useFrameCapture.ts",
			"cellName": "useFrameCapture.ts",
			"cellId": "1a76ef04-7af8-4cb2-9337-178712a323f2",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"children": [
				"src/renderer/src/hooks/useFrameCapture.ts-simstep-3a983b21-6f92-4c33-80ff-19343105cef5"
			]
		},
		"src/renderer/src/hooks/useSegments.ts": {
			"path": "src/renderer/src/hooks/useSegments.ts",
			"fileName": "useSegments.ts",
			"cellName": "useSegments.ts",
			"cellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"children": [
				"src/renderer/src/hooks/useSegments.ts-simstep-0a1231d7-19a2-428c-a372-1d05b15e6d85",
				"src/renderer/src/hooks/useSegments.ts-simstep-c2cffb0f-4b1c-4a6d-b863-2fcd583517b9",
				"src/renderer/src/hooks/useSegments.ts-simstep-2760d630-6ee4-4414-ac35-581d5a948c7d",
				"src/renderer/src/hooks/useSegments.ts-simstep-dd3c39f7-e321-4b71-96b9-a28e28733aa2",
				"src/renderer/src/hooks/useSegments.ts-simstep-a9055e36-9d28-4a37-8712-612f76bc04bf",
				"src/renderer/src/hooks/useSegments.ts-simstep-60ab9f29-e8cf-411e-a4e5-323d9c17b727",
				"src/renderer/src/hooks/useSegments.ts-simstep-1cdea182-4b51-444e-a4b4-056fc80443ed",
				"src/renderer/src/hooks/useSegments.ts-simstep-c33d12c2-3be2-4b6e-92c2-d91da2671f38",
				"src/renderer/src/hooks/useSegments.ts-simstep-a6f0b3bd-e549-429d-bb9d-63e7e803bfc8",
				"src/renderer/src/hooks/useSegments.ts-simstep-3f2abab7-26b5-4cb6-89f5-0f45711999dd",
				"src/renderer/src/hooks/useSegments.ts-simstep-16f32b79-4285-44ec-ad28-f2604efffa04",
				"src/renderer/src/hooks/useSegments.ts-simstep-5c7764e5-4dca-4f31-a65f-b1a673566eb3",
				"src/renderer/src/hooks/useSegments.ts-simstep-797fc0c1-5508-455b-a075-6c9bbdfe99e2",
				"src/renderer/src/hooks/useSegments.ts-simstep-308cbc54-1373-4fcc-b1de-d73455e969ef"
			]
		},
		"src/renderer/src/hooks/useStreamsMeta.ts": {
			"path": "src/renderer/src/hooks/useStreamsMeta.ts",
			"fileName": "useStreamsMeta.ts",
			"cellName": "useStreamsMeta.ts",
			"cellId": "655e4239-eccc-40bc-8123-771c0a728dec",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"children": [
				"src/renderer/src/hooks/useStreamsMeta.ts-simstep-c12318bb-1a99-4298-bae1-649968b05634"
			]
		},
		"src/renderer/src/hooks/useUserSettingsRoot.ts": {
			"path": "src/renderer/src/hooks/useUserSettingsRoot.ts",
			"fileName": "useUserSettingsRoot.ts",
			"cellName": "useUserSettingsRoot.ts",
			"cellId": "f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"children": [
				"src/renderer/src/hooks/useUserSettingsRoot.ts-simstep-feb65bd4-132f-4672-b96c-e0ac16345b4b"
			]
		},
		"src/renderer/src/segments.ts": {
			"path": "src/renderer/src/segments.ts",
			"fileName": "segments.ts",
			"cellName": "segments.ts",
			"cellId": "40503c88-1408-4643-86ad-939bd7b97b8b",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/segments.ts-simstep-a2899f56-7bdf-457e-9290-8e751da70518"
			]
		},
		"src/renderer/src/util": {
			"path": "src/renderer/src/util",
			"fileName": "util",
			"cellName": "util",
			"cellId": "ef95feaa-c278-4a4d-8e03-80991d876ad5",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"children": [
				"src/renderer/src/util/streams.ts"
			]
		},
		"src/renderer/src/util/streams.ts": {
			"path": "src/renderer/src/util/streams.ts",
			"fileName": "streams.ts",
			"cellName": "streams.ts",
			"cellId": "9193cfa0-a23a-4d43-8080-94cd59847966",
			"visible": true,
			"parentCellId": "ef95feaa-c278-4a4d-8e03-80991d876ad5",
			"children": [
				"src/renderer/src/util/streams.ts-simstep-77c79d7f-d105-40b0-8b7b-09c4638e7b09",
				"src/renderer/src/util/streams.ts-simstep-5bf2d9d1-75c5-49b2-bdd0-a83c1993d35a"
			]
		},
		"9e47606a-7a0a-45fa-b864-958d5c4456de": {
			"path": "9e47606a-7a0a-45fa-b864-958d5c4456de",
			"cellName": "src",
			"cellId": "9e47606a-7a0a-45fa-b864-958d5c4456de",
			"visible": true
		},
		"75bf21f9-b842-493a-ba3d-d99e4b2dd8dc": {
			"path": "75bf21f9-b842-493a-ba3d-d99e4b2dd8dc",
			"cellName": "renderer",
			"cellId": "75bf21f9-b842-493a-ba3d-d99e4b2dd8dc",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"15585db2-26e7-426c-a156-3e7b1d7457b7": {
			"path": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"cellName": "src",
			"cellId": "15585db2-26e7-426c-a156-3e7b1d7457b7",
			"visible": true,
			"parentCellId": "75bf21f9-b842-493a-ba3d-d99e4b2dd8dc"
		},
		"02766735-5216-43f1-b63a-bd5d78863b62": {
			"path": "02766735-5216-43f1-b63a-bd5d78863b62",
			"cellName": "hooks",
			"cellId": "02766735-5216-43f1-b63a-bd5d78863b62",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"b022c6a8-4d58-41af-9a3c-6c157b2e89ac": {
			"path": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"cellName": "App.tsx",
			"cellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"f0a31c3e-73fe-43c5-b4f5-f4f6573c383b": {
			"path": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"cellName": "useSegments.ts",
			"cellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62"
		},
		"1926aeb9-327f-472c-829a-dfb694cb2e23": {
			"path": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"cellName": "useFfmpegOperations.ts",
			"cellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62"
		},
		"ffa60c76-4ac7-4f46-aeca-397cbd3c006c": {
			"path": "ffa60c76-4ac7-4f46-aeca-397cbd3c006c",
			"cellName": "Segment Definition: Set Cut Start Point - useSegments.ts:L504-513",
			"cellId": "ffa60c76-4ac7-4f46-aeca-397cbd3c006c",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-0a1231d7-19a2-428c-a372-1d05b15e6d85": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-0a1231d7-19a2-428c-a372-1d05b15e6d85",
			"fileName": "useSegments.ts",
			"wiki": "The user presses the 'I' key, which is mapped to the `setCutStart` action via keyboard shortcuts. This function captures the current video playback time from the player to be used as the starting point for the current cut segment.",
			"cellName": "Segment Definition: Set Cut Start Point - useSegments.ts:L504-513",
			"cellId": "ffa60c76-4ac7-4f46-aeca-397cbd3c006c",
			"visible": true,
			"startLine": 504,
			"endLine": 513,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"d54a7429-9bd1-47a2-8272-3e258dc968b1": {
			"path": "d54a7429-9bd1-47a2-8272-3e258dc968b1",
			"cellName": "Segment Definition: Update Segment State with Start Time - useSegments.ts:L359-370",
			"cellId": "d54a7429-9bd1-47a2-8272-3e258dc968b1",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-c2cffb0f-4b1c-4a6d-b863-2fcd583517b9": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-c2cffb0f-4b1c-4a6d-b863-2fcd583517b9",
			"fileName": "useSegments.ts",
			"wiki": "The `setCutTime` function modifies the `cutSegments` state array. It finds the current segment and updates its `start` property. This state change causes the UI to re-render, visually marking the new start point on the timeline.",
			"cellName": "Segment Definition: Update Segment State with Start Time - useSegments.ts:L359-370",
			"cellId": "d54a7429-9bd1-47a2-8272-3e258dc968b1",
			"visible": true,
			"startLine": 359,
			"endLine": 370,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0": {
			"path": "2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0",
			"cellName": "Segment Definition: Set Cut End Point - useSegments.ts:L515-524",
			"cellId": "2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-2760d630-6ee4-4414-ac35-581d5a948c7d": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-2760d630-6ee4-4414-ac35-581d5a948c7d",
			"fileName": "useSegments.ts",
			"wiki": "The user presses the 'O' key, triggering the `setCutEnd` action. This function captures the current playback time as the end point for the segment.",
			"cellName": "Segment Definition: Set Cut End Point - useSegments.ts:L515-524",
			"cellId": "2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0",
			"visible": true,
			"startLine": 515,
			"endLine": 524,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1": {
			"path": "e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1",
			"cellName": "Segment Definition: Finalize Segment State - useSegments.ts:L359-370",
			"cellId": "e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-dd3c39f7-e321-4b71-96b9-a28e28733aa2": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-dd3c39f7-e321-4b71-96b9-a28e28733aa2",
			"fileName": "useSegments.ts",
			"wiki": "The `setCutTime` function updates the `end` property of the current segment in the `cutSegments` state array. The segment is now fully defined with a start and end time. The UI re-renders to show the completed segment on the timeline.",
			"cellName": "Segment Definition: Finalize Segment State - useSegments.ts:L359-370",
			"cellId": "e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1",
			"visible": true,
			"startLine": 359,
			"endLine": 370,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"d243139b-b6fc-4e67-baf4-ba72dae06281": {
			"path": "d243139b-b6fc-4e67-baf4-ba72dae06281",
			"cellName": "Export: Process Segments for Cutting - useFfmpegOperations.ts:L648-649",
			"cellId": "d243139b-b6fc-4e67-baf4-ba72dae06281",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-ccd507b4-f01d-47f6-b292-7232995f9ffa": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-ccd507b4-f01d-47f6-b292-7232995f9ffa",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `losslessCut` function is invoked with the list of segments to export. It iterates over this list, preparing to process each segment individually.",
			"cellName": "Export: Process Segments for Cutting - useFfmpegOperations.ts:L648-649",
			"cellId": "d243139b-b6fc-4e67-baf4-ba72dae06281",
			"visible": true,
			"startLine": 648,
			"endLine": 649,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"8ce5bac9-a6ab-4c20-89ea-03af1e329cca": {
			"path": "8ce5bac9-a6ab-4c20-89ea-03af1e329cca",
			"cellName": "Export: Execute Lossless Cut FFmpeg Command - useFfmpegOperations.ts:L232-240",
			"cellId": "8ce5bac9-a6ab-4c20-89ea-03af1e329cca",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f520a7e-d598-4e4f-995e-7df8140b043c": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f520a7e-d598-4e4f-995e-7df8140b043c",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `losslessCutSingle` function assembles the final FFmpeg command-line arguments. Crucially, it uses `-c copy` to ensure a direct stream copy, which is lossless and fast. The assembled command is then executed.",
			"cellName": "Export: Execute Lossless Cut FFmpeg Command - useFfmpegOperations.ts:L232-240",
			"cellId": "8ce5bac9-a6ab-4c20-89ea-03af1e329cca",
			"visible": true,
			"startLine": 232,
			"endLine": 240,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"53558a9c-7b7a-4a98-94d8-c0522fdca137": {
			"path": "53558a9c-7b7a-4a98-94d8-c0522fdca137",
			"cellName": "Export: Finalize Operation - useFfmpegOperations.ts:L648-652",
			"cellId": "53558a9c-7b7a-4a98-94d8-c0522fdca137",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3820262-64db-48d3-8db1-fb47a2af6882": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3820262-64db-48d3-8db1-fb47a2af6882",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "After the FFmpeg process successfully completes for all segments, the `losslessCut` operation concludes. The user is typically notified of the successful export, and the trimmed files are now available on their disk.",
			"cellName": "Export: Finalize Operation - useFfmpegOperations.ts:L648-652",
			"cellId": "53558a9c-7b7a-4a98-94d8-c0522fdca137",
			"visible": true,
			"startLine": 648,
			"endLine": 652,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"496cc2c6-cdc9-4a27-8f82-338de5e88503": {
			"path": "496cc2c6-cdc9-4a27-8f82-338de5e88503",
			"cellName": "Segment Definition:\nTransmit Start\nTime to\nState",
			"cellId": "496cc2c6-cdc9-4a27-8f82-338de5e88503",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"generated-edge-simstep-126c0372-7315-4305-891e-4e72b3b324b7-496cc2c6-cdc9-4a27-8f82-338de5e88503": {
			"path": "generated-edge-simstep-126c0372-7315-4305-891e-4e72b3b324b7-496cc2c6-cdc9-4a27-8f82-338de5e88503",
			"fileName": "useSegments.ts",
			"cellName": "Segment Definition: Transmit Start Time to State",
			"cellId": "496cc2c6-cdc9-4a27-8f82-338de5e88503",
			"visible": true,
			"startLine": 512,
			"endLine": 512,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"dbe72f4c-c701-4e7d-9dd9-5bcdb311443d": {
			"path": "dbe72f4c-c701-4e7d-9dd9-5bcdb311443d",
			"cellName": "Segment Definition:\nUser Defines\nEnd Point",
			"cellId": "dbe72f4c-c701-4e7d-9dd9-5bcdb311443d",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"generated-edge-simstep-0075e42a-97ed-4b00-b7a4-f034b1000ea4-dbe72f4c-c701-4e7d-9dd9-5bcdb311443d": {
			"path": "generated-edge-simstep-0075e42a-97ed-4b00-b7a4-f034b1000ea4-dbe72f4c-c701-4e7d-9dd9-5bcdb311443d",
			"fileName": "useSegments.ts",
			"cellName": "Segment Definition: User Defines End Point",
			"cellId": "dbe72f4c-c701-4e7d-9dd9-5bcdb311443d",
			"visible": true,
			"startLine": 416,
			"endLine": 416,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"362f7281-ddeb-4542-aef8-bae73c5c9de4": {
			"path": "362f7281-ddeb-4542-aef8-bae73c5c9de4",
			"cellName": "Segment Definition:\nTransmit End\nTime to\nState",
			"cellId": "362f7281-ddeb-4542-aef8-bae73c5c9de4",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"generated-edge-simstep-8c1ce23d-d466-431a-81d2-41457b13d40b-362f7281-ddeb-4542-aef8-bae73c5c9de4": {
			"path": "generated-edge-simstep-8c1ce23d-d466-431a-81d2-41457b13d40b-362f7281-ddeb-4542-aef8-bae73c5c9de4",
			"fileName": "useSegments.ts",
			"cellName": "Segment Definition: Transmit End Time to State",
			"cellId": "362f7281-ddeb-4542-aef8-bae73c5c9de4",
			"visible": true,
			"startLine": 523,
			"endLine": 523,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"27c1c337-9a12-4c79-b2d9-46c6f9a70b51": {
			"path": "27c1c337-9a12-4c79-b2d9-46c6f9a70b51",
			"cellName": "Export: Prepare\nSegments for\nExport",
			"cellId": "27c1c337-9a12-4c79-b2d9-46c6f9a70b51",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62"
		},
		"generated-edge-simstep-6998d016-3a33-4c73-8d2c-3cc827700acc-27c1c337-9a12-4c79-b2d9-46c6f9a70b51": {
			"path": "generated-edge-simstep-6998d016-3a33-4c73-8d2c-3cc827700acc-27c1c337-9a12-4c79-b2d9-46c6f9a70b51",
			"fileName": "useSegments.ts",
			"cellName": "Export: Prepare Segments for Export",
			"cellId": "27c1c337-9a12-4c79-b2d9-46c6f9a70b51",
			"visible": true,
			"startLine": 775,
			"endLine": 786,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"782aef27-9591-420e-b31d-6178c46a6d53": {
			"path": "782aef27-9591-420e-b31d-6178c46a6d53",
			"cellName": "Export: Pass\nSingle Segment\nto FFmpeg\nWrapper",
			"cellId": "782aef27-9591-420e-b31d-6178c46a6d53",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"generated-edge-simstep-3fa4964f-52db-455d-9bf2-0e2222e54cce-782aef27-9591-420e-b31d-6178c46a6d53": {
			"path": "generated-edge-simstep-3fa4964f-52db-455d-9bf2-0e2222e54cce-782aef27-9591-420e-b31d-6178c46a6d53",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Export: Pass Single Segment to FFmpeg Wrapper",
			"cellId": "782aef27-9591-420e-b31d-6178c46a6d53",
			"visible": true,
			"startLine": 543,
			"endLine": 546,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"1296f4b7-cc7c-4364-8a05-c668d32df1e2": {
			"path": "1296f4b7-cc7c-4364-8a05-c668d32df1e2",
			"cellName": "Export: Write\nTrimmed File\nto Disk",
			"cellId": "1296f4b7-cc7c-4364-8a05-c668d32df1e2",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"generated-edge-simstep-c3f3550a-edae-4059-bf4b-0f2c15a036b1-1296f4b7-cc7c-4364-8a05-c668d32df1e2": {
			"path": "generated-edge-simstep-c3f3550a-edae-4059-bf4b-0f2c15a036b1-1296f4b7-cc7c-4364-8a05-c668d32df1e2",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Export: Write Trimmed File to Disk",
			"cellId": "1296f4b7-cc7c-4364-8a05-c668d32df1e2",
			"visible": true,
			"startLine": 232,
			"endLine": 240,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"43240bc9-1e54-4eff-bb78-cb05ea072c7f": {
			"path": "43240bc9-1e54-4eff-bb78-cb05ea072c7f",
			"cellName": "main",
			"cellId": "43240bc9-1e54-4eff-bb78-cb05ea072c7f",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"a6ad9034-13b9-4b6c-9263-6ade6324aa5d": {
			"path": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"cellName": "ffmpeg.ts",
			"cellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"visible": true,
			"parentCellId": "43240bc9-1e54-4eff-bb78-cb05ea072c7f"
		},
		"84a6d915-e60b-4cd3-89ef-defe9dc05ec6": {
			"path": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6",
			"cellName": "ffmpeg.ts",
			"cellId": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54": {
			"path": "f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54",
			"cellName": "useUserSettingsRoot.ts",
			"cellId": "f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62"
		},
		"9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384": {
			"path": "9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384",
			"cellName": "User Enables Auto-Merge - useUserSettingsRoot.ts:L62-63",
			"cellId": "9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384",
			"visible": true,
			"parentCellId": "f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54"
		},
		"src/renderer/src/hooks/useUserSettingsRoot.ts-simstep-feb65bd4-132f-4672-b96c-e0ac16345b4b": {
			"path": "src/renderer/src/hooks/useUserSettingsRoot.ts-simstep-feb65bd4-132f-4672-b96c-e0ac16345b4b",
			"fileName": "useUserSettingsRoot.ts",
			"wiki": "The user enables the 'autoMerge' setting in the application's preferences. This state is managed by the `useUserSettingsRoot` hook, which initializes the value from the configuration store and provides a function to update it.",
			"cellName": "User Enables Auto-Merge - useUserSettingsRoot.ts:L62-63",
			"cellId": "9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384",
			"visible": true,
			"startLine": 62,
			"endLine": 63,
			"parentCellId": "f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54",
			"parentPath": "src/renderer/src/hooks/useUserSettingsRoot.ts"
		},
		"16fe3137-4ac0-4a86-abdb-adb46acd4600": {
			"path": "16fe3137-4ac0-4a86-abdb-adb46acd4600",
			"cellName": "User Initiates Export & Merge - App.tsx:L481-485",
			"cellId": "16fe3137-4ac0-4a86-abdb-adb46acd4600",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-bca0c8ab-c2ac-4cd3-a0ad-c8e55727258e": {
			"path": "src/renderer/src/App.tsx-simstep-bca0c8ab-c2ac-4cd3-a0ad-c8e55727258e",
			"fileName": "App.tsx",
			"wiki": "With multiple segments selected and 'autoMerge' enabled, the `effectiveExportMode` is determined to be 'merge'. Clicking the 'Export+merge' button triggers the export process.",
			"cellName": "User Initiates Export & Merge - App.tsx:L481-485",
			"cellId": "16fe3137-4ac0-4a86-abdb-adb46acd4600",
			"visible": true,
			"startLine": 481,
			"endLine": 485,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"f6d44dd5-8317-44d0-9a2a-5161a05e2146": {
			"path": "f6d44dd5-8317-44d0-9a2a-5161a05e2146",
			"cellName": "Prepare FFmpeg Concat Command - useFfmpegOperations.ts:L221-227",
			"cellId": "f6d44dd5-8317-44d0-9a2a-5161a05e2146",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-8d81c5d3-dcf8-47bd-95bf-072d86d6b9b9": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-8d81c5d3-dcf8-47bd-95bf-072d86d6b9b9",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `concatFiles` hook in `useFfmpegOperations` receives the list of segment file paths. It generates a text-based manifest (`concatTxt`) listing each file to be joined and constructs the necessary command-line arguments for FFmpeg's concat demuxer. It then calls `runFfmpegConcat` to execute the command.",
			"cellName": "Prepare FFmpeg Concat Command - useFfmpegOperations.ts:L221-227",
			"cellId": "f6d44dd5-8317-44d0-9a2a-5161a05e2146",
			"visible": true,
			"startLine": 221,
			"endLine": 227,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"2aef852e-62c7-4e79-956c-ec77bbca82a5": {
			"path": "2aef852e-62c7-4e79-956c-ec77bbca82a5",
			"cellName": "Execute FFmpeg Process - ffmpeg.ts:L137-145",
			"cellId": "2aef852e-62c7-4e79-956c-ec77bbca82a5",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-a9095163-9dec-4c57-8605-e71d2c08043b": {
			"path": "src/main/ffmpeg.ts-simstep-a9095163-9dec-4c57-8605-e71d2c08043b",
			"fileName": "ffmpeg.ts",
			"wiki": "In the main process, `runFfmpegConcat` spawns an FFmpeg child process with the provided arguments. The concat manifest, containing the list of files to merge, is piped to the FFmpeg process's standard input.",
			"cellName": "Execute FFmpeg Process - ffmpeg.ts:L137-145",
			"cellId": "2aef852e-62c7-4e79-956c-ec77bbca82a5",
			"visible": true,
			"startLine": 137,
			"endLine": 145,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"9da616a0-72d7-450a-9b46-806c1639f78b": {
			"path": "9da616a0-72d7-450a-9b46-806c1639f78b",
			"cellName": "Finalize Export and Cleanup - App.tsx:L986-989",
			"cellId": "9da616a0-72d7-450a-9b46-806c1639f78b",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-deb3c08a-c37d-41bc-92ed-d97f83603e78": {
			"path": "src/renderer/src/App.tsx-simstep-deb3c08a-c37d-41bc-92ed-d97f83603e78",
			"fileName": "App.tsx",
			"wiki": "Once the FFmpeg process completes successfully, the `finally` block in the `handleExport` function is executed. This resets the application's working state and progress indicators. If `autoDeleteMergedSegments` is enabled, a subsequent cleanup step deletes the temporary segment files.",
			"cellName": "Finalize Export and Cleanup - App.tsx:L986-989",
			"cellId": "9da616a0-72d7-450a-9b46-806c1639f78b",
			"visible": true,
			"startLine": 986,
			"endLine": 989,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"126f92df-39e0-4797-92e5-48708272feab": {
			"path": "126f92df-39e0-4797-92e5-48708272feab",
			"cellName": "Auto-Merge Setting\nPersisted",
			"cellId": "126f92df-39e0-4797-92e5-48708272feab",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-760c7a3f-a480-412f-82ee-1f7578fcbf46-126f92df-39e0-4797-92e5-48708272feab": {
			"path": "generated-edge-simstep-760c7a3f-a480-412f-82ee-1f7578fcbf46-126f92df-39e0-4797-92e5-48708272feab",
			"fileName": "useUserSettingsRoot.ts",
			"cellName": "Auto-Merge Setting Persisted",
			"cellId": "126f92df-39e0-4797-92e5-48708272feab",
			"visible": true,
			"startLine": 63,
			"endLine": 63,
			"parentPath": "src/renderer/src/hooks/useUserSettingsRoot.ts"
		},
		"5b9a2f0f-9268-4679-b404-f49c34a13fb3": {
			"path": "5b9a2f0f-9268-4679-b404-f49c34a13fb3",
			"cellName": "Pass Cut\nSegments for\nConcatenation",
			"cellId": "5b9a2f0f-9268-4679-b404-f49c34a13fb3",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-185d8535-c5e2-45b1-9eaa-504862599f0f-5b9a2f0f-9268-4679-b404-f49c34a13fb3": {
			"path": "generated-edge-simstep-185d8535-c5e2-45b1-9eaa-504862599f0f-5b9a2f0f-9268-4679-b404-f49c34a13fb3",
			"fileName": "App.tsx",
			"cellName": "Pass Cut Segments for Concatenation",
			"cellId": "5b9a2f0f-9268-4679-b404-f49c34a13fb3",
			"visible": true,
			"startLine": 944,
			"endLine": 944,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb": {
			"path": "d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb",
			"cellName": "Execute FFmpeg\nCommand in\nMain Process",
			"cellId": "d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-6a3c74df-cb51-4ef9-bd4c-fac82e008a13-d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb": {
			"path": "generated-edge-simstep-6a3c74df-cb51-4ef9-bd4c-fac82e008a13-d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Execute FFmpeg Command in Main Process",
			"cellId": "d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb",
			"visible": true,
			"startLine": 17,
			"endLine": 17,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"f901ad9d-a81a-408b-b7f0-41086cc2944c": {
			"path": "f901ad9d-a81a-408b-b7f0-41086cc2944c",
			"cellName": "FFmpeg Writes\nMerged File",
			"cellId": "f901ad9d-a81a-408b-b7f0-41086cc2944c",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-dde12cfe-67a8-40b0-9ab3-9f08a5de5836-f901ad9d-a81a-408b-b7f0-41086cc2944c": {
			"path": "generated-edge-simstep-dde12cfe-67a8-40b0-9ab3-9f08a5de5836-f901ad9d-a81a-408b-b7f0-41086cc2944c",
			"fileName": "ffmpeg.ts",
			"cellName": "FFmpeg Writes Merged File",
			"cellId": "f901ad9d-a81a-408b-b7f0-41086cc2944c",
			"visible": true,
			"startLine": 137,
			"endLine": 141,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"dd0042e3-3ceb-4717-bd51-c40f9e77a28f": {
			"path": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f",
			"cellName": "StreamsSelector.tsx",
			"cellId": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"ef95feaa-c278-4a4d-8e03-80991d876ad5": {
			"path": "ef95feaa-c278-4a4d-8e03-80991d876ad5",
			"cellName": "util",
			"cellId": "ef95feaa-c278-4a4d-8e03-80991d876ad5",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"655e4239-eccc-40bc-8123-771c0a728dec": {
			"path": "655e4239-eccc-40bc-8123-771c0a728dec",
			"cellName": "useStreamsMeta.ts",
			"cellId": "655e4239-eccc-40bc-8123-771c0a728dec",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62"
		},
		"9193cfa0-a23a-4d43-8080-94cd59847966": {
			"path": "9193cfa0-a23a-4d43-8080-94cd59847966",
			"cellName": "streams.ts",
			"cellId": "9193cfa0-a23a-4d43-8080-94cd59847966",
			"visible": true,
			"parentCellId": "ef95feaa-c278-4a4d-8e03-80991d876ad5"
		},
		"9969c0c5-4054-4f12-a222-e8350df1ad6e": {
			"path": "9969c0c5-4054-4f12-a222-e8350df1ad6e",
			"cellName": "Open Tracks Panel - App.tsx:L2768-2773",
			"cellId": "9969c0c5-4054-4f12-a222-e8350df1ad6e",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-5b7e48ec-d0fb-4305-b15b-526f0eaeebc7": {
			"path": "src/renderer/src/App.tsx-simstep-5b7e48ec-d0fb-4305-b15b-526f0eaeebc7",
			"fileName": "App.tsx",
			"wiki": "The user interacts with the UI to open the 'Tracks' panel. The `streamsSelectorShown` state in the main `App` component is set to true, which conditionally renders the `StreamsSelector` component.",
			"cellName": "Open Tracks Panel - App.tsx:L2768-2773",
			"cellId": "9969c0c5-4054-4f12-a222-e8350df1ad6e",
			"visible": true,
			"startLine": 2768,
			"endLine": 2773,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"0ba6ed80-a4fd-42df-90c3-cc8176642eb8": {
			"path": "0ba6ed80-a4fd-42df-90c3-cc8176642eb8",
			"cellName": "User Toggles a Stream - StreamsSelector.tsx:L359-367",
			"cellId": "0ba6ed80-a4fd-42df-90c3-cc8176642eb8",
			"visible": true,
			"parentCellId": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f"
		},
		"src/renderer/src/StreamsSelector.tsx-simstep-c64bdeee-7fa8-4792-8f43-8799ed38001f": {
			"path": "src/renderer/src/StreamsSelector.tsx-simstep-c64bdeee-7fa8-4792-8f43-8799ed38001f",
			"fileName": "StreamsSelector.tsx",
			"wiki": "Inside the `StreamsSelector` panel, the user clicks a checkbox to disable a specific audio track. This action triggers the `toggleCopyStreamId` callback function, which was passed down as a prop.",
			"cellName": "User Toggles a Stream - StreamsSelector.tsx:L359-367",
			"cellId": "0ba6ed80-a4fd-42df-90c3-cc8176642eb8",
			"visible": true,
			"startLine": 359,
			"endLine": 367,
			"parentCellId": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f",
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"2eab7be7-53cc-4437-9b96-94da3abd705b": {
			"path": "2eab7be7-53cc-4437-9b96-94da3abd705b",
			"cellName": "Update Stream Selection State - useStreamsMeta.ts:L47-51",
			"cellId": "2eab7be7-53cc-4437-9b96-94da3abd705b",
			"visible": true,
			"parentCellId": "655e4239-eccc-40bc-8123-771c0a728dec"
		},
		"src/renderer/src/hooks/useStreamsMeta.ts-simstep-c12318bb-1a99-4298-bae1-649968b05634": {
			"path": "src/renderer/src/hooks/useStreamsMeta.ts-simstep-c12318bb-1a99-4298-bae1-649968b05634",
			"fileName": "useStreamsMeta.ts",
			"wiki": "The `setCopyStreamIdsForPath` function updates the `copyStreamIdsByFile` state, flipping the boolean value for the specified stream index.",
			"cellName": "Update Stream Selection State - useStreamsMeta.ts:L47-51",
			"cellId": "2eab7be7-53cc-4437-9b96-94da3abd705b",
			"visible": true,
			"startLine": 47,
			"endLine": 51,
			"parentCellId": "655e4239-eccc-40bc-8123-771c0a728dec",
			"parentPath": "src/renderer/src/hooks/useStreamsMeta.ts"
		},
		"85b7829a-7f4e-431e-8a94-62a41a531379": {
			"path": "85b7829a-7f4e-431e-8a94-62a41a531379",
			"cellName": "Initiate Export - App.tsx:L1231-1239",
			"cellId": "85b7829a-7f4e-431e-8a94-62a41a531379",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-11ef14e0-36d1-4dfa-8d65-a246038bd1bf": {
			"path": "src/renderer/src/App.tsx-simstep-11ef14e0-36d1-4dfa-8d65-a246038bd1bf",
			"fileName": "App.tsx",
			"wiki": "The user clicks the 'Export' button. The `onExportPress` and subsequently `doExport` functions in `App.tsx` are called, which gather all necessary data for the export operation, including the newly updated `copyFileStreams`.",
			"cellName": "Initiate Export - App.tsx:L1231-1239",
			"cellId": "85b7829a-7f4e-431e-8a94-62a41a531379",
			"visible": true,
			"startLine": 1231,
			"endLine": 1239,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"1c063f91-eee2-43a0-845e-a121166254fd": {
			"path": "1c063f91-eee2-43a0-845e-a121166254fd",
			"cellName": "Prepare FFmpeg Stream Arguments - useFfmpegOperations.ts:L278",
			"cellId": "1c063f91-eee2-43a0-845e-a121166254fd",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1136c0a4-df1d-4983-90b4-4908537f7306": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1136c0a4-df1d-4983-90b4-4908537f7306",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "Inside the `losslessCutSingle` function (called by `cutMultiple`), the system prepares for generating the FFmpeg command. It retrieves the `copyFileStreams` and other metadata to pass to the argument generation utility.",
			"cellName": "Prepare FFmpeg Stream Arguments - useFfmpegOperations.ts:L278",
			"cellId": "1c063f91-eee2-43a0-845e-a121166254fd",
			"visible": true,
			"startLine": 278,
			"endLine": 278,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"a38cf32d-0682-4e44-b6ad-bb3856c0d159": {
			"path": "a38cf32d-0682-4e44-b6ad-bb3856c0d159",
			"cellName": "Generate FFmpeg `-map` Arguments - streams.ts:L212-218",
			"cellId": "a38cf32d-0682-4e44-b6ad-bb3856c0d159",
			"visible": true,
			"parentCellId": "9193cfa0-a23a-4d43-8080-94cd59847966"
		},
		"src/renderer/src/util/streams.ts-simstep-77c79d7f-d105-40b0-8b7b-09c4638e7b09": {
			"path": "src/renderer/src/util/streams.ts-simstep-77c79d7f-d105-40b0-8b7b-09c4638e7b09",
			"fileName": "streams.ts",
			"wiki": "The `getMapStreamsArgs` utility function iterates through the `copyFileStreams` array. For each stream ID, it generates the corresponding FFmpeg arguments, like `-map 0:0 -c:0 copy`, to instruct FFmpeg to copy that specific stream from the input file to the output file.",
			"cellName": "Generate FFmpeg `-map` Arguments - streams.ts:L212-218",
			"cellId": "a38cf32d-0682-4e44-b6ad-bb3856c0d159",
			"visible": true,
			"startLine": 212,
			"endLine": 218,
			"parentCellId": "9193cfa0-a23a-4d43-8080-94cd59847966",
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2": {
			"path": "64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2",
			"cellName": "Execute Final FFmpeg Command - useFfmpegOperations.ts:L388",
			"cellId": "64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0a3ff59b-e764-4e02-be90-fd3177beb027": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0a3ff59b-e764-4e02-be90-fd3177beb027",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `losslessCutSingle` function assembles the full FFmpeg command, incorporating the returned `mapStreamsArgs` along with other parameters like input/output paths and cutting times. This complete command is then executed to produce the final output file with only the user-selected tracks.",
			"cellName": "Execute Final FFmpeg Command - useFfmpegOperations.ts:L388",
			"cellId": "64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2",
			"visible": true,
			"startLine": 388,
			"endLine": 388,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"1e3dc50f-fa13-4c65-a29b-db356e608536": {
			"path": "1e3dc50f-fa13-4c65-a29b-db356e608536",
			"cellName": "Pass Data\nto StreamsSelector",
			"cellId": "1e3dc50f-fa13-4c65-a29b-db356e608536",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-4693fc19-47d4-48a2-b2ce-efeb14a09aeb-1e3dc50f-fa13-4c65-a29b-db356e608536": {
			"path": "generated-edge-simstep-4693fc19-47d4-48a2-b2ce-efeb14a09aeb-1e3dc50f-fa13-4c65-a29b-db356e608536",
			"fileName": "App.tsx",
			"cellName": "Pass Data to StreamsSelector",
			"cellId": "1e3dc50f-fa13-4c65-a29b-db356e608536",
			"visible": true,
			"startLine": 2768,
			"endLine": 2773,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"218f88f3-a471-405b-b29e-87febe304fcc": {
			"path": "218f88f3-a471-405b-b29e-87febe304fcc",
			"cellName": "Invoke State\nUpdate",
			"cellId": "218f88f3-a471-405b-b29e-87febe304fcc",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-fb5a5eac-fad3-42b1-ae97-2372a1d4e1a0-218f88f3-a471-405b-b29e-87febe304fcc": {
			"path": "generated-edge-simstep-fb5a5eac-fad3-42b1-ae97-2372a1d4e1a0-218f88f3-a471-405b-b29e-87febe304fcc",
			"fileName": "StreamsSelector.tsx",
			"cellName": "Invoke State Update",
			"cellId": "218f88f3-a471-405b-b29e-87febe304fcc",
			"visible": true,
			"startLine": 126,
			"endLine": 128,
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"d28dad56-3d3a-4a1e-aab1-fd15e47248bd": {
			"path": "d28dad56-3d3a-4a1e-aab1-fd15e47248bd",
			"cellName": "Re-compute `copyFileStreams`",
			"cellId": "d28dad56-3d3a-4a1e-aab1-fd15e47248bd",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-8c95b28b-64eb-4813-b540-b60bee8ea243-d28dad56-3d3a-4a1e-aab1-fd15e47248bd": {
			"path": "generated-edge-simstep-8c95b28b-64eb-4813-b540-b60bee8ea243-d28dad56-3d3a-4a1e-aab1-fd15e47248bd",
			"fileName": "useStreamsMeta.ts",
			"cellName": "Re-compute `copyFileStreams`",
			"cellId": "d28dad56-3d3a-4a1e-aab1-fd15e47248bd",
			"visible": true,
			"startLine": 39,
			"endLine": 42,
			"parentPath": "src/renderer/src/hooks/useStreamsMeta.ts"
		},
		"5ae6f524-62bb-434a-81e4-51f018ed9e84": {
			"path": "5ae6f524-62bb-434a-81e4-51f018ed9e84",
			"cellName": "Pass Data\nto FFmpeg\nOperation",
			"cellId": "5ae6f524-62bb-434a-81e4-51f018ed9e84",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-95bb9604-c96c-4261-a259-433fe7244934-5ae6f524-62bb-434a-81e4-51f018ed9e84": {
			"path": "generated-edge-simstep-95bb9604-c96c-4261-a259-433fe7244934-5ae6f524-62bb-434a-81e4-51f018ed9e84",
			"fileName": "App.tsx",
			"cellName": "Pass Data to FFmpeg Operation",
			"cellId": "5ae6f524-62bb-434a-81e4-51f018ed9e84",
			"visible": true,
			"startLine": 1107,
			"endLine": 1115,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"14f9b3cc-417d-4817-9d81-0032c21102fa": {
			"path": "14f9b3cc-417d-4817-9d81-0032c21102fa",
			"cellName": "Request Stream\nMapping Arguments",
			"cellId": "14f9b3cc-417d-4817-9d81-0032c21102fa",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-ebb588f9-fb03-4d71-a451-9d57e6241594-14f9b3cc-417d-4817-9d81-0032c21102fa": {
			"path": "generated-edge-simstep-ebb588f9-fb03-4d71-a451-9d57e6241594-14f9b3cc-417d-4817-9d81-0032c21102fa",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Request Stream Mapping Arguments",
			"cellId": "14f9b3cc-417d-4817-9d81-0032c21102fa",
			"visible": true,
			"startLine": 327,
			"endLine": 327,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"66c59e74-7883-4bb6-9820-7fa09cec1be7": {
			"path": "66c59e74-7883-4bb6-9820-7fa09cec1be7",
			"cellName": "Return Mapping\nArguments",
			"cellId": "66c59e74-7883-4bb6-9820-7fa09cec1be7",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-96e1837e-8670-4ff3-b29a-6226378363ca-66c59e74-7883-4bb6-9820-7fa09cec1be7": {
			"path": "generated-edge-simstep-96e1837e-8670-4ff3-b29a-6226378363ca-66c59e74-7883-4bb6-9820-7fa09cec1be7",
			"fileName": "streams.ts",
			"cellName": "Return Mapping Arguments",
			"cellId": "66c59e74-7883-4bb6-9820-7fa09cec1be7",
			"visible": true,
			"startLine": 327,
			"endLine": 327,
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"303e5960-78cc-4b4b-b8cd-8620d732bbe4": {
			"path": "303e5960-78cc-4b4b-b8cd-8620d732bbe4",
			"cellName": "BottomBar.tsx",
			"cellId": "303e5960-78cc-4b4b-b8cd-8620d732bbe4",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"db2f0701-b8c1-4448-96bd-4e1f0ad45724": {
			"path": "db2f0701-b8c1-4448-96bd-4e1f0ad45724",
			"cellName": "components",
			"cellId": "db2f0701-b8c1-4448-96bd-4e1f0ad45724",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"622ee659-0f7a-47e2-a1e3-b886f6c699ef": {
			"path": "622ee659-0f7a-47e2-a1e3-b886f6c699ef",
			"cellName": "ExportConfirm.tsx",
			"cellId": "622ee659-0f7a-47e2-a1e3-b886f6c699ef",
			"visible": true,
			"parentCellId": "db2f0701-b8c1-4448-96bd-4e1f0ad45724"
		},
		"02cb33e0-5395-4b9f-83ff-3d30ddb9ca65": {
			"path": "02cb33e0-5395-4b9f-83ff-3d30ddb9ca65",
			"cellName": "User Initiates Export - BottomBar.tsx:L582",
			"cellId": "02cb33e0-5395-4b9f-83ff-3d30ddb9ca65",
			"visible": true,
			"parentCellId": "303e5960-78cc-4b4b-b8cd-8620d732bbe4"
		},
		"src/renderer/src/BottomBar.tsx-simstep-4386839b-4f53-4009-82f0-4914a3e89685": {
			"path": "src/renderer/src/BottomBar.tsx-simstep-4386839b-4f53-4009-82f0-4914a3e89685",
			"fileName": "BottomBar.tsx",
			"wiki": "The user, having defined the desired video segments, clicks the 'Export' button located in the bottom bar of the application to begin the export process.",
			"cellName": "User Initiates Export - BottomBar.tsx:L582",
			"cellId": "02cb33e0-5395-4b9f-83ff-3d30ddb9ca65",
			"visible": true,
			"startLine": 582,
			"endLine": 582,
			"parentCellId": "303e5960-78cc-4b4b-b8cd-8620d732bbe4",
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"162b9d32-f242-4185-ab49-a37d64df16bd": {
			"path": "162b9d32-f242-4185-ab49-a37d64df16bd",
			"cellName": "Handle Export Press - App.tsx:L1243-1250",
			"cellId": "162b9d32-f242-4185-ab49-a37d64df16bd",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-39625942-cb71-4c63-948e-0c9a68e56fa1": {
			"path": "src/renderer/src/App.tsx-simstep-39625942-cb71-4c63-948e-0c9a68e56fa1",
			"fileName": "App.tsx",
			"wiki": "The 'onExportPress' function is executed. It checks the 'exportConfirmEnabled' user setting. If enabled, it sets a state variable to display the 'ExportConfirm' dialog. Otherwise, it would proceed directly to the export.",
			"cellName": "Handle Export Press - App.tsx:L1243-1250",
			"cellId": "162b9d32-f242-4185-ab49-a37d64df16bd",
			"visible": true,
			"startLine": 1243,
			"endLine": 1250,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"62fd54ed-f584-4134-97d0-9c39cd01339b": {
			"path": "62fd54ed-f584-4134-97d0-9c39cd01339b",
			"cellName": "User Configures and Confirms Export - ExportConfirm.tsx:L290-292",
			"cellId": "62fd54ed-f584-4134-97d0-9c39cd01339b",
			"visible": true,
			"parentCellId": "622ee659-0f7a-47e2-a1e3-b886f6c699ef"
		},
		"src/renderer/src/components/ExportConfirm.tsx-simstep-019434c8-55dc-4693-9300-a6c379d2e4eb": {
			"path": "src/renderer/src/components/ExportConfirm.tsx-simstep-019434c8-55dc-4693-9300-a6c379d2e4eb",
			"fileName": "ExportConfirm.tsx",
			"wiki": "The user reviews and customizes export settings in the dialog, such as output format, file naming templates, and whether to merge segments. They then click the final 'Export' button within the dialog to start the operation.",
			"cellName": "User Configures and Confirms Export - ExportConfirm.tsx:L290-292",
			"cellId": "62fd54ed-f584-4134-97d0-9c39cd01339b",
			"visible": true,
			"startLine": 290,
			"endLine": 292,
			"parentCellId": "622ee659-0f7a-47e2-a1e3-b886f6c699ef",
			"parentPath": "src/renderer/src/components/ExportConfirm.tsx"
		},
		"4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c": {
			"path": "4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c",
			"cellName": "Prepare Export Parameters - App.tsx:L1105-1111",
			"cellId": "4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-9379f763-53c4-4b9e-ba0c-8e5f5db89366": {
			"path": "src/renderer/src/App.tsx-simstep-9379f763-53c4-4b9e-ba0c-8e5f5db89366",
			"fileName": "App.tsx",
			"wiki": "The 'onExportConfirm' function gathers all necessary data for the export, including the list of segments, output directory, chosen file format, naming templates, and various ffmpeg options. It then invokes the 'cutMultiple' function with these parameters.",
			"cellName": "Prepare Export Parameters - App.tsx:L1105-1111",
			"cellId": "4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c",
			"visible": true,
			"startLine": 1105,
			"endLine": 1111,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"e708b1f8-a8de-4dda-9458-4d7d6dae6568": {
			"path": "e708b1f8-a8de-4dda-9458-4d7d6dae6568",
			"cellName": "Execute FFmpeg Commands - useFfmpegOperations.ts:L482-491",
			"cellId": "e708b1f8-a8de-4dda-9458-4d7d6dae6568",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-d9b3a16a-3afd-4899-8092-4c717c3032b5": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-d9b3a16a-3afd-4899-8092-4c717c3032b5",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "Inside the 'cutMultiple' function, the application iterates through each segment slated for export. For each one, it constructs a precise FFmpeg command with the correct start/end times, codecs, format, and metadata options, then executes it as a system process.",
			"cellName": "Execute FFmpeg Commands - useFfmpegOperations.ts:L482-491",
			"cellId": "e708b1f8-a8de-4dda-9458-4d7d6dae6568",
			"visible": true,
			"startLine": 482,
			"endLine": 491,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"b496201c-09db-422a-a004-b6a0010da939": {
			"path": "b496201c-09db-422a-a004-b6a0010da939",
			"cellName": "Export Completion and UI Update - App.tsx:L1231-1234",
			"cellId": "b496201c-09db-422a-a004-b6a0010da939",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-fc061249-6b6f-4196-a9d4-595f577cd82e": {
			"path": "src/renderer/src/App.tsx-simstep-fc061249-6b6f-4196-a9d4-595f577cd82e",
			"fileName": "App.tsx",
			"wiki": "After all FFmpeg processes finish successfully, the 'onExportConfirm' function's 'finally' block is executed. It resets the application's working state, clears the progress indicator, and triggers an operating system notification to inform the user that the export is complete.",
			"cellName": "Export Completion and UI Update - App.tsx:L1231-1234",
			"cellId": "b496201c-09db-422a-a004-b6a0010da939",
			"visible": true,
			"startLine": 1231,
			"endLine": 1234,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"c717e521-eada-4f6f-a8c7-d73249a5541a": {
			"path": "c717e521-eada-4f6f-a8c7-d73249a5541a",
			"cellName": "Click Event\nPropagation",
			"cellId": "c717e521-eada-4f6f-a8c7-d73249a5541a",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-c1b08297-d0d7-442f-9a0c-053225abca3c-c717e521-eada-4f6f-a8c7-d73249a5541a": {
			"path": "generated-edge-simstep-c1b08297-d0d7-442f-9a0c-053225abca3c-c717e521-eada-4f6f-a8c7-d73249a5541a",
			"fileName": "BottomBar.tsx",
			"cellName": "Click Event Propagation",
			"cellId": "c717e521-eada-4f6f-a8c7-d73249a5541a",
			"visible": true,
			"startLine": 2720,
			"endLine": 2720,
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"510d16c1-4cdc-4ce3-861f-cf87c3fab7fc": {
			"path": "510d16c1-4cdc-4ce3-861f-cf87c3fab7fc",
			"cellName": "Show Export\nConfirmation Dialog",
			"cellId": "510d16c1-4cdc-4ce3-861f-cf87c3fab7fc",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-2f07947f-5b33-4fc3-a8df-abce6652bba0-510d16c1-4cdc-4ce3-861f-cf87c3fab7fc": {
			"path": "generated-edge-simstep-2f07947f-5b33-4fc3-a8df-abce6652bba0-510d16c1-4cdc-4ce3-861f-cf87c3fab7fc",
			"fileName": "App.tsx",
			"cellName": "Show Export Confirmation Dialog",
			"cellId": "510d16c1-4cdc-4ce3-861f-cf87c3fab7fc",
			"visible": true,
			"startLine": 287,
			"endLine": 287,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"de8a39cf-4120-439b-9edd-fcbe5ab35dbb": {
			"path": "de8a39cf-4120-439b-9edd-fcbe5ab35dbb",
			"cellName": "Confirmation Event",
			"cellId": "de8a39cf-4120-439b-9edd-fcbe5ab35dbb",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-80ceb16f-ed63-468e-b9bf-675733354dd7-de8a39cf-4120-439b-9edd-fcbe5ab35dbb": {
			"path": "generated-edge-simstep-80ceb16f-ed63-468e-b9bf-675733354dd7-de8a39cf-4120-439b-9edd-fcbe5ab35dbb",
			"fileName": "ExportConfirm.tsx",
			"cellName": "Confirmation Event",
			"cellId": "de8a39cf-4120-439b-9edd-fcbe5ab35dbb",
			"visible": true,
			"startLine": 291,
			"endLine": 291,
			"parentPath": "src/renderer/src/components/ExportConfirm.tsx"
		},
		"63a14dce-3cc7-4191-a884-7c3984a3a6d9": {
			"path": "63a14dce-3cc7-4191-a884-7c3984a3a6d9",
			"cellName": "Invoke `cutMultiple`",
			"cellId": "63a14dce-3cc7-4191-a884-7c3984a3a6d9",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-2de7281e-7360-4ab6-ae27-224dfdded9ae-63a14dce-3cc7-4191-a884-7c3984a3a6d9": {
			"path": "generated-edge-simstep-2de7281e-7360-4ab6-ae27-224dfdded9ae-63a14dce-3cc7-4191-a884-7c3984a3a6d9",
			"fileName": "App.tsx",
			"cellName": "Invoke `cutMultiple`",
			"cellId": "63a14dce-3cc7-4191-a884-7c3984a3a6d9",
			"visible": true,
			"startLine": 1105,
			"endLine": 1105,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"01dc9a34-4f4d-465e-b95b-cac83782e069": {
			"path": "01dc9a34-4f4d-465e-b95b-cac83782e069",
			"cellName": "Write Output\nFiles to\nDisk",
			"cellId": "01dc9a34-4f4d-465e-b95b-cac83782e069",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-69f3360a-f54e-4f51-b5cb-1d678ee6e49e-01dc9a34-4f4d-465e-b95b-cac83782e069": {
			"path": "generated-edge-simstep-69f3360a-f54e-4f51-b5cb-1d678ee6e49e-01dc9a34-4f4d-465e-b95b-cac83782e069",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Write Output Files to Disk",
			"cellId": "01dc9a34-4f4d-465e-b95b-cac83782e069",
			"visible": true,
			"startLine": 480,
			"endLine": 481,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"0f69c561-a769-41ba-a3a2-1e567d30eaa1": {
			"path": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"cellName": "menu.ts",
			"cellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"visible": true,
			"parentCellId": "43240bc9-1e54-4eff-bb78-cb05ea072c7f"
		},
		"401d252b-6861-45cd-add9-b3a56ebaaea7": {
			"path": "401d252b-6861-45cd-add9-b3a56ebaaea7",
			"cellName": "SegmentList.tsx",
			"cellId": "401d252b-6861-45cd-add9-b3a56ebaaea7",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"40503c88-1408-4643-86ad-939bd7b97b8b": {
			"path": "40503c88-1408-4643-86ad-939bd7b97b8b",
			"cellName": "segments.ts",
			"cellId": "40503c88-1408-4643-86ad-939bd7b97b8b",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"7e0f4483-913e-477a-a6a6-b20b71fc3364": {
			"path": "7e0f4483-913e-477a-a6a6-b20b71fc3364",
			"cellName": "Flow 1: Drag and Drop Segment - SegmentList.tsx:L519-527",
			"cellId": "7e0f4483-913e-477a-a6a6-b20b71fc3364",
			"visible": true,
			"parentCellId": "401d252b-6861-45cd-add9-b3a56ebaaea7"
		},
		"src/renderer/src/SegmentList.tsx-simstep-51045728-84e1-4a42-bb63-5d923c75bc35": {
			"path": "src/renderer/src/SegmentList.tsx-simstep-51045728-84e1-4a42-bb63-5d923c75bc35",
			"fileName": "SegmentList.tsx",
			"wiki": "The user initiates a drag-and-drop action on a segment within the SegmentList UI to reorder it. The `DndContext` component captures the end of the drag event and triggers the `handleDragEnd` function.",
			"cellName": "Flow 1: Drag and Drop Segment - SegmentList.tsx:L519-527",
			"cellId": "7e0f4483-913e-477a-a6a6-b20b71fc3364",
			"visible": true,
			"startLine": 519,
			"endLine": 527,
			"parentCellId": "401d252b-6861-45cd-add9-b3a56ebaaea7",
			"parentPath": "src/renderer/src/SegmentList.tsx"
		},
		"5a6e715e-3cb5-4dad-befd-b7520b17e704": {
			"path": "5a6e715e-3cb5-4dad-befd-b7520b17e704",
			"cellName": "Flow 1: Receive New Order in `useSegments` Hook - useSegments.ts:L433-441",
			"cellId": "5a6e715e-3cb5-4dad-befd-b7520b17e704",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-a9055e36-9d28-4a37-8712-612f76bc04bf": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-a9055e36-9d28-4a37-8712-612f76bc04bf",
			"fileName": "useSegments.ts",
			"wiki": "The `updateSegOrders` function, defined in the `useSegments` hook, receives the new array of segment IDs. It then re-sorts the `cutSegments` state array based on the new order of IDs.",
			"cellName": "Flow 1: Receive New Order in `useSegments` Hook - useSegments.ts:L433-441",
			"cellId": "5a6e715e-3cb5-4dad-befd-b7520b17e704",
			"visible": true,
			"startLine": 433,
			"endLine": 441,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"d51935b1-0ab0-4956-a48b-21a411df7ed0": {
			"path": "d51935b1-0ab0-4956-a48b-21a411df7ed0",
			"cellName": "Flow 1: Re-render Segment List - App.tsx:L2629-2631",
			"cellId": "d51935b1-0ab0-4956-a48b-21a411df7ed0",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-1cc20ae2-5be8-4f91-9481-fdb868005a1d": {
			"path": "src/renderer/src/App.tsx-simstep-1cc20ae2-5be8-4f91-9481-fdb868005a1d",
			"fileName": "App.tsx",
			"wiki": "The `SegmentList` component, subscribed to the `cutSegments` state, receives the updated, reordered list as a prop and re-renders, displaying the segments in their new user-defined order.",
			"cellName": "Flow 1: Re-render Segment List - App.tsx:L2629-2631",
			"cellId": "d51935b1-0ab0-4956-a48b-21a411df7ed0",
			"visible": true,
			"startLine": 2629,
			"endLine": 2631,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"babd6979-3aad-4f97-8adc-8a83885e54ad": {
			"path": "babd6979-3aad-4f97-8adc-8a83885e54ad",
			"cellName": "Flow 2: User Triggers Combine Segments Action - menu.ts:L313-317",
			"cellId": "babd6979-3aad-4f97-8adc-8a83885e54ad",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-26c53604-1eca-405f-b344-7247b1c3a178": {
			"path": "src/main/menu.ts-simstep-26c53604-1eca-405f-b344-7247b1c3a178",
			"fileName": "menu.ts",
			"wiki": "The user clicks on 'Combine selected segments' from the 'Segments' dropdown in the main application menu. This action is handled by the main process.",
			"cellName": "Flow 2: User Triggers Combine Segments Action - menu.ts:L313-317",
			"cellId": "babd6979-3aad-4f97-8adc-8a83885e54ad",
			"visible": true,
			"startLine": 313,
			"endLine": 317,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"4da07742-850a-4345-9cba-3d6a66f001e7": {
			"path": "4da07742-850a-4345-9cba-3d6a66f001e7",
			"cellName": "Flow 2: Execute Combine Logic in `useSegments` - useSegments.ts:L342-344",
			"cellId": "4da07742-850a-4345-9cba-3d6a66f001e7",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-60ab9f29-e8cf-411e-a4e5-323d9c17b727": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-60ab9f29-e8cf-411e-a4e5-323d9c17b727",
			"fileName": "useSegments.ts",
			"wiki": "The renderer process receives the IPC message and calls the `combineSelectedSegments` function defined in the `useSegments` hook. This function retrieves the current list of segments and prepares to merge the selected ones.",
			"cellName": "Flow 2: Execute Combine Logic in `useSegments` - useSegments.ts:L342-344",
			"cellId": "4da07742-850a-4345-9cba-3d6a66f001e7",
			"visible": true,
			"startLine": 342,
			"endLine": 344,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"56fcb786-a03c-40d8-a688-f75aa6aeccd6": {
			"path": "56fcb786-a03c-40d8-a688-f75aa6aeccd6",
			"cellName": "Flow 2: Perform Segment Combination - segments.ts:L90-111",
			"cellId": "56fcb786-a03c-40d8-a688-f75aa6aeccd6",
			"visible": true,
			"parentCellId": "40503c88-1408-4643-86ad-939bd7b97b8b"
		},
		"src/renderer/src/segments.ts-simstep-a2899f56-7bdf-457e-9290-8e751da70518": {
			"path": "src/renderer/src/segments.ts-simstep-a2899f56-7bdf-457e-9290-8e751da70518",
			"fileName": "segments.ts",
			"wiki": "The `combineSelectedSegments` utility function in `segments.ts` filters for selected segments, finds the earliest start time and latest end time among them, and creates a new segment array where the selected segments are replaced by a single combined segment.",
			"cellName": "Flow 2: Perform Segment Combination - segments.ts:L90-111",
			"cellId": "56fcb786-a03c-40d8-a688-f75aa6aeccd6",
			"visible": true,
			"startLine": 90,
			"endLine": 111,
			"parentCellId": "40503c88-1408-4643-86ad-939bd7b97b8b",
			"parentPath": "src/renderer/src/segments.ts"
		},
		"1163a9b1-0a88-4d3c-aaa5-a43c8eb46212": {
			"path": "1163a9b1-0a88-4d3c-aaa5-a43c8eb46212",
			"cellName": "Flow 2: Re-render Segment List with Combined Segment - App.tsx:L2629-2631",
			"cellId": "1163a9b1-0a88-4d3c-aaa5-a43c8eb46212",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-bcff4228-214e-422e-9be0-201c7d339f01": {
			"path": "src/renderer/src/App.tsx-simstep-bcff4228-214e-422e-9be0-201c7d339f01",
			"fileName": "App.tsx",
			"wiki": "The `SegmentList` component receives the updated `cutSegments` prop. It re-renders to display the single, new combined segment and removes the other segments that were part of the combination.",
			"cellName": "Flow 2: Re-render Segment List with Combined Segment - App.tsx:L2629-2631",
			"cellId": "1163a9b1-0a88-4d3c-aaa5-a43c8eb46212",
			"visible": true,
			"startLine": 2629,
			"endLine": 2631,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"8611c163-9006-46f9-a74c-59c45b6bf655": {
			"path": "8611c163-9006-46f9-a74c-59c45b6bf655",
			"cellName": "Flow 1:\nTransmit New\nSegment Order",
			"cellId": "8611c163-9006-46f9-a74c-59c45b6bf655",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-a5479198-fdb3-4754-a5c9-d56fcb40725b-8611c163-9006-46f9-a74c-59c45b6bf655": {
			"path": "generated-edge-simstep-a5479198-fdb3-4754-a5c9-d56fcb40725b-8611c163-9006-46f9-a74c-59c45b6bf655",
			"fileName": "SegmentList.tsx",
			"cellName": "Flow 1: Transmit New Segment Order",
			"cellId": "8611c163-9006-46f9-a74c-59c45b6bf655",
			"visible": true,
			"startLine": 525,
			"endLine": 525,
			"parentPath": "src/renderer/src/SegmentList.tsx"
		},
		"368a4b87-0ff7-4a31-a05a-65f34ffc3999": {
			"path": "368a4b87-0ff7-4a31-a05a-65f34ffc3999",
			"cellName": "Flow 1:\nUpdate Application\nState",
			"cellId": "368a4b87-0ff7-4a31-a05a-65f34ffc3999",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-ea25bfa4-27a6-45a6-8ec2-aacecfd3ecc5-368a4b87-0ff7-4a31-a05a-65f34ffc3999": {
			"path": "generated-edge-simstep-ea25bfa4-27a6-45a6-8ec2-aacecfd3ecc5-368a4b87-0ff7-4a31-a05a-65f34ffc3999",
			"fileName": "useSegments.ts",
			"cellName": "Flow 1: Update Application State",
			"cellId": "368a4b87-0ff7-4a31-a05a-65f34ffc3999",
			"visible": true,
			"startLine": 435,
			"endLine": 435,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"025411c7-ad78-47fa-8d76-211d2eb7aa8b": {
			"path": "025411c7-ad78-47fa-8d76-211d2eb7aa8b",
			"cellName": "Flow 2:\nIPC Message\nto Renderer",
			"cellId": "025411c7-ad78-47fa-8d76-211d2eb7aa8b",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-0a13ba74-c0b1-40fa-826b-4c898e52ac09-025411c7-ad78-47fa-8d76-211d2eb7aa8b": {
			"path": "generated-edge-simstep-0a13ba74-c0b1-40fa-826b-4c898e52ac09-025411c7-ad78-47fa-8d76-211d2eb7aa8b",
			"fileName": "menu.ts",
			"cellName": "Flow 2: IPC Message to Renderer",
			"cellId": "025411c7-ad78-47fa-8d76-211d2eb7aa8b",
			"visible": true,
			"startLine": 315,
			"endLine": 315,
			"parentPath": "src/main/menu.ts"
		},
		"7860d504-5516-45a0-aee8-b5112d1d9cc6": {
			"path": "7860d504-5516-45a0-aee8-b5112d1d9cc6",
			"cellName": "Flow 2:\nPass Segments\nto Utility\nFunction",
			"cellId": "7860d504-5516-45a0-aee8-b5112d1d9cc6",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-793f8706-aac2-47eb-8037-170e53610078-7860d504-5516-45a0-aee8-b5112d1d9cc6": {
			"path": "generated-edge-simstep-793f8706-aac2-47eb-8037-170e53610078-7860d504-5516-45a0-aee8-b5112d1d9cc6",
			"fileName": "useSegments.ts",
			"cellName": "Flow 2: Pass Segments to Utility Function",
			"cellId": "7860d504-5516-45a0-aee8-b5112d1d9cc6",
			"visible": true,
			"startLine": 343,
			"endLine": 343,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"29c8eccb-247a-44c8-a297-560131352318": {
			"path": "29c8eccb-247a-44c8-a297-560131352318",
			"cellName": "Flow 2:\nReturn Combined\nSegments and\nUpdate State",
			"cellId": "29c8eccb-247a-44c8-a297-560131352318",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-ac388cfa-f898-4f92-877a-fa055e1d9f7a-29c8eccb-247a-44c8-a297-560131352318": {
			"path": "generated-edge-simstep-ac388cfa-f898-4f92-877a-fa055e1d9f7a-29c8eccb-247a-44c8-a297-560131352318",
			"fileName": "segments.ts",
			"cellName": "Flow 2: Return Combined Segments and Update State",
			"cellId": "29c8eccb-247a-44c8-a297-560131352318",
			"visible": true,
			"startLine": 343,
			"endLine": 343,
			"parentPath": "src/renderer/src/segments.ts"
		},
		"1a76ef04-7af8-4cb2-9337-178712a323f2": {
			"path": "1a76ef04-7af8-4cb2-9337-178712a323f2",
			"cellName": "useFrameCapture.ts",
			"cellId": "1a76ef04-7af8-4cb2-9337-178712a323f2",
			"visible": true,
			"parentCellId": "02766735-5216-43f1-b63a-bd5d78863b62"
		},
		"a7d8cba3-3053-4048-bdc6-d89856979550": {
			"path": "a7d8cba3-3053-4048-bdc6-d89856979550",
			"cellName": "(Flow: Single Snapshot) - User Clicks Capture Button - BottomBar.tsx:L563-571",
			"cellId": "a7d8cba3-3053-4048-bdc6-d89856979550",
			"visible": true,
			"parentCellId": "303e5960-78cc-4b4b-b8cd-8620d732bbe4"
		},
		"src/renderer/src/BottomBar.tsx-simstep-e58c04f1-c16f-4de0-adfd-157073daad81": {
			"path": "src/renderer/src/BottomBar.tsx-simstep-e58c04f1-c16f-4de0-adfd-157073daad81",
			"fileName": "BottomBar.tsx",
			"wiki": "The user clicks the camera icon in the bottom bar to capture a snapshot of the current frame. This triggers the `captureSnapshot` function.",
			"cellName": "(Flow: Single Snapshot) - User Clicks Capture Button - BottomBar.tsx:L563-571",
			"cellId": "a7d8cba3-3053-4048-bdc6-d89856979550",
			"visible": true,
			"startLine": 563,
			"endLine": 571,
			"parentCellId": "303e5960-78cc-4b4b-b8cd-8620d732bbe4",
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"2befd469-c197-4ae6-8853-7052040c4a43": {
			"path": "2befd469-c197-4ae6-8853-7052040c4a43",
			"cellName": "(Flow: Single Snapshot) - Handle Snapshot Logic in App - App.tsx:L1244-1252",
			"cellId": "2befd469-c197-4ae6-8853-7052040c4a43",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-76bf2bfe-811d-435e-b652-effbf655e284": {
			"path": "src/renderer/src/App.tsx-simstep-76bf2bfe-811d-435e-b652-effbf655e284",
			"fileName": "App.tsx",
			"wiki": "In `App.tsx`, the `captureSnapshot` function is executed. It sets the application to a \"working\" state and then calls `captureFrameFromFfmpeg` from the `useFrameCapture` hook, providing the current time and capture settings.",
			"cellName": "(Flow: Single Snapshot) - Handle Snapshot Logic in App - App.tsx:L1244-1252",
			"cellId": "2befd469-c197-4ae6-8853-7052040c4a43",
			"visible": true,
			"startLine": 1244,
			"endLine": 1252,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"7785f7f8-9482-43ee-9d5c-af07771c2155": {
			"path": "7785f7f8-9482-43ee-9d5c-af07771c2155",
			"cellName": "(Flow: Single Snapshot) - Prepare and Send IPC Request - ffmpeg.ts:L13-24",
			"cellId": "7785f7f8-9482-43ee-9d5c-af07771c2155",
			"visible": true,
			"parentCellId": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6"
		},
		"src/renderer/src/ffmpeg.ts-simstep-38f172e4-ced8-481b-813a-c76509477df6": {
			"path": "src/renderer/src/ffmpeg.ts-simstep-38f172e4-ced8-481b-813a-c76509477df6",
			"fileName": "ffmpeg.ts",
			"wiki": "The `useFrameCapture` hook calls the `ffmpeg.captureFrame` wrapper. This wrapper, defined in `renderer/src/ffmpeg.ts`, sends an IPC request to the main process to execute the actual ffmpeg command for capturing a single frame.",
			"cellName": "(Flow: Single Snapshot) - Prepare and Send IPC Request - ffmpeg.ts:L13-24",
			"cellId": "7785f7f8-9482-43ee-9d5c-af07771c2155",
			"visible": true,
			"startLine": 13,
			"endLine": 24,
			"parentCellId": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6",
			"parentPath": "src/renderer/src/ffmpeg.ts"
		},
		"0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b": {
			"path": "0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b",
			"cellName": "(Flow: Single Snapshot) - Execute FFmpeg Command in Main Process - ffmpeg.ts:L455-474",
			"cellId": "0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-388c02fa-079a-475b-8ac4-c4723da308f2": {
			"path": "src/main/ffmpeg.ts-simstep-388c02fa-079a-475b-8ac4-c4723da308f2",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process receives the IPC request and uses its `ffmpeg.ts` helper to construct and execute the `ffmpeg` command-line instruction (with `-vframes 1`) to extract the single frame and save it to the specified output path.",
			"cellName": "(Flow: Single Snapshot) - Execute FFmpeg Command in Main Process - ffmpeg.ts:L455-474",
			"cellId": "0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b",
			"visible": true,
			"startLine": 455,
			"endLine": 474,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"92b37389-6687-472b-bec1-1ce9a99ed84e": {
			"path": "92b37389-6687-472b-bec1-1ce9a99ed84e",
			"cellName": "(Flow: Single Snapshot) - Finalize and Notify User - App.tsx:L1303-1306",
			"cellId": "92b37389-6687-472b-bec1-1ce9a99ed84e",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-065941a3-b019-496a-975b-7beb4523ad52": {
			"path": "src/renderer/src/App.tsx-simstep-065941a3-b019-496a-975b-7beb4523ad52",
			"fileName": "App.tsx",
			"wiki": "Back in `App.tsx`, the `captureSnapshot` function's promise resolves with the output path. It then displays a success notification to the user and resets the application's \"working\" state.",
			"cellName": "(Flow: Single Snapshot) - Finalize and Notify User - App.tsx:L1303-1306",
			"cellId": "92b37389-6687-472b-bec1-1ce9a99ed84e",
			"visible": true,
			"startLine": 1303,
			"endLine": 1306,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"760a64e3-a949-4d5b-880f-407e53cb1dbe": {
			"path": "760a64e3-a949-4d5b-880f-407e53cb1dbe",
			"cellName": "(Flow: Extract Frames) - Initiate Frame Extraction - App.tsx:L1311-1319",
			"cellId": "760a64e3-a949-4d5b-880f-407e53cb1dbe",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-5dd7b86f-1c8c-45cf-b370-a3b8428b44a2": {
			"path": "src/renderer/src/App.tsx-simstep-5dd7b86f-1c8c-45cf-b370-a3b8428b44a2",
			"fileName": "App.tsx",
			"wiki": "The user has selected one or more segments and triggers the \"extract frames\" action. This action calls `extractSegmentsFramesAsImages` with the relevant segments.",
			"cellName": "(Flow: Extract Frames) - Initiate Frame Extraction - App.tsx:L1311-1319",
			"cellId": "760a64e3-a949-4d5b-880f-407e53cb1dbe",
			"visible": true,
			"startLine": 1311,
			"endLine": 1319,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"081c262a-afae-44e9-a329-66e2bfdda284": {
			"path": "081c262a-afae-44e9-a329-66e2bfdda284",
			"cellName": "(Flow: Extract Frames) - Prompt User for Extraction Settings - App.tsx:L1272-1288",
			"cellId": "081c262a-afae-44e9-a329-66e2bfdda284",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-23944648-dcd8-4b6e-80cc-1d61b4f4a4c9": {
			"path": "src/renderer/src/App.tsx-simstep-23944648-dcd8-4b6e-80cc-1d61b4f4a4c9",
			"fileName": "App.tsx",
			"wiki": "The application calls `askExtractFramesAsImages` to display a dialog where the user can specify how frames should be extracted (e.g., every Nth frame, all frames, best thumbnails).",
			"cellName": "(Flow: Extract Frames) - Prompt User for Extraction Settings - App.tsx:L1272-1288",
			"cellId": "081c262a-afae-44e9-a329-66e2bfdda284",
			"visible": true,
			"startLine": 1272,
			"endLine": 1288,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"693f4612-01f3-43e9-bd8a-d7b484ceeab2": {
			"path": "693f4612-01f3-43e9-bd8a-d7b484ceeab2",
			"cellName": "(Flow: Extract Frames) - Iterate Segments and Call Capture Logic - App.tsx:L1298-1306",
			"cellId": "693f4612-01f3-43e9-bd8a-d7b484ceeab2",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-e92d2625-3d6b-45ca-8adc-016d9e421fdd": {
			"path": "src/renderer/src/App.tsx-simstep-e92d2625-3d6b-45ca-8adc-016d9e421fdd",
			"fileName": "App.tsx",
			"wiki": "The application loops through each segment. In each iteration, it calls `captureFramesRange` from the `useFrameCapture` hook, passing the specific parameters for that segment (file path, start/end times, FPS, and the user's chosen filter).",
			"cellName": "(Flow: Extract Frames) - Iterate Segments and Call Capture Logic - App.tsx:L1298-1306",
			"cellId": "693f4612-01f3-43e9-bd8a-d7b484ceeab2",
			"visible": true,
			"startLine": 1298,
			"endLine": 1306,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"c3c030a9-5d90-4f24-afb0-73ebbbc1559a": {
			"path": "c3c030a9-5d90-4f24-afb0-73ebbbc1559a",
			"cellName": "(Flow: Extract Frames) - Prepare FFmpeg Arguments (Renderer) - useFrameCapture.ts:L50-58",
			"cellId": "c3c030a9-5d90-4f24-afb0-73ebbbc1559a",
			"visible": true,
			"parentCellId": "1a76ef04-7af8-4cb2-9337-178712a323f2"
		},
		"src/renderer/src/hooks/useFrameCapture.ts-simstep-3a983b21-6f92-4c33-80ff-19343105cef5": {
			"path": "src/renderer/src/hooks/useFrameCapture.ts-simstep-3a983b21-6f92-4c33-80ff-19343105cef5",
			"fileName": "useFrameCapture.ts",
			"wiki": "Inside the `useFrameCapture` hook, the `captureFramesRange` function prepares the arguments for the ffmpeg command. It constructs the output path template and then calls `ffmpeg.captureFrames`, which communicates with the main process.",
			"cellName": "(Flow: Extract Frames) - Prepare FFmpeg Arguments (Renderer) - useFrameCapture.ts:L50-58",
			"cellId": "c3c030a9-5d90-4f24-afb0-73ebbbc1559a",
			"visible": true,
			"startLine": 50,
			"endLine": 58,
			"parentCellId": "1a76ef04-7af8-4cb2-9337-178712a323f2",
			"parentPath": "src/renderer/src/hooks/useFrameCapture.ts"
		},
		"12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3": {
			"path": "12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3",
			"cellName": "(Flow: Extract Frames) - Execute FFmpeg Command (Main Process) - ffmpeg.ts:L455-474",
			"cellId": "12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-d9c31e85-47d1-4d7e-a4bd-4bc51417cc8d": {
			"path": "src/main/ffmpeg.ts-simstep-d9c31e85-47d1-4d7e-a4bd-4bc51417cc8d",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process receives the request. The `captureFrames` function in `main/ffmpeg.ts` assembles the final command-line arguments and executes the `ffmpeg` binary, which reads the video file and writes the individual frame images to disk.",
			"cellName": "(Flow: Extract Frames) - Execute FFmpeg Command (Main Process) - ffmpeg.ts:L455-474",
			"cellId": "12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3",
			"visible": true,
			"startLine": 455,
			"endLine": 474,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"5ce8acd4-af7f-457c-bdd9-f092ecd28c20": {
			"path": "5ce8acd4-af7f-457c-bdd9-f092ecd28c20",
			"cellName": "(Flow: Extract Frames) - Finalize and Notify User - App.tsx:L1303-1306",
			"cellId": "5ce8acd4-af7f-457c-bdd9-f092ecd28c20",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-5386d1a0-fb0d-422a-b1bc-f1509fbe85cd": {
			"path": "src/renderer/src/App.tsx-simstep-5386d1a0-fb0d-422a-b1bc-f1509fbe85cd",
			"fileName": "App.tsx",
			"wiki": "After the loop over all segments completes, the `extractSegmentsFramesAsImages` function in `App.tsx` shows an OS notification and a toast message to inform the user that the frames have been extracted successfully and provides a button to open the output directory.",
			"cellName": "(Flow: Extract Frames) - Finalize and Notify User - App.tsx:L1303-1306",
			"cellId": "5ce8acd4-af7f-457c-bdd9-f092ecd28c20",
			"visible": true,
			"startLine": 1303,
			"endLine": 1306,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"e7da2a0c-737c-4efe-b9de-698639d372c3": {
			"path": "e7da2a0c-737c-4efe-b9de-698639d372c3",
			"cellName": "(Flow: Single\nSnapshot) -\nInvoke `captureSnapshot`",
			"cellId": "e7da2a0c-737c-4efe-b9de-698639d372c3",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-4431a346-47c5-4a7c-a2cf-813c0a70ecc5-e7da2a0c-737c-4efe-b9de-698639d372c3": {
			"path": "generated-edge-simstep-4431a346-47c5-4a7c-a2cf-813c0a70ecc5-e7da2a0c-737c-4efe-b9de-698639d372c3",
			"fileName": "BottomBar.tsx",
			"cellName": "(Flow: Single Snapshot) - Invoke `captureSnapshot`",
			"cellId": "e7da2a0c-737c-4efe-b9de-698639d372c3",
			"visible": true,
			"startLine": 2719,
			"endLine": 2719,
			"parentPath": "src/renderer/src/BottomBar.tsx"
		},
		"052bff40-6a65-4a91-b3ff-83f64d0283eb": {
			"path": "052bff40-6a65-4a91-b3ff-83f64d0283eb",
			"cellName": "(Flow: Single\nSnapshot) -\nPass Parameters\nto Frame\nCapture Hook",
			"cellId": "052bff40-6a65-4a91-b3ff-83f64d0283eb",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-d19ef73b-b807-4a08-9bbc-8d403928f5f3-052bff40-6a65-4a91-b3ff-83f64d0283eb": {
			"path": "generated-edge-simstep-d19ef73b-b807-4a08-9bbc-8d403928f5f3-052bff40-6a65-4a91-b3ff-83f64d0283eb",
			"fileName": "App.tsx",
			"cellName": "(Flow: Single Snapshot) - Pass Parameters to Frame Capture Hook",
			"cellId": "052bff40-6a65-4a91-b3ff-83f64d0283eb",
			"visible": true,
			"startLine": 1767,
			"endLine": 1767,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"00ab2a94-6eb3-4da3-9516-dddcc779b941": {
			"path": "00ab2a94-6eb3-4da3-9516-dddcc779b941",
			"cellName": "(Flow: Single\nSnapshot) -\nTransmit FFmpeg\nCommand to\nMain Process",
			"cellId": "00ab2a94-6eb3-4da3-9516-dddcc779b941",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-10ce9600-eae9-42aa-bbf3-c681da4c99b3-00ab2a94-6eb3-4da3-9516-dddcc779b941": {
			"path": "generated-edge-simstep-10ce9600-eae9-42aa-bbf3-c681da4c99b3-00ab2a94-6eb3-4da3-9516-dddcc779b941",
			"fileName": "ffmpeg.ts",
			"cellName": "(Flow: Single Snapshot) - Transmit FFmpeg Command to Main Process",
			"cellId": "00ab2a94-6eb3-4da3-9516-dddcc779b941",
			"visible": true,
			"parentPath": "src/renderer/src/ffmpeg.ts"
		},
		"9946b3b6-132e-4e1a-8ba3-8995b4888e7a": {
			"path": "9946b3b6-132e-4e1a-8ba3-8995b4888e7a",
			"cellName": "(Flow: Single\nSnapshot) -\nReturn Output\nPath to\nRenderer",
			"cellId": "9946b3b6-132e-4e1a-8ba3-8995b4888e7a",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-e416973d-c7f0-40ce-9a3a-e6949682c78e-9946b3b6-132e-4e1a-8ba3-8995b4888e7a": {
			"path": "generated-edge-simstep-e416973d-c7f0-40ce-9a3a-e6949682c78e-9946b3b6-132e-4e1a-8ba3-8995b4888e7a",
			"fileName": "ffmpeg.ts",
			"cellName": "(Flow: Single Snapshot) - Return Output Path to Renderer",
			"cellId": "9946b3b6-132e-4e1a-8ba3-8995b4888e7a",
			"visible": true,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"68cd15c4-b10c-482f-81f9-629d4a826a75": {
			"path": "68cd15c4-b10c-482f-81f9-629d4a826a75",
			"cellName": "(Flow: Extract\nFrames) -\nPass Segments\nto Handler",
			"cellId": "68cd15c4-b10c-482f-81f9-629d4a826a75",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"generated-edge-simstep-19dbdaae-ab36-47c6-b391-849aaac61082-68cd15c4-b10c-482f-81f9-629d4a826a75": {
			"path": "generated-edge-simstep-19dbdaae-ab36-47c6-b391-849aaac61082-68cd15c4-b10c-482f-81f9-629d4a826a75",
			"fileName": "App.tsx",
			"cellName": "(Flow: Extract Frames) - Pass Segments to Handler",
			"cellId": "68cd15c4-b10c-482f-81f9-629d4a826a75",
			"visible": true,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589": {
			"path": "f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589",
			"cellName": "(Flow: Extract\nFrames) -\nTransmit User\nSettings",
			"cellId": "f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"generated-edge-simstep-8b6dabe7-adc5-44a1-96c6-a8e195d98a88-f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589": {
			"path": "generated-edge-simstep-8b6dabe7-adc5-44a1-96c6-a8e195d98a88-f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589",
			"fileName": "App.tsx",
			"cellName": "(Flow: Extract Frames) - Transmit User Settings",
			"cellId": "f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589",
			"visible": true,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"90ae7a85-3d59-4561-84c8-6e18f93d91dd": {
			"path": "90ae7a85-3d59-4561-84c8-6e18f93d91dd",
			"cellName": "(Flow: Extract\nFrames) -\nInvoke Frame\nCapture for\na Segment",
			"cellId": "90ae7a85-3d59-4561-84c8-6e18f93d91dd",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-fcade72e-6a7c-45c7-8576-2a421b8c7b97-90ae7a85-3d59-4561-84c8-6e18f93d91dd": {
			"path": "generated-edge-simstep-fcade72e-6a7c-45c7-8576-2a421b8c7b97-90ae7a85-3d59-4561-84c8-6e18f93d91dd",
			"fileName": "App.tsx",
			"cellName": "(Flow: Extract Frames) - Invoke Frame Capture for a Segment",
			"cellId": "90ae7a85-3d59-4561-84c8-6e18f93d91dd",
			"visible": true,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"1ab145d8-8007-411f-bae3-cc909e50c718": {
			"path": "1ab145d8-8007-411f-bae3-cc909e50c718",
			"cellName": "(Flow: Extract\nFrames) -\nIPC Call\nto Main\nProcess",
			"cellId": "1ab145d8-8007-411f-bae3-cc909e50c718",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-4642e408-7799-452c-b4c2-533e71621d59-1ab145d8-8007-411f-bae3-cc909e50c718": {
			"path": "generated-edge-simstep-4642e408-7799-452c-b4c2-533e71621d59-1ab145d8-8007-411f-bae3-cc909e50c718",
			"fileName": "useFrameCapture.ts",
			"cellName": "(Flow: Extract Frames) - IPC Call to Main Process",
			"cellId": "1ab145d8-8007-411f-bae3-cc909e50c718",
			"visible": true,
			"startLine": 13,
			"endLine": 24,
			"parentPath": "src/renderer/src/hooks/useFrameCapture.ts"
		},
		"0aa79848-d158-447d-981a-4927a4869085": {
			"path": "0aa79848-d158-447d-981a-4927a4869085",
			"cellName": "(Flow: Extract\nFrames) -\nReturn Completion\nStatus",
			"cellId": "0aa79848-d158-447d-981a-4927a4869085",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-da3aaf54-e0aa-473a-ba63-6c836bdf3b90-0aa79848-d158-447d-981a-4927a4869085": {
			"path": "generated-edge-simstep-da3aaf54-e0aa-473a-ba63-6c836bdf3b90-0aa79848-d158-447d-981a-4927a4869085",
			"fileName": "ffmpeg.ts",
			"cellName": "(Flow: Extract Frames) - Return Completion Status",
			"cellId": "0aa79848-d158-447d-981a-4927a4869085",
			"visible": true,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"51a0685c-765d-4aa4-968c-c08d907d9cbf": {
			"path": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"cellName": "edlStore.ts",
			"cellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"d3533b42-22f1-4b67-864b-bdb281e642c1": {
			"path": "d3533b42-22f1-4b67-864b-bdb281e642c1",
			"cellName": "Import Flow: User Initiates Import - menu.ts:L86-89",
			"cellId": "d3533b42-22f1-4b67-864b-bdb281e642c1",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-680e5937-fe58-4e7e-a8fc-9dc5f587d868": {
			"path": "src/main/menu.ts-simstep-680e5937-fe58-4e7e-a8fc-9dc5f587d868",
			"fileName": "menu.ts",
			"wiki": "The user navigates to the 'File' -> 'Import project' menu and selects a format, for example, 'Times in seconds (CSV)'. This action triggers a `click` event handler in the main process menu configuration.",
			"cellName": "Import Flow: User Initiates Import - menu.ts:L86-89",
			"cellId": "d3533b42-22f1-4b67-864b-bdb281e642c1",
			"visible": true,
			"startLine": 86,
			"endLine": 89,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"7524fecc-23cb-4c08-b29e-655b444add3a": {
			"path": "7524fecc-23cb-4c08-b29e-655b444add3a",
			"cellName": "Import Flow: Renderer Receives Import Request - App.tsx:L2330-2342",
			"cellId": "7524fecc-23cb-4c08-b29e-655b444add3a",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-ecc368c7-1378-4eab-a98b-f42a0cfef1d9": {
			"path": "src/renderer/src/App.tsx-simstep-ecc368c7-1378-4eab-a98b-f42a0cfef1d9",
			"fileName": "App.tsx",
			"wiki": "The renderer process has a listener for the `importEdlFile` channel. When the message is received, it invokes the `importEdlFile` function defined in the `App` component.",
			"cellName": "Import Flow: Renderer Receives Import Request - App.tsx:L2330-2342",
			"cellId": "7524fecc-23cb-4c08-b29e-655b444add3a",
			"visible": true,
			"startLine": 2330,
			"endLine": 2342,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"bfd0fc48-026c-4de3-8c82-909ff7d606fc": {
			"path": "bfd0fc48-026c-4de3-8c82-909ff7d606fc",
			"cellName": "Import Flow: User Selects File - edlStore.ts:L177-181",
			"cellId": "bfd0fc48-026c-4de3-8c82-909ff7d606fc",
			"visible": true,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf"
		},
		"src/renderer/src/edlStore.ts-simstep-969a4f98-3b9d-43d4-8e21-ec8bbd08879b": {
			"path": "src/renderer/src/edlStore.ts-simstep-969a4f98-3b9d-43d4-8e21-ec8bbd08879b",
			"fileName": "edlStore.ts",
			"wiki": "The `askForEdlImport` function displays a native file open dialog, allowing the user to choose the EDL file. If a file is selected, its path is retrieved to be passed on for parsing.",
			"cellName": "Import Flow: User Selects File - edlStore.ts:L177-181",
			"cellId": "bfd0fc48-026c-4de3-8c82-909ff7d606fc",
			"visible": true,
			"startLine": 177,
			"endLine": 181,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"0cf982e9-8979-4ad6-b959-a1f8c49905f3": {
			"path": "0cf982e9-8979-4ad6-b959-a1f8c49905f3",
			"cellName": "Import Flow: Parse File Content - edlStore.ts:L125",
			"cellId": "0cf982e9-8979-4ad6-b959-a1f8c49905f3",
			"visible": true,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf"
		},
		"src/renderer/src/edlStore.ts-simstep-e2fca9a3-8304-4d96-8390-3257aa11378f": {
			"path": "src/renderer/src/edlStore.ts-simstep-e2fca9a3-8304-4d96-8390-3257aa11378f",
			"fileName": "edlStore.ts",
			"wiki": "`readEdlFile` reads the file's content and, based on the `type`, calls the appropriate parsing function from `edlFormats.ts`. For 'csv', it calls `parseCsvTime`. The parser converts the text content into structured segment data.",
			"cellName": "Import Flow: Parse File Content - edlStore.ts:L125",
			"cellId": "0cf982e9-8979-4ad6-b959-a1f8c49905f3",
			"visible": true,
			"startLine": 125,
			"endLine": 125,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"ca8ee221-dc28-4f07-8085-3a2c4ca16031": {
			"path": "ca8ee221-dc28-4f07-8085-3a2c4ca16031",
			"cellName": "Import Flow: Update UI with New Segments - App.tsx:L2336-2341",
			"cellId": "ca8ee221-dc28-4f07-8085-3a2c4ca16031",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-9d4ffd66-54f5-4ba1-91eb-61e3a18cf945": {
			"path": "src/renderer/src/App.tsx-simstep-9d4ffd66-54f5-4ba1-91eb-61e3a18cf945",
			"fileName": "App.tsx",
			"wiki": "Back in `App.tsx`, the `importEdlFile` function receives the parsed segments. It then calls `loadCutSegments` to replace the current segments with the imported ones, causing the UI timeline to re-render and display the new cut points.",
			"cellName": "Import Flow: Update UI with New Segments - App.tsx:L2336-2341",
			"cellId": "ca8ee221-dc28-4f07-8085-3a2c4ca16031",
			"visible": true,
			"startLine": 2336,
			"endLine": 2341,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"07884426-3661-4afd-84bd-2d95ac503260": {
			"path": "07884426-3661-4afd-84bd-2d95ac503260",
			"cellName": "Export Flow: User Initiates Export - menu.ts:L154-157",
			"cellId": "07884426-3661-4afd-84bd-2d95ac503260",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-ea2fa0b3-d112-4d0f-ae15-13f78ea94830": {
			"path": "src/main/menu.ts-simstep-ea2fa0b3-d112-4d0f-ae15-13f78ea94830",
			"fileName": "menu.ts",
			"wiki": "The user navigates to the 'File' -> 'Export project' menu and selects a format, for example, 'Times in seconds (CSV)'. This action triggers a `click` event handler in the main process.",
			"cellName": "Export Flow: User Initiates Export - menu.ts:L154-157",
			"cellId": "07884426-3661-4afd-84bd-2d95ac503260",
			"visible": true,
			"startLine": 154,
			"endLine": 157,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"c4b9525b-fa35-4273-ab18-aae9e291bdde": {
			"path": "c4b9525b-fa35-4273-ab18-aae9e291bdde",
			"cellName": "Export Flow: Renderer Receives Export Request - App.tsx:L2316-2321",
			"cellId": "c4b9525b-fa35-4273-ab18-aae9e291bdde",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-135656a2-a458-49f3-993c-c810e9de3e9a": {
			"path": "src/renderer/src/App.tsx-simstep-135656a2-a458-49f3-993c-c810e9de3e9a",
			"fileName": "App.tsx",
			"wiki": "The renderer process's IPC listener for `exportEdlFile` invokes the `tryExportEdlFile` function defined in the `App` component.",
			"cellName": "Export Flow: Renderer Receives Export Request - App.tsx:L2316-2321",
			"cellId": "c4b9525b-fa35-4273-ab18-aae9e291bdde",
			"visible": true,
			"startLine": 2316,
			"endLine": 2321,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"362d362c-47d4-481b-8691-e9fd87d7311f": {
			"path": "362d362c-47d4-481b-8691-e9fd87d7311f",
			"cellName": "Export Flow: Format Segment Data - edlStore.ts:L202",
			"cellId": "362d362c-47d4-481b-8691-e9fd87d7311f",
			"visible": true,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf"
		},
		"src/renderer/src/edlStore.ts-simstep-c60cb2ff-055f-459f-adb1-ede0e4696123": {
			"path": "src/renderer/src/edlStore.ts-simstep-c60cb2ff-055f-459f-adb1-ede0e4696123",
			"fileName": "edlStore.ts",
			"wiki": "Inside `exportEdlFile` in `edlStore.ts`, a `switch` statement selects the appropriate formatting function from `edlFormats.ts` based on the export type. For 'csv', it calls `formatCsvSeconds`, which converts the segment objects into a CSV-formatted string.",
			"cellName": "Export Flow: Format Segment Data - edlStore.ts:L202",
			"cellId": "362d362c-47d4-481b-8691-e9fd87d7311f",
			"visible": true,
			"startLine": 202,
			"endLine": 202,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"51002018-47ae-42b5-a51a-6cc103e3d397": {
			"path": "51002018-47ae-42b5-a51a-6cc103e3d397",
			"cellName": "Export Flow: Write Data to File - edlStore.ts:L252-257",
			"cellId": "51002018-47ae-42b5-a51a-6cc103e3d397",
			"visible": true,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf"
		},
		"src/renderer/src/edlStore.ts-simstep-e7014807-34fb-4755-b27e-f90f2250ddda": {
			"path": "src/renderer/src/edlStore.ts-simstep-e7014807-34fb-4755-b27e-f90f2250ddda",
			"fileName": "edlStore.ts",
			"wiki": "`exportEdlFile` prompts the user with a 'Save File' dialog to choose a location and filename. After the user confirms, the formatted string is written to the specified file on disk.",
			"cellName": "Export Flow: Write Data to File - edlStore.ts:L252-257",
			"cellId": "51002018-47ae-42b5-a51a-6cc103e3d397",
			"visible": true,
			"startLine": 252,
			"endLine": 257,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf",
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6": {
			"path": "c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6",
			"cellName": "Import Flow:\nIPC Message\nfrom Main\nto Renderer",
			"cellId": "c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-ae71618e-a4ed-4f87-bc77-dfaf30be84b3-c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6": {
			"path": "generated-edge-simstep-ae71618e-a4ed-4f87-bc77-dfaf30be84b3-c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6",
			"fileName": "menu.ts",
			"cellName": "Import Flow: IPC Message from Main to Renderer",
			"cellId": "c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6",
			"visible": true,
			"startLine": 88,
			"endLine": 88,
			"parentPath": "src/main/menu.ts"
		},
		"e2e7f492-a2c2-4697-8cd7-07b3379c0c85": {
			"path": "e2e7f492-a2c2-4697-8cd7-07b3379c0c85",
			"cellName": "Import Flow:\nRequesting File\nSelection",
			"cellId": "e2e7f492-a2c2-4697-8cd7-07b3379c0c85",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-17aec12a-a2b2-49d2-b468-12b1fb104185-e2e7f492-a2c2-4697-8cd7-07b3379c0c85": {
			"path": "generated-edge-simstep-17aec12a-a2b2-49d2-b468-12b1fb104185-e2e7f492-a2c2-4697-8cd7-07b3379c0c85",
			"fileName": "App.tsx",
			"cellName": "Import Flow: Requesting File Selection",
			"cellId": "e2e7f492-a2c2-4697-8cd7-07b3379c0c85",
			"visible": true,
			"startLine": 2334,
			"endLine": 2334,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"c05f5940-5d49-4b71-86a4-ebd439e5d880": {
			"path": "c05f5940-5d49-4b71-86a4-ebd439e5d880",
			"cellName": "Import Flow:\nPassing File\nPath to\nParser",
			"cellId": "c05f5940-5d49-4b71-86a4-ebd439e5d880",
			"visible": true,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf"
		},
		"generated-edge-simstep-b3097023-d096-4a92-95d8-108e4c845f51-c05f5940-5d49-4b71-86a4-ebd439e5d880": {
			"path": "generated-edge-simstep-b3097023-d096-4a92-95d8-108e4c845f51-c05f5940-5d49-4b71-86a4-ebd439e5d880",
			"fileName": "edlStore.ts",
			"cellName": "Import Flow: Passing File Path to Parser",
			"cellId": "c05f5940-5d49-4b71-86a4-ebd439e5d880",
			"visible": true,
			"startLine": 180,
			"endLine": 180,
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"03708460-4037-41be-89d7-25b13e01cf46": {
			"path": "03708460-4037-41be-89d7-25b13e01cf46",
			"cellName": "Import Flow:\nReturn Parsed\nSegments",
			"cellId": "03708460-4037-41be-89d7-25b13e01cf46",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-37434817-ce91-49d8-81e9-e5c32a4aabfc-03708460-4037-41be-89d7-25b13e01cf46": {
			"path": "generated-edge-simstep-37434817-ce91-49d8-81e9-e5c32a4aabfc-03708460-4037-41be-89d7-25b13e01cf46",
			"fileName": "edlStore.ts",
			"cellName": "Import Flow: Return Parsed Segments",
			"cellId": "03708460-4037-41be-89d7-25b13e01cf46",
			"visible": true,
			"startLine": 180,
			"endLine": 180,
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"46418920-153e-4c85-97a1-9d7468c27c4a": {
			"path": "46418920-153e-4c85-97a1-9d7468c27c4a",
			"cellName": "Export Flow:\nIPC Message\nfrom Main\nto Renderer",
			"cellId": "46418920-153e-4c85-97a1-9d7468c27c4a",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-c5621546-2cd2-4573-ba65-5a175cbe2092-46418920-153e-4c85-97a1-9d7468c27c4a": {
			"path": "generated-edge-simstep-c5621546-2cd2-4573-ba65-5a175cbe2092-46418920-153e-4c85-97a1-9d7468c27c4a",
			"fileName": "menu.ts",
			"cellName": "Export Flow: IPC Message from Main to Renderer",
			"cellId": "46418920-153e-4c85-97a1-9d7468c27c4a",
			"visible": true,
			"startLine": 156,
			"endLine": 156,
			"parentPath": "src/main/menu.ts"
		},
		"145fc4e6-761b-4430-8120-b3f3c4b52d0c": {
			"path": "145fc4e6-761b-4430-8120-b3f3c4b52d0c",
			"cellName": "Export Flow:\nPassing Segments\nto Export\nLogic",
			"cellId": "145fc4e6-761b-4430-8120-b3f3c4b52d0c",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-24995595-2411-4103-8c32-238672487486-145fc4e6-761b-4430-8120-b3f3c4b52d0c": {
			"path": "generated-edge-simstep-24995595-2411-4103-8c32-238672487486-145fc4e6-761b-4430-8120-b3f3c4b52d0c",
			"fileName": "App.tsx",
			"cellName": "Export Flow: Passing Segments to Export Logic",
			"cellId": "145fc4e6-761b-4430-8120-b3f3c4b52d0c",
			"visible": true,
			"startLine": 2319,
			"endLine": 2319,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"98244205-26ff-4fba-9c22-05113a50c751": {
			"path": "98244205-26ff-4fba-9c22-05113a50c751",
			"cellName": "Export Flow:\nReturn Formatted\nString for\nSaving",
			"cellId": "98244205-26ff-4fba-9c22-05113a50c751",
			"visible": true,
			"parentCellId": "51a0685c-765d-4aa4-968c-c08d907d9cbf"
		},
		"generated-edge-simstep-9df6ff84-6be0-4c5d-953c-3ffab39b8d73-98244205-26ff-4fba-9c22-05113a50c751": {
			"path": "generated-edge-simstep-9df6ff84-6be0-4c5d-953c-3ffab39b8d73-98244205-26ff-4fba-9c22-05113a50c751",
			"fileName": "edlStore.ts",
			"cellName": "Export Flow: Return Formatted String for Saving",
			"cellId": "98244205-26ff-4fba-9c22-05113a50c751",
			"visible": true,
			"startLine": 199,
			"endLine": 199,
			"parentPath": "src/renderer/src/edlStore.ts"
		},
		"dde9e8a3-d8fb-4ecb-ac6b-735a900b260a": {
			"path": "dde9e8a3-d8fb-4ecb-ac6b-735a900b260a",
			"cellName": "Scene Change Detection: User Action - menu.ts:L409-414",
			"cellId": "dde9e8a3-d8fb-4ecb-ac6b-735a900b260a",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-b992da02-5f62-4aaa-93a1-a3e35463a5ef": {
			"path": "src/main/menu.ts-simstep-b992da02-5f62-4aaa-93a1-a3e35463a5ef",
			"fileName": "menu.ts",
			"wiki": "The user initiates the scene change detection process by selecting the 'Detect scene changes' option from the 'Tools' menu.",
			"cellName": "Scene Change Detection: User Action - menu.ts:L409-414",
			"cellId": "dde9e8a3-d8fb-4ecb-ac6b-735a900b260a",
			"visible": true,
			"startLine": 409,
			"endLine": 414,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"c3f303b4-e2e4-4090-befc-9e5002d98c54": {
			"path": "c3f303b4-e2e4-4090-befc-9e5002d98c54",
			"cellName": "Scene Change Detection: Renderer Handles Action - App.tsx:L2148-2150",
			"cellId": "c3f303b4-e2e4-4090-befc-9e5002d98c54",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-4c52212b-5544-44fa-bb86-bf636c6ed96d": {
			"path": "src/renderer/src/App.tsx-simstep-4c52212b-5544-44fa-bb86-bf636c6ed96d",
			"fileName": "App.tsx",
			"wiki": "The renderer process receives the event (or a keyboard shortcut is used) and invokes the `detectSceneChanges` function, which is managed by the `useSegments` hook.",
			"cellName": "Scene Change Detection: Renderer Handles Action - App.tsx:L2148-2150",
			"cellId": "c3f303b4-e2e4-4090-befc-9e5002d98c54",
			"visible": true,
			"startLine": 2148,
			"endLine": 2150,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"6d93dcc6-f792-4d54-ac38-23a85ed98dbb": {
			"path": "6d93dcc6-f792-4d54-ac38-23a85ed98dbb",
			"cellName": "Scene Change Detection: Prompt for Parameters - useSegments.ts:L242-245",
			"cellId": "6d93dcc6-f792-4d54-ac38-23a85ed98dbb",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-1cdea182-4b51-444e-a4b4-056fc80443ed": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-1cdea182-4b51-444e-a4b4-056fc80443ed",
			"fileName": "useSegments.ts",
			"wiki": "The `detectSceneChanges` function in the `useSegments` hook displays a dialog to the user, asking for FFmpeg parameters, such as the scene change detection threshold.",
			"cellName": "Scene Change Detection: Prompt for Parameters - useSegments.ts:L242-245",
			"cellId": "6d93dcc6-f792-4d54-ac38-23a85ed98dbb",
			"visible": true,
			"startLine": 242,
			"endLine": 245,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"c309a726-3326-4aa5-8ee3-dd30fd3e1f3f": {
			"path": "c309a726-3326-4aa5-8ee3-dd30fd3e1f3f",
			"cellName": "Scene Change Detection: Execute FFmpeg in Main Process - ffmpeg.ts:L266-291",
			"cellId": "c309a726-3326-4aa5-8ee3-dd30fd3e1f3f",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-0bac87ea-95e9-4b90-b96a-d610a64c1fad": {
			"path": "src/main/ffmpeg.ts-simstep-0bac87ea-95e9-4b90-b96a-d610a64c1fad",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process constructs and executes an FFmpeg command using a special filter (`select='gt(scene,...)',showinfo`) to analyze the video file and detect scene changes.",
			"cellName": "Scene Change Detection: Execute FFmpeg in Main Process - ffmpeg.ts:L266-291",
			"cellId": "c309a726-3326-4aa5-8ee3-dd30fd3e1f3f",
			"visible": true,
			"startLine": 266,
			"endLine": 291,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"7c8418ca-bf26-48d9-987c-226cd976d0cb": {
			"path": "7c8418ca-bf26-48d9-987c-226cd976d0cb",
			"cellName": "Scene Change Detection: Create Segments from Timestamps - ffmpeg.ts:L308-321",
			"cellId": "7c8418ca-bf26-48d9-987c-226cd976d0cb",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-18233949-03d9-416d-9f03-60d3458ac1ed": {
			"path": "src/main/ffmpeg.ts-simstep-18233949-03d9-416d-9f03-60d3458ac1ed",
			"fileName": "ffmpeg.ts",
			"wiki": "For each detected scene change, a new segment is created. The end time of the previous segment (or the start of the timeline) becomes the start time of the new segment, and the scene change timestamp becomes the end time.",
			"cellName": "Scene Change Detection: Create Segments from Timestamps - ffmpeg.ts:L308-321",
			"cellId": "7c8418ca-bf26-48d9-987c-226cd976d0cb",
			"visible": true,
			"startLine": 308,
			"endLine": 321,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"2c017872-e3f8-48aa-9e1e-93d2bc3bf809": {
			"path": "2c017872-e3f8-48aa-9e1e-93d2bc3bf809",
			"cellName": "Scene Change Detection: Update UI State - useSegments.ts:L249-250",
			"cellId": "2c017872-e3f8-48aa-9e1e-93d2bc3bf809",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-c33d12c2-3be2-4b6e-92c2-d91da2671f38": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-c33d12c2-3be2-4b6e-92c2-d91da2671f38",
			"fileName": "useSegments.ts",
			"wiki": "In the renderer, the `useSegments` hook receives the new segments and updates the application's state, adding the segments to the list of `cutSegments`.",
			"cellName": "Scene Change Detection: Update UI State - useSegments.ts:L249-250",
			"cellId": "2c017872-e3f8-48aa-9e1e-93d2bc3bf809",
			"visible": true,
			"startLine": 249,
			"endLine": 250,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"f5d29e71-82ea-4b6e-a74a-5283380ec5db": {
			"path": "f5d29e71-82ea-4b6e-a74a-5283380ec5db",
			"cellName": "Scene Change Detection: UI Re-renders - App.tsx:L119-2303",
			"cellId": "f5d29e71-82ea-4b6e-a74a-5283380ec5db",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-1ca4cb05-7428-4d6c-9fb6-fd4805b4f3a5": {
			"path": "src/renderer/src/App.tsx-simstep-1ca4cb05-7428-4d6c-9fb6-fd4805b4f3a5",
			"fileName": "App.tsx",
			"wiki": "The application's UI re-renders to display the newly created segments on the timeline and in the segment list, making them available for the user to review and edit.",
			"cellName": "Scene Change Detection: UI Re-renders - App.tsx:L119-2303",
			"cellId": "f5d29e71-82ea-4b6e-a74a-5283380ec5db",
			"visible": true,
			"startLine": 119,
			"endLine": 2303,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"f42707c2-1bec-4d3a-b361-0109ee9763e1": {
			"path": "f42707c2-1bec-4d3a-b361-0109ee9763e1",
			"cellName": "Black Scene Detection: User Action - menu.ts:L409-414",
			"cellId": "f42707c2-1bec-4d3a-b361-0109ee9763e1",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-cf6724c3-63f2-4fea-9f76-0d246ed4091d": {
			"path": "src/main/menu.ts-simstep-cf6724c3-63f2-4fea-9f76-0d246ed4091d",
			"fileName": "menu.ts",
			"wiki": "The user initiates the black scene detection process from the 'Tools' menu or a keyboard shortcut.",
			"cellName": "Black Scene Detection: User Action - menu.ts:L409-414",
			"cellId": "f42707c2-1bec-4d3a-b361-0109ee9763e1",
			"visible": true,
			"startLine": 409,
			"endLine": 414,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"f91cbaa0-5b5a-4970-a009-ba0c59cd26ce": {
			"path": "f91cbaa0-5b5a-4970-a009-ba0c59cd26ce",
			"cellName": "Black Scene Detection: Renderer Handles Action - useSegments.ts:L209-222",
			"cellId": "f91cbaa0-5b5a-4970-a009-ba0c59cd26ce",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-a6f0b3bd-e549-429d-bb9d-63e7e803bfc8": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-a6f0b3bd-e549-429d-bb9d-63e7e803bfc8",
			"fileName": "useSegments.ts",
			"wiki": "The renderer process event handler invokes the `detectBlackScenes` function from the `useSegments` hook.",
			"cellName": "Black Scene Detection: Renderer Handles Action - useSegments.ts:L209-222",
			"cellId": "f91cbaa0-5b5a-4970-a009-ba0c59cd26ce",
			"visible": true,
			"startLine": 209,
			"endLine": 222,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"029628fc-7041-4720-b517-641ab3ed4f09": {
			"path": "029628fc-7041-4720-b517-641ab3ed4f09",
			"cellName": "Black Scene Detection: Prompt for Parameters - useSegments.ts:L212-214",
			"cellId": "029628fc-7041-4720-b517-641ab3ed4f09",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-3f2abab7-26b5-4cb6-89f5-0f45711999dd": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-3f2abab7-26b5-4cb6-89f5-0f45711999dd",
			"fileName": "useSegments.ts",
			"wiki": "The `detectBlackScenes` function displays a dialog for the user to configure FFmpeg's `blackdetect` filter parameters, like minimum duration and pixel blackness threshold.",
			"cellName": "Black Scene Detection: Prompt for Parameters - useSegments.ts:L212-214",
			"cellId": "029628fc-7041-4720-b517-641ab3ed4f09",
			"visible": true,
			"startLine": 212,
			"endLine": 214,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"ab8351cf-d45b-4d7e-83a8-61a4c8d127cd": {
			"path": "ab8351cf-d45b-4d7e-83a8-61a4c8d127cd",
			"cellName": "Black Scene Detection: Execute FFmpeg in Main Process - ffmpeg.ts:L360-398",
			"cellId": "ab8351cf-d45b-4d7e-83a8-61a4c8d127cd",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-2f1972b9-2423-4435-ab4d-9e7f6f0feb07": {
			"path": "src/main/ffmpeg.ts-simstep-2f1972b9-2423-4435-ab4d-9e7f6f0feb07",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process runs FFmpeg with the `blackdetect` video filter, which analyzes the video for sections of black screen that match the user's parameters.",
			"cellName": "Black Scene Detection: Execute FFmpeg in Main Process - ffmpeg.ts:L360-398",
			"cellId": "ab8351cf-d45b-4d7e-83a8-61a4c8d127cd",
			"visible": true,
			"startLine": 360,
			"endLine": 398,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"f051e287-d1a6-4049-93e1-3c81facb3df1": {
			"path": "f051e287-d1a6-4049-93e1-3c81facb3df1",
			"cellName": "Black Scene Detection: Create Segments - ffmpeg.ts:L390-391",
			"cellId": "f051e287-d1a6-4049-93e1-3c81facb3df1",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-9805d75f-b533-4ea9-b818-6a76d9d711c6": {
			"path": "src/main/ffmpeg.ts-simstep-9805d75f-b533-4ea9-b818-6a76d9d711c6",
			"fileName": "ffmpeg.ts",
			"wiki": "Using the parsed start and end times, new segments are created that correspond to the detected periods of black screen.",
			"cellName": "Black Scene Detection: Create Segments - ffmpeg.ts:L390-391",
			"cellId": "f051e287-d1a6-4049-93e1-3c81facb3df1",
			"visible": true,
			"startLine": 390,
			"endLine": 391,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"d722089a-093a-42d6-aaf2-ee9e6178acd0": {
			"path": "d722089a-093a-42d6-aaf2-ee9e6178acd0",
			"cellName": "Black Scene Detection: Update UI State - useSegments.ts:L219-220",
			"cellId": "d722089a-093a-42d6-aaf2-ee9e6178acd0",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-16f32b79-4285-44ec-ad28-f2604efffa04": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-16f32b79-4285-44ec-ad28-f2604efffa04",
			"fileName": "useSegments.ts",
			"wiki": "The renderer's `useSegments` hook receives the new segments and updates the `cutSegments` state.",
			"cellName": "Black Scene Detection: Update UI State - useSegments.ts:L219-220",
			"cellId": "d722089a-093a-42d6-aaf2-ee9e6178acd0",
			"visible": true,
			"startLine": 219,
			"endLine": 220,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"181779b8-2613-4af1-bc9d-6c2c507bd6eb": {
			"path": "181779b8-2613-4af1-bc9d-6c2c507bd6eb",
			"cellName": "Black Scene Detection: UI Re-renders - App.tsx:L119-2303",
			"cellId": "181779b8-2613-4af1-bc9d-6c2c507bd6eb",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-cae15d6b-d7e1-4b5e-9ce7-dae4e42a933c": {
			"path": "src/renderer/src/App.tsx-simstep-cae15d6b-d7e1-4b5e-9ce7-dae4e42a933c",
			"fileName": "App.tsx",
			"wiki": "The UI re-renders to display the new segments on the timeline.",
			"cellName": "Black Scene Detection: UI Re-renders - App.tsx:L119-2303",
			"cellId": "181779b8-2613-4af1-bc9d-6c2c507bd6eb",
			"visible": true,
			"startLine": 119,
			"endLine": 2303,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"11927875-24e2-47bf-a306-246eca2d904c": {
			"path": "11927875-24e2-47bf-a306-246eca2d904c",
			"cellName": "Silence Detection: User Action - menu.ts:L409-414",
			"cellId": "11927875-24e2-47bf-a306-246eca2d904c",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-1c93d318-c5b8-40b2-915f-dd98944b456f": {
			"path": "src/main/menu.ts-simstep-1c93d318-c5b8-40b2-915f-dd98944b456f",
			"fileName": "menu.ts",
			"wiki": "The user initiates the silence detection process from the 'Tools' menu or a keyboard shortcut.",
			"cellName": "Silence Detection: User Action - menu.ts:L409-414",
			"cellId": "11927875-24e2-47bf-a306-246eca2d904c",
			"visible": true,
			"startLine": 409,
			"endLine": 414,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"1d6d2fd0-31d7-4823-b8c0-5ef8394db821": {
			"path": "1d6d2fd0-31d7-4823-b8c0-5ef8394db821",
			"cellName": "Silence Detection: Renderer Handles Action - useSegments.ts:L224-237",
			"cellId": "1d6d2fd0-31d7-4823-b8c0-5ef8394db821",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-5c7764e5-4dca-4f31-a65f-b1a673566eb3": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-5c7764e5-4dca-4f31-a65f-b1a673566eb3",
			"fileName": "useSegments.ts",
			"wiki": "The renderer process event handler invokes the `detectSilentScenes` function from the `useSegments` hook.",
			"cellName": "Silence Detection: Renderer Handles Action - useSegments.ts:L224-237",
			"cellId": "1d6d2fd0-31d7-4823-b8c0-5ef8394db821",
			"visible": true,
			"startLine": 224,
			"endLine": 237,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"2c637b16-8c1d-43fa-a290-f0254dedfd76": {
			"path": "2c637b16-8c1d-43fa-a290-f0254dedfd76",
			"cellName": "Silence Detection: Prompt for Parameters - useSegments.ts:L227-229",
			"cellId": "2c637b16-8c1d-43fa-a290-f0254dedfd76",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-797fc0c1-5508-455b-a075-6c9bbdfe99e2": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-797fc0c1-5508-455b-a075-6c9bbdfe99e2",
			"fileName": "useSegments.ts",
			"wiki": "The `detectSilentScenes` function displays a dialog for the user to configure FFmpeg's `silencedetect` filter parameters, such as noise tolerance and minimum silence duration.",
			"cellName": "Silence Detection: Prompt for Parameters - useSegments.ts:L227-229",
			"cellId": "2c637b16-8c1d-43fa-a290-f0254dedfd76",
			"visible": true,
			"startLine": 227,
			"endLine": 229,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"695f434e-8d1a-4d6d-a361-98ddce752592": {
			"path": "695f434e-8d1a-4d6d-a361-98ddce752592",
			"cellName": "Silence Detection: Execute FFmpeg in Main Process - ffmpeg.ts:L400-438",
			"cellId": "695f434e-8d1a-4d6d-a361-98ddce752592",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-b43e3810-6711-4961-9ce9-1e9be832eaa1": {
			"path": "src/main/ffmpeg.ts-simstep-b43e3810-6711-4961-9ce9-1e9be832eaa1",
			"fileName": "ffmpeg.ts",
			"wiki": "The main process runs FFmpeg with the `silencedetect` audio filter to analyze the audio track for periods of silence.",
			"cellName": "Silence Detection: Execute FFmpeg in Main Process - ffmpeg.ts:L400-438",
			"cellId": "695f434e-8d1a-4d6d-a361-98ddce752592",
			"visible": true,
			"startLine": 400,
			"endLine": 438,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"c5799ea3-3e22-4b94-bb3b-ccb2a4e74274": {
			"path": "c5799ea3-3e22-4b94-bb3b-ccb2a4e74274",
			"cellName": "Silence Detection: Create Segments - ffmpeg.ts:L424-431",
			"cellId": "c5799ea3-3e22-4b94-bb3b-ccb2a4e74274",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"src/main/ffmpeg.ts-simstep-774494bf-6b3a-4d1e-9195-a7e8cc4b2fdb": {
			"path": "src/main/ffmpeg.ts-simstep-774494bf-6b3a-4d1e-9195-a7e8cc4b2fdb",
			"fileName": "ffmpeg.ts",
			"wiki": "Using the parsed end time and duration, the start and end times of the silent period are calculated, and a new segment is created.",
			"cellName": "Silence Detection: Create Segments - ffmpeg.ts:L424-431",
			"cellId": "c5799ea3-3e22-4b94-bb3b-ccb2a4e74274",
			"visible": true,
			"startLine": 424,
			"endLine": 431,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d",
			"parentPath": "src/main/ffmpeg.ts"
		},
		"a528150e-5b40-4ad2-bb8d-237e21afb878": {
			"path": "a528150e-5b40-4ad2-bb8d-237e21afb878",
			"cellName": "Silence Detection: Update UI State - useSegments.ts:L234-235",
			"cellId": "a528150e-5b40-4ad2-bb8d-237e21afb878",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"src/renderer/src/hooks/useSegments.ts-simstep-308cbc54-1373-4fcc-b1de-d73455e969ef": {
			"path": "src/renderer/src/hooks/useSegments.ts-simstep-308cbc54-1373-4fcc-b1de-d73455e969ef",
			"fileName": "useSegments.ts",
			"wiki": "The renderer's `useSegments` hook receives the new segments and updates the `cutSegments` state.",
			"cellName": "Silence Detection: Update UI State - useSegments.ts:L234-235",
			"cellId": "a528150e-5b40-4ad2-bb8d-237e21afb878",
			"visible": true,
			"startLine": 234,
			"endLine": 235,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b",
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"35f5a086-80c0-4e6a-8f6e-08603af2f796": {
			"path": "35f5a086-80c0-4e6a-8f6e-08603af2f796",
			"cellName": "Silence Detection: UI Re-renders - App.tsx:L119-2303",
			"cellId": "35f5a086-80c0-4e6a-8f6e-08603af2f796",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-9dad773b-01f8-4039-b042-6bb40d40fc14": {
			"path": "src/renderer/src/App.tsx-simstep-9dad773b-01f8-4039-b042-6bb40d40fc14",
			"fileName": "App.tsx",
			"wiki": "The UI re-renders to display the new silent segments on the timeline.",
			"cellName": "Silence Detection: UI Re-renders - App.tsx:L119-2303",
			"cellId": "35f5a086-80c0-4e6a-8f6e-08603af2f796",
			"visible": true,
			"startLine": 119,
			"endLine": 2303,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"2362a313-cd9a-47d0-8046-0a88e6f0cf7a": {
			"path": "2362a313-cd9a-47d0-8046-0a88e6f0cf7a",
			"cellName": "Scene Change\nDetection: IPC\nCall to\nRenderer",
			"cellId": "2362a313-cd9a-47d0-8046-0a88e6f0cf7a",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-942ca4c1-0b3b-4030-bb6f-c985dc07187c-2362a313-cd9a-47d0-8046-0a88e6f0cf7a": {
			"path": "generated-edge-simstep-942ca4c1-0b3b-4030-bb6f-c985dc07187c-2362a313-cd9a-47d0-8046-0a88e6f0cf7a",
			"fileName": "menu.ts",
			"cellName": "Scene Change Detection: IPC Call to Renderer",
			"cellId": "2362a313-cd9a-47d0-8046-0a88e6f0cf7a",
			"visible": true,
			"startLine": 412,
			"endLine": 412,
			"parentPath": "src/main/menu.ts"
		},
		"f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229": {
			"path": "f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229",
			"cellName": "Scene Change\nDetection: Data\nFlow to\nHook",
			"cellId": "f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-d289f805-d0d6-45cf-922b-71450e8f8fa3-f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229": {
			"path": "generated-edge-simstep-d289f805-d0d6-45cf-922b-71450e8f8fa3-f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229",
			"fileName": "App.tsx",
			"cellName": "Scene Change Detection: Data Flow to Hook",
			"cellId": "f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229",
			"visible": true,
			"startLine": 364,
			"endLine": 364,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"3e0b0a5f-1e92-41b5-85b2-194b46efce9b": {
			"path": "3e0b0a5f-1e92-41b5-85b2-194b46efce9b",
			"cellName": "Scene Change\nDetection: Renderer\nto Main\nProcess RPC",
			"cellId": "3e0b0a5f-1e92-41b5-85b2-194b46efce9b",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-e9f2e013-dab0-4b7e-a8e9-73e3188a3fb4-3e0b0a5f-1e92-41b5-85b2-194b46efce9b": {
			"path": "generated-edge-simstep-e9f2e013-dab0-4b7e-a8e9-73e3188a3fb4-3e0b0a5f-1e92-41b5-85b2-194b46efce9b",
			"fileName": "useSegments.ts",
			"cellName": "Scene Change Detection: Renderer to Main Process RPC",
			"cellId": "3e0b0a5f-1e92-41b5-85b2-194b46efce9b",
			"visible": true,
			"startLine": 249,
			"endLine": 250,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"c9abdd34-d0dc-42a2-ab2f-eec81d35670b": {
			"path": "c9abdd34-d0dc-42a2-ab2f-eec81d35670b",
			"cellName": "Scene Change\nDetection: Parse\nFFmpeg Output",
			"cellId": "c9abdd34-d0dc-42a2-ab2f-eec81d35670b",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"generated-edge-simstep-58bb9984-782b-467f-bded-126a954a5639-c9abdd34-d0dc-42a2-ab2f-eec81d35670b": {
			"path": "generated-edge-simstep-58bb9984-782b-467f-bded-126a954a5639-c9abdd34-d0dc-42a2-ab2f-eec81d35670b",
			"fileName": "ffmpeg.ts",
			"cellName": "Scene Change Detection: Parse FFmpeg Output",
			"cellId": "c9abdd34-d0dc-42a2-ab2f-eec81d35670b",
			"visible": true,
			"startLine": 294,
			"endLine": 306,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"a1577447-fd49-4251-a0b0-a62b3908fb0d": {
			"path": "a1577447-fd49-4251-a0b0-a62b3908fb0d",
			"cellName": "Scene Change\nDetection: Send\nSegments to\nRenderer",
			"cellId": "a1577447-fd49-4251-a0b0-a62b3908fb0d",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-c037e3c1-34d6-4bd4-a8ee-85eb1c7300d1-a1577447-fd49-4251-a0b0-a62b3908fb0d": {
			"path": "generated-edge-simstep-c037e3c1-34d6-4bd4-a8ee-85eb1c7300d1-a1577447-fd49-4251-a0b0-a62b3908fb0d",
			"fileName": "ffmpeg.ts",
			"cellName": "Scene Change Detection: Send Segments to Renderer",
			"cellId": "a1577447-fd49-4251-a0b0-a62b3908fb0d",
			"visible": true,
			"startLine": 320,
			"endLine": 320,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"cfd52763-30a8-444b-8e68-00cb81f6b267": {
			"path": "cfd52763-30a8-444b-8e68-00cb81f6b267",
			"cellName": "Scene Change\nDetection: State\nPropagation",
			"cellId": "cfd52763-30a8-444b-8e68-00cb81f6b267",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-716694dd-986f-43d5-a760-338d5cff8d42-cfd52763-30a8-444b-8e68-00cb81f6b267": {
			"path": "generated-edge-simstep-716694dd-986f-43d5-a760-338d5cff8d42-cfd52763-30a8-444b-8e68-00cb81f6b267",
			"fileName": "useSegments.ts",
			"cellName": "Scene Change Detection: State Propagation",
			"cellId": "cfd52763-30a8-444b-8e68-00cb81f6b267",
			"visible": true,
			"startLine": 363,
			"endLine": 363,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"52244aa2-c876-4d40-86da-b03ca034833b": {
			"path": "52244aa2-c876-4d40-86da-b03ca034833b",
			"cellName": "Black Scene\nDetection: IPC\nCall to\nRenderer",
			"cellId": "52244aa2-c876-4d40-86da-b03ca034833b",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-3db429cb-97bd-4ee0-b686-30adecec12c2-52244aa2-c876-4d40-86da-b03ca034833b": {
			"path": "generated-edge-simstep-3db429cb-97bd-4ee0-b686-30adecec12c2-52244aa2-c876-4d40-86da-b03ca034833b",
			"fileName": "menu.ts",
			"cellName": "Black Scene Detection: IPC Call to Renderer",
			"cellId": "52244aa2-c876-4d40-86da-b03ca034833b",
			"visible": true,
			"startLine": 412,
			"endLine": 412,
			"parentPath": "src/main/menu.ts"
		},
		"e4ccaa03-af51-465d-b6b9-db7fc6496ddd": {
			"path": "e4ccaa03-af51-465d-b6b9-db7fc6496ddd",
			"cellName": "Black Scene\nDetection: Data\nFlow to\nHook",
			"cellId": "e4ccaa03-af51-465d-b6b9-db7fc6496ddd",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"generated-edge-simstep-8f883cc7-a085-4397-9db8-ec659b4a6efc-e4ccaa03-af51-465d-b6b9-db7fc6496ddd": {
			"path": "generated-edge-simstep-8f883cc7-a085-4397-9db8-ec659b4a6efc-e4ccaa03-af51-465d-b6b9-db7fc6496ddd",
			"fileName": "useSegments.ts",
			"cellName": "Black Scene Detection: Data Flow to Hook",
			"cellId": "e4ccaa03-af51-465d-b6b9-db7fc6496ddd",
			"visible": true,
			"startLine": 364,
			"endLine": 364,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"0598d104-2e45-4a38-b37c-74019b0cd15b": {
			"path": "0598d104-2e45-4a38-b37c-74019b0cd15b",
			"cellName": "Black Scene\nDetection: Renderer\nto Main\nProcess RPC",
			"cellId": "0598d104-2e45-4a38-b37c-74019b0cd15b",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-97903c39-e1b1-4b11-82d7-ade16db77b3b-0598d104-2e45-4a38-b37c-74019b0cd15b": {
			"path": "generated-edge-simstep-97903c39-e1b1-4b11-82d7-ade16db77b3b-0598d104-2e45-4a38-b37c-74019b0cd15b",
			"fileName": "useSegments.ts",
			"cellName": "Black Scene Detection: Renderer to Main Process RPC",
			"cellId": "0598d104-2e45-4a38-b37c-74019b0cd15b",
			"visible": true,
			"startLine": 219,
			"endLine": 220,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"da0d25a6-1ea4-40af-983f-3a60c179ac65": {
			"path": "da0d25a6-1ea4-40af-983f-3a60c179ac65",
			"cellName": "Black Scene\nDetection: Parse\nFFmpeg Output",
			"cellId": "da0d25a6-1ea4-40af-983f-3a60c179ac65",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"generated-edge-simstep-2235bea4-735d-4379-a4f5-ff40341d3055-da0d25a6-1ea4-40af-983f-3a60c179ac65": {
			"path": "generated-edge-simstep-2235bea4-735d-4379-a4f5-ff40341d3055-da0d25a6-1ea4-40af-983f-3a60c179ac65",
			"fileName": "ffmpeg.ts",
			"cellName": "Black Scene Detection: Parse FFmpeg Output",
			"cellId": "da0d25a6-1ea4-40af-983f-3a60c179ac65",
			"visible": true,
			"startLine": 378,
			"endLine": 384,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"6ba47f79-b230-4a5f-a922-dfa59978ce2a": {
			"path": "6ba47f79-b230-4a5f-a922-dfa59978ce2a",
			"cellName": "Black Scene\nDetection: Send\nSegments to\nRenderer",
			"cellId": "6ba47f79-b230-4a5f-a922-dfa59978ce2a",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-fa17a8cb-5edb-4910-9c6b-4ac69f072ea8-6ba47f79-b230-4a5f-a922-dfa59978ce2a": {
			"path": "generated-edge-simstep-fa17a8cb-5edb-4910-9c6b-4ac69f072ea8-6ba47f79-b230-4a5f-a922-dfa59978ce2a",
			"fileName": "ffmpeg.ts",
			"cellName": "Black Scene Detection: Send Segments to Renderer",
			"cellId": "6ba47f79-b230-4a5f-a922-dfa59978ce2a",
			"visible": true,
			"startLine": 220,
			"endLine": 220,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"8b2b6b30-2303-4de0-90de-52a587fbd82a": {
			"path": "8b2b6b30-2303-4de0-90de-52a587fbd82a",
			"cellName": "Black Scene\nDetection: State\nPropagation",
			"cellId": "8b2b6b30-2303-4de0-90de-52a587fbd82a",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-39ac225b-621d-4c7f-8acd-ad62163944b8-8b2b6b30-2303-4de0-90de-52a587fbd82a": {
			"path": "generated-edge-simstep-39ac225b-621d-4c7f-8acd-ad62163944b8-8b2b6b30-2303-4de0-90de-52a587fbd82a",
			"fileName": "useSegments.ts",
			"cellName": "Black Scene Detection: State Propagation",
			"cellId": "8b2b6b30-2303-4de0-90de-52a587fbd82a",
			"visible": true,
			"startLine": 363,
			"endLine": 363,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122": {
			"path": "d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122",
			"cellName": "Silence Detection:\nIPC Call\nto Renderer",
			"cellId": "d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-314dd6fd-7f2d-4666-99e3-0abf299c03dc-d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122": {
			"path": "generated-edge-simstep-314dd6fd-7f2d-4666-99e3-0abf299c03dc-d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122",
			"fileName": "menu.ts",
			"cellName": "Silence Detection: IPC Call to Renderer",
			"cellId": "d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122",
			"visible": true,
			"startLine": 412,
			"endLine": 412,
			"parentPath": "src/main/menu.ts"
		},
		"2111c6c0-2531-4109-9dbb-5c84f6a5bb81": {
			"path": "2111c6c0-2531-4109-9dbb-5c84f6a5bb81",
			"cellName": "Silence Detection:\nData Flow\nto Hook",
			"cellId": "2111c6c0-2531-4109-9dbb-5c84f6a5bb81",
			"visible": true,
			"parentCellId": "f0a31c3e-73fe-43c5-b4f5-f4f6573c383b"
		},
		"generated-edge-simstep-1b248f07-2566-4457-9fba-18a447b0261a-2111c6c0-2531-4109-9dbb-5c84f6a5bb81": {
			"path": "generated-edge-simstep-1b248f07-2566-4457-9fba-18a447b0261a-2111c6c0-2531-4109-9dbb-5c84f6a5bb81",
			"fileName": "useSegments.ts",
			"cellName": "Silence Detection: Data Flow to Hook",
			"cellId": "2111c6c0-2531-4109-9dbb-5c84f6a5bb81",
			"visible": true,
			"startLine": 364,
			"endLine": 364,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"8900a419-1ca4-4df4-958f-b19146d42fdf": {
			"path": "8900a419-1ca4-4df4-958f-b19146d42fdf",
			"cellName": "Silence Detection:\nRenderer to\nMain Process\nRPC",
			"cellId": "8900a419-1ca4-4df4-958f-b19146d42fdf",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-1ebc0436-9f5a-4d2c-8a37-b311ddbbaef7-8900a419-1ca4-4df4-958f-b19146d42fdf": {
			"path": "generated-edge-simstep-1ebc0436-9f5a-4d2c-8a37-b311ddbbaef7-8900a419-1ca4-4df4-958f-b19146d42fdf",
			"fileName": "useSegments.ts",
			"cellName": "Silence Detection: Renderer to Main Process RPC",
			"cellId": "8900a419-1ca4-4df4-958f-b19146d42fdf",
			"visible": true,
			"startLine": 234,
			"endLine": 235,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"a529e3fe-f14c-4fa3-8ec8-6a5f040a72da": {
			"path": "a529e3fe-f14c-4fa3-8ec8-6a5f040a72da",
			"cellName": "Silence Detection:\nParse FFmpeg\nOutput",
			"cellId": "a529e3fe-f14c-4fa3-8ec8-6a5f040a72da",
			"visible": true,
			"parentCellId": "a6ad9034-13b9-4b6c-9263-6ade6324aa5d"
		},
		"generated-edge-simstep-d6f1a3a6-c3d0-4809-9d11-ede1e7da29ba-a529e3fe-f14c-4fa3-8ec8-6a5f040a72da": {
			"path": "generated-edge-simstep-d6f1a3a6-c3d0-4809-9d11-ede1e7da29ba-a529e3fe-f14c-4fa3-8ec8-6a5f040a72da",
			"fileName": "ffmpeg.ts",
			"cellName": "Silence Detection: Parse FFmpeg Output",
			"cellId": "a529e3fe-f14c-4fa3-8ec8-6a5f040a72da",
			"visible": true,
			"startLine": 417,
			"endLine": 423,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"6f24a616-1edf-4990-a60a-b62a4401ae33": {
			"path": "6f24a616-1edf-4990-a60a-b62a4401ae33",
			"cellName": "Silence Detection:\nSend Segments\nto Renderer",
			"cellId": "6f24a616-1edf-4990-a60a-b62a4401ae33",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-933f5032-0470-4711-ab5a-f3776528006f-6f24a616-1edf-4990-a60a-b62a4401ae33": {
			"path": "generated-edge-simstep-933f5032-0470-4711-ab5a-f3776528006f-6f24a616-1edf-4990-a60a-b62a4401ae33",
			"fileName": "ffmpeg.ts",
			"cellName": "Silence Detection: Send Segments to Renderer",
			"cellId": "6f24a616-1edf-4990-a60a-b62a4401ae33",
			"visible": true,
			"startLine": 235,
			"endLine": 235,
			"parentPath": "src/main/ffmpeg.ts"
		},
		"59896773-97d4-463a-a667-8e89e735a03d": {
			"path": "59896773-97d4-463a-a667-8e89e735a03d",
			"cellName": "Silence Detection:\nState Propagation",
			"cellId": "59896773-97d4-463a-a667-8e89e735a03d",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-98e32875-67ff-4c98-983e-e267d3a0ebd4-59896773-97d4-463a-a667-8e89e735a03d": {
			"path": "generated-edge-simstep-98e32875-67ff-4c98-983e-e267d3a0ebd4-59896773-97d4-463a-a667-8e89e735a03d",
			"fileName": "useSegments.ts",
			"cellName": "Silence Detection: State Propagation",
			"cellId": "59896773-97d4-463a-a667-8e89e735a03d",
			"visible": true,
			"startLine": 363,
			"endLine": 363,
			"parentPath": "src/renderer/src/hooks/useSegments.ts"
		},
		"cfbd6f14-5221-4cd9-b617-51b8b7d80e60": {
			"path": "cfbd6f14-5221-4cd9-b617-51b8b7d80e60",
			"cellName": "OutputFormatSelect.tsx",
			"cellId": "cfbd6f14-5221-4cd9-b617-51b8b7d80e60",
			"visible": true,
			"parentCellId": "db2f0701-b8c1-4448-96bd-4e1f0ad45724"
		},
		"8bd2131c-dc2f-4540-9497-8db940fd4193": {
			"path": "8bd2131c-dc2f-4540-9497-8db940fd4193",
			"cellName": "Remux Flow: Select Output Format - OutputFormatSelect.tsx:L18-54",
			"cellId": "8bd2131c-dc2f-4540-9497-8db940fd4193",
			"visible": true,
			"parentCellId": "cfbd6f14-5221-4cd9-b617-51b8b7d80e60"
		},
		"src/renderer/src/components/OutputFormatSelect.tsx-simstep-b1b71a21-474c-4cd9-87f8-8975b1904582": {
			"path": "src/renderer/src/components/OutputFormatSelect.tsx-simstep-b1b71a21-474c-4cd9-87f8-8975b1904582",
			"fileName": "OutputFormatSelect.tsx",
			"wiki": "The user interacts with the `OutputFormatSelect` component to choose a new container format for the output file, for example, changing from 'mkv' to 'mp4'.",
			"cellName": "Remux Flow: Select Output Format - OutputFormatSelect.tsx:L18-54",
			"cellId": "8bd2131c-dc2f-4540-9497-8db940fd4193",
			"visible": true,
			"startLine": 18,
			"endLine": 54,
			"parentCellId": "cfbd6f14-5221-4cd9-b617-51b8b7d80e60",
			"parentPath": "src/renderer/src/components/OutputFormatSelect.tsx"
		},
		"4bdfa41f-82d8-4e13-a424-ac4f58ea294c": {
			"path": "4bdfa41f-82d8-4e13-a424-ac4f58ea294c",
			"cellName": "Remux Flow: Update Format State - App.tsx:L216-220",
			"cellId": "4bdfa41f-82d8-4e13-a424-ac4f58ea294c",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-ae533980-ab84-4bcb-92a7-640e50e8cf0a": {
			"path": "src/renderer/src/App.tsx-simstep-ae533980-ab84-4bcb-92a7-640e50e8cf0a",
			"fileName": "App.tsx",
			"wiki": "In the main `App` component, the `onOutputFormatUserChange` callback receives the new format and updates the application's `fileFormat` state by calling `setFileFormat`.",
			"cellName": "Remux Flow: Update Format State - App.tsx:L216-220",
			"cellId": "4bdfa41f-82d8-4e13-a424-ac4f58ea294c",
			"visible": true,
			"startLine": 216,
			"endLine": 220,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"a42d559e-b7e6-4483-9644-61fd0df198ea": {
			"path": "a42d559e-b7e6-4483-9644-61fd0df198ea",
			"cellName": "Remux Flow: Prepare FFmpeg Arguments - useFfmpegOperations.ts:L236-418",
			"cellId": "a42d559e-b7e6-4483-9644-61fd0df198ea",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-7c8ef42a-dca6-408c-9029-b503989aeb8c": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-7c8ef42a-dca6-408c-9029-b503989aeb8c",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `cutMultiple` function loops through segments and calls `losslessCutSingle`. This function is responsible for assembling the FFmpeg command arguments for the remux operation based on the provided `outFormat`.",
			"cellName": "Remux Flow: Prepare FFmpeg Arguments - useFfmpegOperations.ts:L236-418",
			"cellId": "a42d559e-b7e6-4483-9644-61fd0df198ea",
			"visible": true,
			"startLine": 236,
			"endLine": 418,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"6a0be1fe-ba72-40f5-a057-e7476b0dc871": {
			"path": "6a0be1fe-ba72-40f5-a057-e7476b0dc871",
			"cellName": "Remux Flow: Determine Per-Stream Codecs - streams.ts:L107-200",
			"cellId": "6a0be1fe-ba72-40f5-a057-e7476b0dc871",
			"visible": true,
			"parentCellId": "9193cfa0-a23a-4d43-8080-94cd59847966"
		},
		"src/renderer/src/util/streams.ts-simstep-5bf2d9d1-75c5-49b2-bdd0-a83c1993d35a": {
			"path": "src/renderer/src/util/streams.ts-simstep-5bf2d9d1-75c5-49b2-bdd0-a83c1993d35a",
			"fileName": "streams.ts",
			"wiki": "For each stream, `getPerStreamFlags` is called to determine the codec operation. For a remux, this will almost always be 'copy'. However, it contains logic to re-encode streams if they are incompatible with the new container, such as converting `mov_text` subtitles to `srt` when outputting to `matroska`.",
			"cellName": "Remux Flow: Determine Per-Stream Codecs - streams.ts:L107-200",
			"cellId": "6a0be1fe-ba72-40f5-a057-e7476b0dc871",
			"visible": true,
			"startLine": 107,
			"endLine": 200,
			"parentCellId": "9193cfa0-a23a-4d43-8080-94cd59847966",
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"5a4117be-ae19-44ab-b7db-fc57318f70d4": {
			"path": "5a4117be-ae19-44ab-b7db-fc57318f70d4",
			"cellName": "Remux Flow: Execute FFmpeg Command - useFfmpegOperations.ts:L406-414",
			"cellId": "5a4117be-ae19-44ab-b7db-fc57318f70d4",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-4ba960e3-552e-40d2-b642-8635c2627854": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-4ba960e3-552e-40d2-b642-8635c2627854",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "Back in `losslessCutSingle`, the final command is assembled, including all stream mappings and the critical `-f outFormat` flag that specifies the output container format. The command is then executed via `runFfmpegWithProgress`.",
			"cellName": "Remux Flow: Execute FFmpeg Command - useFfmpegOperations.ts:L406-414",
			"cellId": "5a4117be-ae19-44ab-b7db-fc57318f70d4",
			"visible": true,
			"startLine": 406,
			"endLine": 414,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"37540ce5-c11b-43d1-9741-d49ba9a2d991": {
			"path": "37540ce5-c11b-43d1-9741-d49ba9a2d991",
			"cellName": "Fix Duration Flow: Menu Selection - menu.ts:L198-202",
			"cellId": "37540ce5-c11b-43d1-9741-d49ba9a2d991",
			"visible": true,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1"
		},
		"src/main/menu.ts-simstep-3a9a7494-d01b-42bc-9552-e8bb2072f113": {
			"path": "src/main/menu.ts-simstep-3a9a7494-d01b-42bc-9552-e8bb2072f113",
			"fileName": "menu.ts",
			"wiki": "The user initiates the process by selecting 'Fix incorrect duration' from the 'Tools' menu.",
			"cellName": "Fix Duration Flow: Menu Selection - menu.ts:L198-202",
			"cellId": "37540ce5-c11b-43d1-9741-d49ba9a2d991",
			"visible": true,
			"startLine": 198,
			"endLine": 202,
			"parentCellId": "0f69c561-a769-41ba-a3a2-1e567d30eaa1",
			"parentPath": "src/main/menu.ts"
		},
		"0c1ba555-bd9a-4b7b-97b1-08ad263f9661": {
			"path": "0c1ba555-bd9a-4b7b-97b1-08ad263f9661",
			"cellName": "Fix Duration Flow: Event Handling in UI - App.tsx:L1721-1738",
			"cellId": "0c1ba555-bd9a-4b7b-97b1-08ad263f9661",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-7302041e-2d68-4e62-94fc-1f7c30c44473": {
			"path": "src/renderer/src/App.tsx-simstep-7302041e-2d68-4e62-94fc-1f7c30c44473",
			"fileName": "App.tsx",
			"wiki": "The main `App` component listens for the 'fixInvalidDuration' IPC event and calls the `tryFixInvalidDuration` function in response.",
			"cellName": "Fix Duration Flow: Event Handling in UI - App.tsx:L1721-1738",
			"cellId": "0c1ba555-bd9a-4b7b-97b1-08ad263f9661",
			"visible": true,
			"startLine": 1721,
			"endLine": 1738,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"9a1fc89a-6a17-47bb-9e5e-938be69c5abf": {
			"path": "9a1fc89a-6a17-47bb-9e5e-938be69c5abf",
			"cellName": "Fix Duration Flow: Construct and Run Remux Command - useFfmpegOperations.ts:L822-830",
			"cellId": "9a1fc89a-6a17-47bb-9e5e-938be69c5abf",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-969b5adc-831c-4636-89d1-588306adbd7c": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-969b5adc-831c-4636-89d1-588306adbd7c",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The `fixInvalidDuration` function assembles a simple FFmpeg command to remux the entire file by copying all streams into a new container of the same format. This process rewrites file headers and metadata, often correcting invalid duration values without re-encoding.",
			"cellName": "Fix Duration Flow: Construct and Run Remux Command - useFfmpegOperations.ts:L822-830",
			"cellId": "9a1fc89a-6a17-47bb-9e5e-938be69c5abf",
			"visible": true,
			"startLine": 822,
			"endLine": 830,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"2ca97a95-2641-40be-b6aa-f250bfd15a59": {
			"path": "2ca97a95-2641-40be-b6aa-f250bfd15a59",
			"cellName": "Remux Flow:\nTransmit New\nFormat",
			"cellId": "2ca97a95-2641-40be-b6aa-f250bfd15a59",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-34b81b45-7745-4121-b4b0-3271f4883aec-2ca97a95-2641-40be-b6aa-f250bfd15a59": {
			"path": "generated-edge-simstep-34b81b45-7745-4121-b4b0-3271f4883aec-2ca97a95-2641-40be-b6aa-f250bfd15a59",
			"fileName": "OutputFormatSelect.tsx",
			"cellName": "Remux Flow: Transmit New Format",
			"cellId": "2ca97a95-2641-40be-b6aa-f250bfd15a59",
			"visible": true,
			"startLine": 19,
			"endLine": 19,
			"parentPath": "src/renderer/src/components/OutputFormatSelect.tsx"
		},
		"2a380a6d-dfb2-4447-87d0-6d6177c4c438": {
			"path": "2a380a6d-dfb2-4447-87d0-6d6177c4c438",
			"cellName": "Remux Flow:\nTrigger Export",
			"cellId": "2a380a6d-dfb2-4447-87d0-6d6177c4c438",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-a5acb054-3a7d-4d1f-83bd-144fab217e7e-2a380a6d-dfb2-4447-87d0-6d6177c4c438": {
			"path": "generated-edge-simstep-a5acb054-3a7d-4d1f-83bd-144fab217e7e-2a380a6d-dfb2-4447-87d0-6d6177c4c438",
			"fileName": "App.tsx",
			"cellName": "Remux Flow: Trigger Export",
			"cellId": "2a380a6d-dfb2-4447-87d0-6d6177c4c438",
			"visible": true,
			"startLine": 1106,
			"endLine": 1112,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"0c417541-d199-4e70-b614-b8fd9e98a075": {
			"path": "0c417541-d199-4e70-b614-b8fd9e98a075",
			"cellName": "Remux Flow:\nGenerate Stream\nMapping",
			"cellId": "0c417541-d199-4e70-b614-b8fd9e98a075",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-e43d83e8-5426-4af2-832e-4ac51d13e99b-0c417541-d199-4e70-b614-b8fd9e98a075": {
			"path": "generated-edge-simstep-e43d83e8-5426-4af2-832e-4ac51d13e99b-0c417541-d199-4e70-b614-b8fd9e98a075",
			"fileName": "useFfmpegOperations.ts",
			"cellName": "Remux Flow: Generate Stream Mapping",
			"cellId": "0c417541-d199-4e70-b614-b8fd9e98a075",
			"visible": true,
			"startLine": 326,
			"endLine": 326,
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"286251c5-a82f-49ab-9659-b4eb31df25d8": {
			"path": "286251c5-a82f-49ab-9659-b4eb31df25d8",
			"cellName": "Remux Flow:\nReturn Stream\nArguments",
			"cellId": "286251c5-a82f-49ab-9659-b4eb31df25d8",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-1996fb66-7cfa-4d9a-bc79-f2d8c1c02928-286251c5-a82f-49ab-9659-b4eb31df25d8": {
			"path": "generated-edge-simstep-1996fb66-7cfa-4d9a-bc79-f2d8c1c02928-286251c5-a82f-49ab-9659-b4eb31df25d8",
			"fileName": "streams.ts",
			"cellName": "Remux Flow: Return Stream Arguments",
			"cellId": "286251c5-a82f-49ab-9659-b4eb31df25d8",
			"visible": true,
			"startLine": 202,
			"endLine": 228,
			"parentPath": "src/renderer/src/util/streams.ts"
		},
		"308d5dcf-696b-4627-8b3f-90a9385c1e6a": {
			"path": "308d5dcf-696b-4627-8b3f-90a9385c1e6a",
			"cellName": "Fix Duration\nFlow: IPC\nCommunication",
			"cellId": "308d5dcf-696b-4627-8b3f-90a9385c1e6a",
			"visible": true,
			"parentCellId": "9e47606a-7a0a-45fa-b864-958d5c4456de"
		},
		"generated-edge-simstep-76adab98-097e-42b0-9d00-1c8f874826e0-308d5dcf-696b-4627-8b3f-90a9385c1e6a": {
			"path": "generated-edge-simstep-76adab98-097e-42b0-9d00-1c8f874826e0-308d5dcf-696b-4627-8b3f-90a9385c1e6a",
			"fileName": "menu.ts",
			"cellName": "Fix Duration Flow: IPC Communication",
			"cellId": "308d5dcf-696b-4627-8b3f-90a9385c1e6a",
			"visible": true,
			"startLine": 201,
			"endLine": 201,
			"parentPath": "src/main/menu.ts"
		},
		"391a6321-49c1-4c55-a6aa-023c63aa6b20": {
			"path": "391a6321-49c1-4c55-a6aa-023c63aa6b20",
			"cellName": "Fix Duration\nFlow: Invoke\nFFmpeg Operation",
			"cellId": "391a6321-49c1-4c55-a6aa-023c63aa6b20",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-4161e295-816c-4a60-a519-337be05e8e37-391a6321-49c1-4c55-a6aa-023c63aa6b20": {
			"path": "generated-edge-simstep-4161e295-816c-4a60-a519-337be05e8e37-391a6321-49c1-4c55-a6aa-023c63aa6b20",
			"fileName": "App.tsx",
			"cellName": "Fix Duration Flow: Invoke FFmpeg Operation",
			"cellId": "391a6321-49c1-4c55-a6aa-023c63aa6b20",
			"visible": true,
			"startLine": 1725,
			"endLine": 1725,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"8be6472e-f3d0-4fc1-b532-e75bd1740e34": {
			"path": "8be6472e-f3d0-4fc1-b532-e75bd1740e34",
			"cellName": "User Modifies Track Disposition - StreamsSelector.tsx:L215-227",
			"cellId": "8be6472e-f3d0-4fc1-b532-e75bd1740e34",
			"visible": true,
			"parentCellId": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f"
		},
		"src/renderer/src/StreamsSelector.tsx-simstep-345f35f1-0bd9-4516-a0b1-87fa6e143c75": {
			"path": "src/renderer/src/StreamsSelector.tsx-simstep-345f35f1-0bd9-4516-a0b1-87fa6e143c75",
			"fileName": "StreamsSelector.tsx",
			"wiki": "The user interacts with the 'Tracks' panel to modify the properties of a specific stream. In this case, they select a new disposition for an audio track from a dropdown menu, changing it to 'default'. This action triggers the `onDispositionChange` event handler.",
			"cellName": "User Modifies Track Disposition - StreamsSelector.tsx:L215-227",
			"cellId": "8be6472e-f3d0-4fc1-b532-e75bd1740e34",
			"visible": true,
			"startLine": 215,
			"endLine": 227,
			"parentCellId": "dd0042e3-3ceb-4717-bd51-c40f9e77a28f",
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"f033d11b-f8d1-4a73-9a62-38bb560bd2c4": {
			"path": "f033d11b-f8d1-4a73-9a62-38bb560bd2c4",
			"cellName": "Update Stream Parameters in State - App.tsx:L1761-1763",
			"cellId": "f033d11b-f8d1-4a73-9a62-38bb560bd2c4",
			"visible": true,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac"
		},
		"src/renderer/src/App.tsx-simstep-a44aee87-4ac5-42e0-884b-9b0b9b3dca1d": {
			"path": "src/renderer/src/App.tsx-simstep-a44aee87-4ac5-42e0-884b-9b0b9b3dca1d",
			"fileName": "App.tsx",
			"wiki": "The application's state is updated to reflect the user's change. The `updateStreamParams` function modifies the `paramsByStreamId` map, storing the new disposition ('default') for the specified stream (index 1) of the given file.",
			"cellName": "Update Stream Parameters in State - App.tsx:L1761-1763",
			"cellId": "f033d11b-f8d1-4a73-9a62-38bb560bd2c4",
			"visible": true,
			"startLine": 1761,
			"endLine": 1763,
			"parentCellId": "b022c6a8-4d58-41af-9a3c-6c157b2e89ac",
			"parentPath": "src/renderer/src/App.tsx"
		},
		"37919780-8f89-4fac-9ec4-11521e814a24": {
			"path": "37919780-8f89-4fac-9ec4-11521e814a24",
			"cellName": "Calculate Chapter Timestamps from Segments - ffmpeg.ts:L217-226",
			"cellId": "37919780-8f89-4fac-9ec4-11521e814a24",
			"visible": true,
			"parentCellId": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6"
		},
		"src/renderer/src/ffmpeg.ts-simstep-95259c41-72c8-4d14-8495-0a4d68e5fe95": {
			"path": "src/renderer/src/ffmpeg.ts-simstep-95259c41-72c8-4d14-8495-0a4d68e5fe95",
			"fileName": "ffmpeg.ts",
			"wiki": "The `createChaptersFromSegments` function is called to generate chapter data. It asynchronously reads the duration of each output segment file and calculates the cumulative start and end times for each chapter in the final merged file.",
			"cellName": "Calculate Chapter Timestamps from Segments - ffmpeg.ts:L217-226",
			"cellId": "37919780-8f89-4fac-9ec4-11521e814a24",
			"visible": true,
			"startLine": 217,
			"endLine": 226,
			"parentCellId": "84a6d915-e60b-4cd3-89ef-defe9dc05ec6",
			"parentPath": "src/renderer/src/ffmpeg.ts"
		},
		"b75eadd2-4f82-4793-b2b1-0e59b7e9e51b": {
			"path": "b75eadd2-4f82-4793-b2b1-0e59b7e9e51b",
			"cellName": "Construct and Execute Final FFmpeg Command - useFfmpegOperations.ts:L329-338",
			"cellId": "b75eadd2-4f82-4793-b2b1-0e59b7e9e51b",
			"visible": true,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23"
		},
		"src/renderer/src/hooks/useFfmpegOperations.ts-simstep-a5ae538c-f867-4f30-ada2-395c21e25f38": {
			"path": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-a5ae538c-f867-4f30-ada2-395c21e25f38",
			"fileName": "useFfmpegOperations.ts",
			"wiki": "The application constructs the final FFmpeg command. It iterates through the custom stream parameters to add arguments like `-disposition:1 default`. It also writes the chapter metadata to a temporary file and instructs FFmpeg to include it. The fully formed command is then executed to produce the final output file with the new metadata, disposition, and chapter markers.",
			"cellName": "Construct and Execute Final FFmpeg Command - useFfmpegOperations.ts:L329-338",
			"cellId": "b75eadd2-4f82-4793-b2b1-0e59b7e9e51b",
			"visible": true,
			"startLine": 329,
			"endLine": 338,
			"parentCellId": "1926aeb9-327f-472c-829a-dfb694cb2e23",
			"parentPath": "src/renderer/src/hooks/useFfmpegOperations.ts"
		},
		"db4529c7-ae29-4f72-b2c8-2c1d05ee729e": {
			"path": "db4529c7-ae29-4f72-b2c8-2c1d05ee729e",
			"cellName": "Propagate Disposition\nChange to\nState Manager",
			"cellId": "db4529c7-ae29-4f72-b2c8-2c1d05ee729e",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-c58ee6c6-80ee-4e15-8c3e-43485fc9b9d6-db4529c7-ae29-4f72-b2c8-2c1d05ee729e": {
			"path": "generated-edge-simstep-c58ee6c6-80ee-4e15-8c3e-43485fc9b9d6-db4529c7-ae29-4f72-b2c8-2c1d05ee729e",
			"fileName": "StreamsSelector.tsx",
			"cellName": "Propagate Disposition Change to State Manager",
			"cellId": "db4529c7-ae29-4f72-b2c8-2c1d05ee729e",
			"visible": true,
			"startLine": 223,
			"endLine": 226,
			"parentPath": "src/renderer/src/StreamsSelector.tsx"
		},
		"2d3c94fa-6585-42c9-8952-7486fb0fd304": {
			"path": "2d3c94fa-6585-42c9-8952-7486fb0fd304",
			"cellName": "User Initiates\nExport with\nChapter Creation",
			"cellId": "2d3c94fa-6585-42c9-8952-7486fb0fd304",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-5425ca5d-9dc3-4162-8b2a-8ee26d07c20d-2d3c94fa-6585-42c9-8952-7486fb0fd304": {
			"path": "generated-edge-simstep-5425ca5d-9dc3-4162-8b2a-8ee26d07c20d-2d3c94fa-6585-42c9-8952-7486fb0fd304",
			"fileName": "App.tsx",
			"cellName": "User Initiates Export with Chapter Creation",
			"cellId": "2d3c94fa-6585-42c9-8952-7486fb0fd304",
			"visible": true,
			"startLine": 933,
			"endLine": 936,
			"parentPath": "src/renderer/src/App.tsx"
		},
		"5436674d-415f-44d9-a7f2-2f802908824b": {
			"path": "5436674d-415f-44d9-a7f2-2f802908824b",
			"cellName": "Pass Parameters\nto FFmpeg\nCommand Builder",
			"cellId": "5436674d-415f-44d9-a7f2-2f802908824b",
			"visible": true,
			"parentCellId": "15585db2-26e7-426c-a156-3e7b1d7457b7"
		},
		"generated-edge-simstep-dc22be76-e9c4-4052-801e-36890f1c26fe-5436674d-415f-44d9-a7f2-2f802908824b": {
			"path": "generated-edge-simstep-dc22be76-e9c4-4052-801e-36890f1c26fe-5436674d-415f-44d9-a7f2-2f802908824b",
			"fileName": "ffmpeg.ts",
			"cellName": "Pass Parameters to FFmpeg Command Builder",
			"cellId": "5436674d-415f-44d9-a7f2-2f802908824b",
			"visible": true,
			"startLine": 329,
			"endLine": 329,
			"parentPath": "src/renderer/src/ffmpeg.ts"
		}
	},
	"simulations": {
		"Losslessly trim and cut video/audio files to extract specific segments": {
			"name": "Losslessly trim and cut video/audio files to extract specific segments",
			"simSteps": [
				{
					"simStepId": "0a1231d7-19a2-428c-a372-1d05b15e6d85",
					"diagramNodeId": "ffa60c76-4ac7-4f46-aeca-397cbd3c006c",
					"simStepLabel": "Segment Definition: Set Cut Start Point",
					"simStepDescription": "The user presses the 'I' key, which is mapped to the `setCutStart` action via keyboard shortcuts. This function captures the current video playback time from the player to be used as the starting point for the current cut segment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "504",
						"endLine": "513",
						"relevantVariables": [
							"setCutStart",
							"getRelevantTime",
							"setCutTime"
						]
					},
					"inputDataExample": "{\"event\": \"keypress\", \"key\": \"i\"}",
					"outputDataExample": "{\"relevantTime\": 10.52}"
				},
				{
					"simStepId": "126c0372-7315-4305-891e-4e72b3b324b7",
					"diagramNodeId": "496cc2c6-cdc9-4a27-8f82-338de5e88503",
					"simStepLabel": "Segment Definition: Transmit Start Time to State",
					"simStepDescription": "The captured start time is passed to the `setCutTime` function to update the state of the currently active segment.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "512",
						"endLine": "512",
						"relevantVariables": [
							"setCutTime"
						]
					},
					"inputDataExample": "{\"type\": \"start\", \"time\": 10.52}",
					"outputDataExample": "{\"type\": \"start\", \"time\": 10.52}"
				},
				{
					"simStepId": "c2cffb0f-4b1c-4a6d-b863-2fcd583517b9",
					"diagramNodeId": "d54a7429-9bd1-47a2-8272-3e258dc968b1",
					"simStepLabel": "Segment Definition: Update Segment State with Start Time",
					"simStepDescription": "The `setCutTime` function modifies the `cutSegments` state array. It finds the current segment and updates its `start` property. This state change causes the UI to re-render, visually marking the new start point on the timeline.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "359",
						"endLine": "370",
						"relevantVariables": [
							"setCutTime",
							"updateSegAtIndex",
							"currentCutSeg"
						]
					},
					"inputDataExample": "{\"currentSegments\": [{\"segId\": \"seg-1\", \"start\": 0, \"end\": null}], \"newStartTime\": 10.52}",
					"outputDataExample": "{\"updatedSegments\": [{\"segId\": \"seg-1\", \"start\": 10.52, \"end\": null}]}"
				},
				{
					"simStepId": "0075e42a-97ed-4b00-b7a4-f034b1000ea4",
					"diagramNodeId": "dbe72f4c-c701-4e7d-9dd9-5bcdb311443d",
					"simStepLabel": "Segment Definition: User Defines End Point",
					"simStepDescription": "The user continues to watch or seek through the video to find the desired end point for the segment before pressing the 'O' key. This represents the passage of time and user interaction between setting the start and end points.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "416",
						"endLine": "416",
						"relevantVariables": [
							"seekAbs"
						]
					},
					"inputDataExample": "{\"userAction\": \"seek\", \"targetTime\": 45.88}",
					"outputDataExample": "{\"userAction\": \"seek\", \"targetTime\": 45.88}"
				},
				{
					"simStepId": "2760d630-6ee4-4414-ac35-581d5a948c7d",
					"diagramNodeId": "2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0",
					"simStepLabel": "Segment Definition: Set Cut End Point",
					"simStepDescription": "The user presses the 'O' key, triggering the `setCutEnd` action. This function captures the current playback time as the end point for the segment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "515",
						"endLine": "524",
						"relevantVariables": [
							"setCutEnd",
							"getRelevantTime",
							"setCutTime"
						]
					},
					"inputDataExample": "{\"event\": \"keypress\", \"key\": \"o\"}",
					"outputDataExample": "{\"relevantTime\": 45.88}"
				},
				{
					"simStepId": "8c1ce23d-d466-431a-81d2-41457b13d40b",
					"diagramNodeId": "362f7281-ddeb-4542-aef8-bae73c5c9de4",
					"simStepLabel": "Segment Definition: Transmit End Time to State",
					"simStepDescription": "The captured end time is passed to the `setCutTime` function to update the segment's state.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "523",
						"endLine": "523",
						"relevantVariables": [
							"setCutTime"
						]
					},
					"inputDataExample": "{\"type\": \"end\", \"time\": 45.88}",
					"outputDataExample": "{\"type\": \"end\", \"time\": 45.88}"
				},
				{
					"simStepId": "dd3c39f7-e321-4b71-96b9-a28e28733aa2",
					"diagramNodeId": "e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1",
					"simStepLabel": "Segment Definition: Finalize Segment State",
					"simStepDescription": "The `setCutTime` function updates the `end` property of the current segment in the `cutSegments` state array. The segment is now fully defined with a start and end time. The UI re-renders to show the completed segment on the timeline.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "359",
						"endLine": "370",
						"relevantVariables": [
							"setCutTime",
							"updateSegAtIndex",
							"safeSetCutSegments"
						]
					},
					"inputDataExample": "{\"currentSegments\": [{\"segId\": \"seg-1\", \"start\": 10.52, \"end\": null}], \"newEndTime\": 45.88}",
					"outputDataExample": "{\"updatedSegments\": [{\"segId\": \"seg-1\", \"start\": 10.52, \"end\": 45.88, \"selected\": true}]}"
				},
				{
					"simStepId": "6998d016-3a33-4c73-8d2c-3cc827700acc",
					"diagramNodeId": "27c1c337-9a12-4c79-b2d9-46c6f9a70b51",
					"simStepLabel": "Export: Prepare Segments for Export",
					"simStepDescription": "After defining one or more segments, the user initiates an export. The application computes the `segmentsToExport` array by filtering the main `cutSegments` state for segments that are selected and have a valid duration.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "775",
						"endLine": "786",
						"relevantVariables": [
							"segmentsToExport",
							"selectedSegments",
							"cutSegments"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"segId\": \"seg-1\", \"start\": 10.52, \"end\": 45.88, \"selected\": true, \"initial\": false}]}",
					"outputDataExample": "{\"segmentsToExport\": [{\"start\": 10.52, \"end\": 45.88, \"name\": \"Segment 1\", \"originalIndex\": 0}]}"
				},
				{
					"simStepId": "ccd507b4-f01d-47f6-b292-7232995f9ffa",
					"diagramNodeId": "d243139b-b6fc-4e67-baf4-ba72dae06281",
					"simStepLabel": "Export: Process Segments for Cutting",
					"simStepDescription": "The `losslessCut` function is invoked with the list of segments to export. It iterates over this list, preparing to process each segment individually.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "648",
						"endLine": "649",
						"relevantVariables": [
							"losslessCut",
							"pMap",
							"cutSegment"
						]
					},
					"inputDataExample": "{\"segments\": [{\"start\": 10.52, \"end\": 45.88, \"name\": \"Segment 1\"}]}",
					"outputDataExample": "{\"processedSegmentCount\": 1}"
				},
				{
					"simStepId": "3fa4964f-52db-455d-9bf2-0e2222e54cce",
					"diagramNodeId": "782aef27-9591-420e-b31d-6178c46a6d53",
					"simStepLabel": "Export: Pass Single Segment to FFmpeg Wrapper",
					"simStepDescription": "For each segment, the `cutSegment` function is called, which in turn invokes `losslessCutSingle`. This passes all necessary parameters for the cut, including start/end times, output path, format, and stream information, to the core FFmpeg execution function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "543",
						"endLine": "546",
						"relevantVariables": [
							"losslessCutSingle",
							"cutSegment"
						]
					},
					"inputDataExample": "{\"start\": 10.52, \"end\": 45.88, \"outPath\": \"/path/to/video-cut1.mp4\", \"outFormat\": \"mp4\"}",
					"outputDataExample": "{\"start\": 10.52, \"end\": 45.88, \"outPath\": \"/path/to/video-cut1.mp4\", \"outFormat\": \"mp4\"}"
				},
				{
					"simStepId": "3f520a7e-d598-4e4f-995e-7df8140b043c",
					"diagramNodeId": "8ce5bac9-a6ab-4c20-89ea-03af1e329cca",
					"simStepLabel": "Export: Execute Lossless Cut FFmpeg Command",
					"simStepDescription": "The `losslessCutSingle` function assembles the final FFmpeg command-line arguments. Crucially, it uses `-c copy` to ensure a direct stream copy, which is lossless and fast. The assembled command is then executed.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "232",
						"endLine": "240",
						"relevantVariables": [
							"losslessCutSingle",
							"ffmpegArgs"
						]
					},
					"inputDataExample": "{\"cutFrom\": 10.52, \"cutTo\": 45.88, \"outPath\": \"/path/to/video-cut1.mp4\"}",
					"outputDataExample": "{\"command\": \"ffmpeg -i input.mp4 -ss 10.52 -to 45.88 -c copy -map 0 /path/to/video-cut1.mp4\"}"
				},
				{
					"simStepId": "c3f3550a-edae-4059-bf4b-0f2c15a036b1",
					"diagramNodeId": "1296f4b7-cc7c-4364-8a05-c668d32df1e2",
					"simStepLabel": "Export: Write Trimmed File to Disk",
					"simStepDescription": "The executed FFmpeg process reads the necessary data from the source media file and writes the new, trimmed segment into a new file at the specified output path on the user's file system.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "232",
						"endLine": "240",
						"relevantVariables": [
							"losslessCutSingle"
						]
					},
					"inputDataExample": "{\"outputPath\": \"/path/to/video-cut1.mp4\", \"binaryData\": \"<video data from 10.52s to 45.88s>\"}",
					"outputDataExample": "{\"outputPath\": \"/path/to/video-cut1.mp4\", \"binaryData\": \"<video data from 10.52s to 45.88s>\"}"
				},
				{
					"simStepId": "e3820262-64db-48d3-8db1-fb47a2af6882",
					"diagramNodeId": "53558a9c-7b7a-4a98-94d8-c0522fdca137",
					"simStepLabel": "Export: Finalize Operation",
					"simStepDescription": "After the FFmpeg process successfully completes for all segments, the `losslessCut` operation concludes. The user is typically notified of the successful export, and the trimmed files are now available on their disk.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "648",
						"endLine": "652",
						"relevantVariables": [
							"losslessCut",
							"pMap"
						]
					},
					"inputDataExample": "{\"processedFiles\": [{\"path\": \"/path/to/video-cut1.mp4\", \"created\": true}]}",
					"outputDataExample": "{\"status\": \"complete\", \"message\": \"Export successful\"}"
				}
			],
			"description": "<ul><li>This is the primary feature of LosslessCut, allowing users to quickly reduce the size of large media files without losing quality</li><li>- Users load a media file and use a visual timeline to navigate</li><li>- They set start ('I') and end ('O') points to define one or more segments they wish to keep or discard</li><li>- The application exports only the selected segments through a direct data copy (remuxing), which is extremely fast and preserves the original quality</li></ul>",
			"simulationNodesAndEdges": {
				"ffa60c76-4ac7-4f46-aeca-397cbd3c006c": {
					"simStepIds": [
						"0a1231d7-19a2-428c-a372-1d05b15e6d85"
					]
				},
				"d54a7429-9bd1-47a2-8272-3e258dc968b1": {
					"simStepIds": [
						"c2cffb0f-4b1c-4a6d-b863-2fcd583517b9"
					]
				},
				"2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0": {
					"simStepIds": [
						"2760d630-6ee4-4414-ac35-581d5a948c7d"
					]
				},
				"e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1": {
					"simStepIds": [
						"dd3c39f7-e321-4b71-96b9-a28e28733aa2"
					]
				},
				"d243139b-b6fc-4e67-baf4-ba72dae06281": {
					"simStepIds": [
						"ccd507b4-f01d-47f6-b292-7232995f9ffa"
					]
				},
				"8ce5bac9-a6ab-4c20-89ea-03af1e329cca": {
					"simStepIds": [
						"3f520a7e-d598-4e4f-995e-7df8140b043c"
					]
				},
				"53558a9c-7b7a-4a98-94d8-c0522fdca137": {
					"simStepIds": [
						"e3820262-64db-48d3-8db1-fb47a2af6882"
					]
				},
				"496cc2c6-cdc9-4a27-8f82-338de5e88503": {
					"simStepIds": [
						"126c0372-7315-4305-891e-4e72b3b324b7"
					]
				},
				"dbe72f4c-c701-4e7d-9dd9-5bcdb311443d": {
					"simStepIds": [
						"0075e42a-97ed-4b00-b7a4-f034b1000ea4"
					]
				},
				"362f7281-ddeb-4542-aef8-bae73c5c9de4": {
					"simStepIds": [
						"8c1ce23d-d466-431a-81d2-41457b13d40b"
					]
				},
				"27c1c337-9a12-4c79-b2d9-46c6f9a70b51": {
					"simStepIds": [
						"6998d016-3a33-4c73-8d2c-3cc827700acc"
					]
				},
				"782aef27-9591-420e-b31d-6178c46a6d53": {
					"simStepIds": [
						"3fa4964f-52db-455d-9bf2-0e2222e54cce"
					]
				},
				"1296f4b7-cc7c-4364-8a05-c668d32df1e2": {
					"simStepIds": [
						"c3f3550a-edae-4059-bf4b-0f2c15a036b1"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "setCutStart, losslessCutSingle, cutSegments",
			"generationPrompt": "Losslessly trim and cut video/audio files to extract specific segments",
			"generationKeywords": "setCutStart, losslessCutSingle, cutSegments"
		},
		"Merge and concatenate multiple video/audio segments or files": {
			"name": "Merge and concatenate multiple video/audio segments or files",
			"simSteps": [
				{
					"simStepId": "feb65bd4-132f-4672-b96c-e0ac16345b4b",
					"diagramNodeId": "9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384",
					"simStepLabel": "User Enables Auto-Merge",
					"simStepDescription": "The user enables the 'autoMerge' setting in the application's preferences. This state is managed by the `useUserSettingsRoot` hook, which initializes the value from the configuration store and provides a function to update it.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useUserSettingsRoot.ts",
						"startLine": "62",
						"endLine": "63",
						"relevantVariables": [
							"autoMerge",
							"setAutoMerge",
							"safeGetConfigInitial",
							"useEffect",
							"safeSetConfig"
						]
					},
					"inputDataExample": "{\n  \"autoMerge\": false\n}",
					"outputDataExample": "{\n  \"autoMerge\": true\n}"
				},
				{
					"simStepId": "760c7a3f-a480-412f-82ee-1f7578fcbf46",
					"diagramNodeId": "126f92df-39e0-4797-92e5-48708272feab",
					"simStepLabel": "Auto-Merge Setting Persisted",
					"simStepDescription": "The `useEffect` hook observes changes to the `autoMerge` state and calls `safeSetConfig` to persist the new value (`true`) into the application's configuration file via the `configStore`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useUserSettingsRoot.ts",
						"startLine": "63",
						"endLine": "63",
						"relevantVariables": [
							"useEffect",
							"safeSetConfig",
							"autoMerge"
						]
					},
					"inputDataExample": "{\n  \"autoMerge\": true\n}",
					"outputDataExample": "{\n  \"autoMerge\": true\n}"
				},
				{
					"simStepId": "bca0c8ab-c2ac-4cd3-a0ad-c8e55727258e",
					"diagramNodeId": "16fe3137-4ac0-4a86-abdb-adb46acd4600",
					"simStepLabel": "User Initiates Export & Merge",
					"simStepDescription": "With multiple segments selected and 'autoMerge' enabled, the `effectiveExportMode` is determined to be 'merge'. Clicking the 'Export+merge' button triggers the export process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "481",
						"endLine": "485",
						"relevantVariables": [
							"effectiveExportMode",
							"autoMerge",
							"autoDeleteMergedSegments",
							"segmentsToChaptersOnly"
						]
					},
					"inputDataExample": "{\n  \"event\": \"click\",\n  \"segmentsToExport\": [\n    {\"start\": 0, \"end\": 10, \"name\": \"Segment 1\"},\n    {\"start\": 20, \"end\": 30, \"name\": \"Segment 2\"}\n  ],\n  \"autoMerge\": true\n}",
					"outputDataExample": "{\n  \"effectiveExportMode\": \"merge\"\n}"
				},
				{
					"simStepId": "185d8535-c5e2-45b1-9eaa-504862599f0f",
					"diagramNodeId": "5b9a2f0f-9268-4679-b404-f49c34a13fb3",
					"simStepLabel": "Pass Cut Segments for Concatenation",
					"simStepDescription": "After the individual segments are exported to temporary files (a process managed by `cutMultiple`), the `handleExport` function collects their file paths. These paths, along with output configuration, are then passed as arguments to the `concatFiles` function to be merged.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "944",
						"endLine": "944",
						"relevantVariables": [
							"concatFiles",
							"paths",
							"outPath",
							"outFormat",
							"metadataFromPath"
						]
					},
					"inputDataExample": "{\n  \"paths\": [\n    \"/tmp/video-seg1.mp4\",\n    \"/tmp/video-seg2.mp4\"\n  ],\n  \"outPath\": \"/path/to/output/video-merged.mp4\",\n  \"metadataFromPath\": \"/tmp/video-seg1.mp4\"\n}",
					"outputDataExample": "{\n  \"paths\": [\n    \"/tmp/video-seg1.mp4\",\n    \"/tmp/video-seg2.mp4\"\n  ],\n  \"outPath\": \"/path/to/output/video-merged.mp4\",\n  \"metadataFromPath\": \"/tmp/video-seg1.mp4\"\n}"
				},
				{
					"simStepId": "8d81c5d3-dcf8-47bd-95bf-072d86d6b9b9",
					"diagramNodeId": "f6d44dd5-8317-44d0-9a2a-5161a05e2146",
					"simStepLabel": "Prepare FFmpeg Concat Command",
					"simStepDescription": "The `concatFiles` hook in `useFfmpegOperations` receives the list of segment file paths. It generates a text-based manifest (`concatTxt`) listing each file to be joined and constructs the necessary command-line arguments for FFmpeg's concat demuxer. It then calls `runFfmpegConcat` to execute the command.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "221",
						"endLine": "227",
						"relevantVariables": [
							"concatTxt",
							"ffmpegArgs",
							"runFfmpegConcat",
							"totalDuration",
							"onProgress"
						]
					},
					"inputDataExample": "{\n  \"paths\": [\n    \"/tmp/video-seg1.mp4\",\n    \"/tmp/video-seg2.mp4\"\n  ],\n  \"outPath\": \"/path/to/output/video-merged.mp4\"\n}",
					"outputDataExample": "{\n  \"ffmpegArgs\": [\n    \"-f\",\n    \"concat\",\n    \"-safe\",\n    \"0\",\n    \"-i\",\n    \"-\",\n    \"-c\",\n    \"copy\",\n    \"/path/to/output/video-merged.mp4\"\n  ],\n  \"concatTxt\": \"file '/tmp/video-seg1.mp4'\\nfile '/tmp/video-seg2.mp4'\"\n}"
				},
				{
					"simStepId": "6a3c74df-cb51-4ef9-bd4c-fac82e008a13",
					"diagramNodeId": "d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb",
					"simStepLabel": "Execute FFmpeg Command in Main Process",
					"simStepDescription": "The `runFfmpegConcat` function is invoked. This function is exposed from the main process to the renderer process via Electron's remote module. The FFmpeg arguments and concat manifest are passed from the renderer to the main process for execution, ensuring that the heavy processing doesn't block the UI.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "17",
						"endLine": "17",
						"relevantVariables": [
							"ffmpeg",
							"runFfmpegConcat"
						]
					},
					"inputDataExample": "{\n  \"ffmpegArgs\": [\n    \"-f\",\n    \"concat\",\n    \"-safe\",\n    \"0\",\n    \"-i\",\n    \"-\",\n    \"-c\",\n    \"copy\",\n    \"/path/to/output/video-merged.mp4\"\n  ],\n  \"concatTxt\": \"file '/tmp/video-seg1.mp4'\\nfile '/tmp/video-seg2.mp4'\"\n}",
					"outputDataExample": "{\n  \"ffmpegArgs\": [\n    \"-f\",\n    \"concat\",\n    \"-safe\",\n    \"0\",\n    \"-i\",\n    \"-\",\n    \"-c\",\n    \"copy\",\n    \"/path/to/output/video-merged.mp4\"\n  ],\n  \"concatTxt\": \"file '/tmp/video-seg1.mp4'\\nfile '/tmp/video-seg2.mp4'\"\n}"
				},
				{
					"simStepId": "a9095163-9dec-4c57-8605-e71d2c08043b",
					"diagramNodeId": "2aef852e-62c7-4e79-956c-ec77bbca82a5",
					"simStepLabel": "Execute FFmpeg Process",
					"simStepDescription": "In the main process, `runFfmpegConcat` spawns an FFmpeg child process with the provided arguments. The concat manifest, containing the list of files to merge, is piped to the FFmpeg process's standard input.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "137",
						"endLine": "145",
						"relevantVariables": [
							"runFfmpegConcat",
							"runFfmpegProcess",
							"process.stdin",
							"stringToStream"
						]
					},
					"inputDataExample": "{\n  \"ffmpegArgs\": [\n    \"-f\",\n    \"concat\",\n    \"-i\",\n    \"-\",\n    \"-c\",\n    \"copy\",\n    \"/path/to/output/video-merged.mp4\"\n  ],\n  \"concatTxt\": \"file '/tmp/video-seg1.mp4'\\nfile '/tmp/video-seg2.mp4'\"\n}",
					"outputDataExample": "{\n  \"status\": \"processing\",\n  \"pid\": 12345\n}"
				},
				{
					"simStepId": "dde12cfe-67a8-40b0-9ab3-9f08a5de5836",
					"diagramNodeId": "f901ad9d-a81a-408b-b7f0-41086cc2944c",
					"simStepLabel": "FFmpeg Writes Merged File",
					"simStepDescription": "The running FFmpeg process reads the input segment files one by one according to the manifest and concatenates their streams losslessly into a single output file, which is written to the specified output directory.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "137",
						"endLine": "141",
						"relevantVariables": [
							"runFfmpegConcat",
							"ffmpegArgs"
						]
					},
					"inputDataExample": "{\n  \"output_file_path\": \"/path/to/output/video-merged.mp4\"\n}",
					"outputDataExample": "{\n  \"output_file_path\": \"/path/to/output/video-merged.mp4\"\n}"
				},
				{
					"simStepId": "deb3c08a-c37d-41bc-92ed-d97f83603e78",
					"diagramNodeId": "9da616a0-72d7-450a-9b46-806c1639f78b",
					"simStepLabel": "Finalize Export and Cleanup",
					"simStepDescription": "Once the FFmpeg process completes successfully, the `finally` block in the `handleExport` function is executed. This resets the application's working state and progress indicators. If `autoDeleteMergedSegments` is enabled, a subsequent cleanup step deletes the temporary segment files.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "986",
						"endLine": "989",
						"relevantVariables": [
							"setWorking",
							"setProgress"
						]
					},
					"inputDataExample": "{\n  \"exportResult\": \"success\",\n  \"mergedFilePath\": \"/path/to/output/video-merged.mp4\"\n}",
					"outputDataExample": "{\n  \"working\": false,\n  \"progress\": null\n}"
				}
			],
			"description": "<ul><li>This use case allows for the seamless joining of multiple media clips into a single file without re-encoding</li><li>- Users can either define multiple segments from a single source file or load multiple separate files in batch mode</li><li>- By selecting the 'merge' option during export, the application concatenates these clips in the specified order</li><li>- This is ideal for combining footage from the same camera, where all clips share identical codec parameters</li></ul>",
			"simulationNodesAndEdges": {
				"9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384": {
					"simStepIds": [
						"feb65bd4-132f-4672-b96c-e0ac16345b4b"
					]
				},
				"16fe3137-4ac0-4a86-abdb-adb46acd4600": {
					"simStepIds": [
						"bca0c8ab-c2ac-4cd3-a0ad-c8e55727258e"
					]
				},
				"f6d44dd5-8317-44d0-9a2a-5161a05e2146": {
					"simStepIds": [
						"8d81c5d3-dcf8-47bd-95bf-072d86d6b9b9"
					]
				},
				"2aef852e-62c7-4e79-956c-ec77bbca82a5": {
					"simStepIds": [
						"a9095163-9dec-4c57-8605-e71d2c08043b"
					]
				},
				"9da616a0-72d7-450a-9b46-806c1639f78b": {
					"simStepIds": [
						"deb3c08a-c37d-41bc-92ed-d97f83603e78"
					]
				},
				"126f92df-39e0-4797-92e5-48708272feab": {
					"simStepIds": [
						"760c7a3f-a480-412f-82ee-1f7578fcbf46"
					]
				},
				"5b9a2f0f-9268-4679-b404-f49c34a13fb3": {
					"simStepIds": [
						"185d8535-c5e2-45b1-9eaa-504862599f0f"
					]
				},
				"d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb": {
					"simStepIds": [
						"6a3c74df-cb51-4ef9-bd4c-fac82e008a13"
					]
				},
				"f901ad9d-a81a-408b-b7f0-41086cc2944c": {
					"simStepIds": [
						"dde12cfe-67a8-40b0-9ab3-9f08a5de5836"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "concatFiles, runFfmpegConcat, autoMerge",
			"generationPrompt": "Merge and concatenate multiple video/audio segments or files",
			"generationKeywords": "concatFiles, runFfmpegConcat, autoMerge"
		},
		"Manage individual video, audio, and subtitle tracks": {
			"name": "Manage individual video, audio, and subtitle tracks",
			"simSteps": [
				{
					"simStepId": "5b7e48ec-d0fb-4305-b15b-526f0eaeebc7",
					"diagramNodeId": "9969c0c5-4054-4f12-a222-e8350df1ad6e",
					"simStepLabel": "Open Tracks Panel",
					"simStepDescription": "The user interacts with the UI to open the 'Tracks' panel. The `streamsSelectorShown` state in the main `App` component is set to true, which conditionally renders the `StreamsSelector` component.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2768",
						"endLine": "2773",
						"relevantVariables": [
							"streamsSelectorShown",
							"setStreamsSelectorShown",
							"StreamsSelector"
						]
					},
					"inputDataExample": "{\"streamsSelectorShown\": false}",
					"outputDataExample": "{\"streamsSelectorShown\": true}"
				},
				{
					"simStepId": "4693fc19-47d4-48a2-b2ce-efeb14a09aeb",
					"diagramNodeId": "1e3dc50f-fa13-4c65-a29b-db356e608536",
					"simStepLabel": "Pass Data to StreamsSelector",
					"simStepDescription": "The main `App` component passes the necessary data as props to the `StreamsSelector` component. This includes metadata for all loaded files (`allFilesMeta`), the current state of selected streams, and functions to update that state (`isCopyingStreamId`, `toggleCopyStreamId`).",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2768",
						"endLine": "2773",
						"relevantVariables": [
							"mainFilePath",
							"allFilesMeta",
							"isCopyingStreamId",
							"toggleCopyStreamId"
						]
					},
					"inputDataExample": "{\"mainFilePath\":\"/Users/user/Movies/input.mov\",\"allFilesMeta\":{\"input.mov\":{\"streams\":[{\"index\":0,\"codec_type\":\"video\"},{\"index\":1,\"codec_type\":\"audio\"},{\"index\":2,\"codec_type\":\"audio\"},{\"index\":3,\"codec_type\":\"subtitle\"}]}}}",
					"outputDataExample": "{\"mainFilePath\":\"/Users/user/Movies/input.mov\",\"allFilesMeta\":{\"input.mov\":{\"streams\":[{\"index\":0,\"codec_type\":\"video\"},{\"index\":1,\"codec_type\":\"audio\"},{\"index\":2,\"codec_type\":\"audio\"},{\"index\":3,\"codec_type\":\"subtitle\"}]}}}"
				},
				{
					"simStepId": "c64bdeee-7fa8-4792-8f43-8799ed38001f",
					"diagramNodeId": "0ba6ed80-a4fd-42df-90c3-cc8176642eb8",
					"simStepLabel": "User Toggles a Stream",
					"simStepDescription": "Inside the `StreamsSelector` panel, the user clicks a checkbox to disable a specific audio track. This action triggers the `toggleCopyStreamId` callback function, which was passed down as a prop.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "359",
						"endLine": "367",
						"relevantVariables": [
							"toggleCopyStreamId",
							"isCopyingStreamId"
						]
					},
					"inputDataExample": "{\"path\": \"/Users/user/Movies/input.mov\", \"streamIndex\": 2}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "fb5a5eac-fad3-42b1-ae97-2372a1d4e1a0",
					"diagramNodeId": "218f88f3-a471-405b-b29e-87febe304fcc",
					"simStepLabel": "Invoke State Update",
					"simStepDescription": "The `toggleCopyStreamId` function, defined in the `useStreamsMeta` hook, is invoked with the file path and the index of the stream to be toggled.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useStreamsMeta.ts",
						"startLine": "126",
						"endLine": "128",
						"relevantVariables": [
							"toggleCopyStreamId",
							"setCopyStreamIdsForPath"
						]
					},
					"inputDataExample": "{\"path\": \"/Users/user/Movies/input.mov\", \"index\": 2}",
					"outputDataExample": "{\"path\": \"/Users/user/Movies/input.mov\", \"index\": 2}"
				},
				{
					"simStepId": "c12318bb-1a99-4298-bae1-649968b05634",
					"diagramNodeId": "2eab7be7-53cc-4437-9b96-94da3abd705b",
					"simStepLabel": "Update Stream Selection State",
					"simStepDescription": "The `setCopyStreamIdsForPath` function updates the `copyStreamIdsByFile` state, flipping the boolean value for the specified stream index.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useStreamsMeta.ts",
						"startLine": "47",
						"endLine": "51",
						"relevantVariables": [
							"setCopyStreamIdsByFile",
							"copyStreamIdsByFile"
						]
					},
					"inputDataExample": "{\"copyStreamIdsByFile\": {\"/Users/user/Movies/input.mov\": {\"0\": true, \"1\": true, \"2\": true, \"3\": true}}}",
					"outputDataExample": "{\"copyStreamIdsByFile\": {\"/Users/user/Movies/input.mov\": {\"0\": true, \"1\": true, \"2\": false, \"3\": true}}}"
				},
				{
					"simStepId": "8c95b28b-64eb-4813-b540-b60bee8ea243",
					"diagramNodeId": "d28dad56-3d3a-4a1e-aab1-fd15e47248bd",
					"simStepLabel": "Re-compute `copyFileStreams`",
					"simStepDescription": "Reactively, due to the state change, the `useMemo` hook recalculates the `copyFileStreams` variable. This new array reflects the user's latest selection, excluding the deselected stream.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useStreamsMeta.ts",
						"startLine": "39",
						"endLine": "42",
						"relevantVariables": [
							"copyFileStreams",
							"copyStreamIdsByFile"
						]
					},
					"inputDataExample": "{\"copyStreamIdsByFile\": {\"/Users/user/Movies/input.mov\": {\"0\": true, \"1\": true, \"2\": false, \"3\": true}}}",
					"outputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}]}"
				},
				{
					"simStepId": "11ef14e0-36d1-4dfa-8d65-a246038bd1bf",
					"diagramNodeId": "85b7829a-7f4e-431e-8a94-62a41a531379",
					"simStepLabel": "Initiate Export",
					"simStepDescription": "The user clicks the 'Export' button. The `onExportPress` and subsequently `doExport` functions in `App.tsx` are called, which gather all necessary data for the export operation, including the newly updated `copyFileStreams`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1231",
						"endLine": "1239",
						"relevantVariables": [
							"onExportPress",
							"doExport",
							"cutMultiple",
							"copyFileStreams"
						]
					},
					"inputDataExample": "null",
					"outputDataExample": "null"
				},
				{
					"simStepId": "95bb9604-c96c-4261-a259-433fe7244934",
					"diagramNodeId": "5ae6f524-62bb-434a-81e4-51f018ed9e84",
					"simStepLabel": "Pass Data to FFmpeg Operation",
					"simStepDescription": "The `doExport` function calls `cutMultiple` from the `useFfmpegOperations` hook. This function receives all parameters for the export, including the `copyFileStreams` object that defines which tracks to include in the output.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1107",
						"endLine": "1115",
						"relevantVariables": [
							"cutMultiple",
							"copyFileStreams",
							"allFilesMeta",
							"outFormat"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}], \"outFormat\": \"mp4\", \"segmentsToExport\": [{\"cutFrom\": 10, \"cutTo\": 25}]}",
					"outputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}], \"outFormat\": \"mp4\", \"segmentsToExport\": [{\"cutFrom\": 10, \"cutTo\": 25}]}"
				},
				{
					"simStepId": "1136c0a4-df1d-4983-90b4-4908537f7306",
					"diagramNodeId": "1c063f91-eee2-43a0-845e-a121166254fd",
					"simStepLabel": "Prepare FFmpeg Stream Arguments",
					"simStepDescription": "Inside the `losslessCutSingle` function (called by `cutMultiple`), the system prepares for generating the FFmpeg command. It retrieves the `copyFileStreams` and other metadata to pass to the argument generation utility.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "278",
						"endLine": "278",
						"relevantVariables": [
							"copyFileStreams",
							"copyFileStreamsFiltered"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}]}",
					"outputDataExample": "{\"copyFileStreamsFiltered\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}]}"
				},
				{
					"simStepId": "ebb588f9-fb03-4d71-a451-9d57e6241594",
					"diagramNodeId": "14f9b3cc-417d-4817-9d81-0032c21102fa",
					"simStepLabel": "Request Stream Mapping Arguments",
					"simStepDescription": "The `losslessCutSingle` function calls `getMapStreamsArgs`, passing the filtered `copyFileStreams`, file metadata, and output format. This is the request to translate the high-level stream selection into low-level FFmpeg `-map` arguments.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "327",
						"endLine": "327",
						"relevantVariables": [
							"getMapStreamsArgs",
							"copyFileStreamsFiltered",
							"allFilesMeta",
							"outFormat"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}], \"allFilesMeta\": {\"/Users/user/Movies/input.mov\": {\"streams\": [...]}}, \"outFormat\": \"mp4\"}",
					"outputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}], \"allFilesMeta\": {\"/Users/user/Movies/input.mov\": {\"streams\": [...]}}, \"outFormat\": \"mp4\"}"
				},
				{
					"simStepId": "77c79d7f-d105-40b0-8b7b-09c4638e7b09",
					"diagramNodeId": "a38cf32d-0682-4e44-b6ad-bb3856c0d159",
					"simStepLabel": "Generate FFmpeg `-map` Arguments",
					"simStepDescription": "The `getMapStreamsArgs` utility function iterates through the `copyFileStreams` array. For each stream ID, it generates the corresponding FFmpeg arguments, like `-map 0:0 -c:0 copy`, to instruct FFmpeg to copy that specific stream from the input file to the output file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "212",
						"endLine": "218",
						"relevantVariables": [
							"args",
							"copyFileStreams",
							"streamIds",
							"fileIndex",
							"streamId"
						]
					},
					"inputDataExample": "{\"copyFileStreams\": [{\"path\": \"/Users/user/Movies/input.mov\", \"streamIds\": [0, 1, 3]}]}",
					"outputDataExample": "{\"args\": [\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:1\", \"-c:1\", \"copy\", \"-map\", \"0:3\", \"-c:3\", \"copy\"]}"
				},
				{
					"simStepId": "96e1837e-8670-4ff3-b29a-6226378363ca",
					"diagramNodeId": "66c59e74-7883-4bb6-9820-7fa09cec1be7",
					"simStepLabel": "Return Mapping Arguments",
					"simStepDescription": "The `getMapStreamsArgs` function returns the generated array of FFmpeg arguments back to the `losslessCutSingle` function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "327",
						"endLine": "327",
						"relevantVariables": [
							"mapStreamsArgs"
						]
					},
					"inputDataExample": "{\"args\": [\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:1\", \"-c:1\", \"copy\", \"-map\", \"0:3\", \"-c:3\", \"copy\"]}",
					"outputDataExample": "{\"args\": [\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:1\", \"-c:1\", \"copy\", \"-map\", \"0:3\", \"-c:3\", \"copy\"]}"
				},
				{
					"simStepId": "0a3ff59b-e764-4e02-be90-fd3177beb027",
					"diagramNodeId": "64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2",
					"simStepLabel": "Execute Final FFmpeg Command",
					"simStepDescription": "The `losslessCutSingle` function assembles the full FFmpeg command, incorporating the returned `mapStreamsArgs` along with other parameters like input/output paths and cutting times. This complete command is then executed to produce the final output file with only the user-selected tracks.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "388",
						"endLine": "388",
						"relevantVariables": [
							"runFfmpeg",
							"ffmpegArgs",
							"mapStreamsArgs"
						]
					},
					"inputDataExample": "{\"mapStreamsArgs\": [\"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:1\", \"-c:1\", \"copy\", \"-map\", \"0:3\", \"-c:3\", \"copy\"]}",
					"outputDataExample": "{\"ffmpegArgs\": [\"-i\", \"/path/input.mov\", \"-ss\", \"10\", \"-t\", \"15\", \"-map\", \"0:0\", \"-c:0\", \"copy\", \"-map\", \"0:1\", \"-c:1\", \"copy\", \"-map\", \"0:3\", \"-c:3\", \"copy\", \"/path/output.mp4\"]}"
				}
			],
			"description": "<ul><li>Provides granular control over the various streams within a media container, functioning like a swiss army knife for media tracks</li><li>- Users can open a dedicated 'Tracks' panel to view all video, audio, subtitle, and data streams in the file</li><li>- It allows for the removal of unneeded tracks (e</li><li>g</li><li>, deleting foreign audio dubs) to save space</li><li>- Users can also add new tracks from external files, such as adding a music track or including an external subtitle file into the video</li></ul>",
			"simulationNodesAndEdges": {
				"9969c0c5-4054-4f12-a222-e8350df1ad6e": {
					"simStepIds": [
						"5b7e48ec-d0fb-4305-b15b-526f0eaeebc7"
					]
				},
				"0ba6ed80-a4fd-42df-90c3-cc8176642eb8": {
					"simStepIds": [
						"c64bdeee-7fa8-4792-8f43-8799ed38001f"
					]
				},
				"2eab7be7-53cc-4437-9b96-94da3abd705b": {
					"simStepIds": [
						"c12318bb-1a99-4298-bae1-649968b05634"
					]
				},
				"85b7829a-7f4e-431e-8a94-62a41a531379": {
					"simStepIds": [
						"11ef14e0-36d1-4dfa-8d65-a246038bd1bf"
					]
				},
				"1c063f91-eee2-43a0-845e-a121166254fd": {
					"simStepIds": [
						"1136c0a4-df1d-4983-90b4-4908537f7306"
					]
				},
				"a38cf32d-0682-4e44-b6ad-bb3856c0d159": {
					"simStepIds": [
						"77c79d7f-d105-40b0-8b7b-09c4638e7b09"
					]
				},
				"64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2": {
					"simStepIds": [
						"0a3ff59b-e764-4e02-be90-fd3177beb027"
					]
				},
				"1e3dc50f-fa13-4c65-a29b-db356e608536": {
					"simStepIds": [
						"4693fc19-47d4-48a2-b2ce-efeb14a09aeb"
					]
				},
				"218f88f3-a471-405b-b29e-87febe304fcc": {
					"simStepIds": [
						"fb5a5eac-fad3-42b1-ae97-2372a1d4e1a0"
					]
				},
				"d28dad56-3d3a-4a1e-aab1-fd15e47248bd": {
					"simStepIds": [
						"8c95b28b-64eb-4813-b540-b60bee8ea243"
					]
				},
				"5ae6f524-62bb-434a-81e4-51f018ed9e84": {
					"simStepIds": [
						"95bb9604-c96c-4261-a259-433fe7244934"
					]
				},
				"14f9b3cc-417d-4817-9d81-0032c21102fa": {
					"simStepIds": [
						"ebb588f9-fb03-4d71-a451-9d57e6241594"
					]
				},
				"66c59e74-7883-4bb6-9820-7fa09cec1be7": {
					"simStepIds": [
						"96e1837e-8670-4ff3-b29a-6226378363ca"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "StreamsSelector, copyFileStreams, mapStreamsArgs",
			"generationPrompt": "Manage individual video, audio, and subtitle tracks",
			"generationKeywords": "StreamsSelector, copyFileStreams, mapStreamsArgs"
		},
		"Export segments with flexible naming and format options": {
			"name": "Export segments with flexible naming and format options",
			"simSteps": [
				{
					"simStepId": "4386839b-4f53-4009-82f0-4914a3e89685",
					"diagramNodeId": "02cb33e0-5395-4b9f-83ff-3d30ddb9ca65",
					"simStepLabel": "User Initiates Export",
					"simStepDescription": "The user, having defined the desired video segments, clicks the 'Export' button located in the bottom bar of the application to begin the export process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/BottomBar.tsx",
						"startLine": "582",
						"endLine": "582",
						"relevantVariables": [
							"ExportButton",
							"onExportPress",
							"segmentsToExport",
							"areWeCutting"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "c1b08297-d0d7-442f-9a0c-053225abca3c",
					"diagramNodeId": "c717e521-eada-4f6f-a8c7-d73249a5541a",
					"simStepLabel": "Click Event Propagation",
					"simStepDescription": "The button's 'onClick' event is captured and propagated to the 'onExportPress' callback function, which is defined in the main 'App' component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2720",
						"endLine": "2720",
						"relevantVariables": [
							"onExportPress"
						]
					},
					"inputDataExample": "{\"event\": \"click\"}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "39625942-cb71-4c63-948e-0c9a68e56fa1",
					"diagramNodeId": "162b9d32-f242-4185-ab49-a37d64df16bd",
					"simStepLabel": "Handle Export Press",
					"simStepDescription": "The 'onExportPress' function is executed. It checks the 'exportConfirmEnabled' user setting. If enabled, it sets a state variable to display the 'ExportConfirm' dialog. Otherwise, it would proceed directly to the export.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1243",
						"endLine": "1250",
						"relevantVariables": [
							"onExportPress",
							"exportConfirmEnabled",
							"exportConfirmVisible",
							"onExportConfirm",
							"setExportConfirmVisible"
						]
					},
					"inputDataExample": "{\"exportConfirmEnabled\": true, \"exportConfirmVisible\": false}",
					"outputDataExample": "{\"exportConfirmVisible\": true}"
				},
				{
					"simStepId": "2f07947f-5b33-4fc3-a8df-abce6652bba0",
					"diagramNodeId": "510d16c1-4cdc-4ce3-861f-cf87c3fab7fc",
					"simStepLabel": "Show Export Confirmation Dialog",
					"simStepDescription": "The application state is updated, causing the UI to render the 'ExportConfirm' dialog, which presents the user with various export options.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ExportConfirm.tsx",
						"startLine": "287",
						"endLine": "287",
						"relevantVariables": [
							"visible"
						]
					},
					"inputDataExample": "{\"exportConfirmVisible\": true}",
					"outputDataExample": "{\"exportConfirmVisible\": true}"
				},
				{
					"simStepId": "019434c8-55dc-4693-9300-a6c379d2e4eb",
					"diagramNodeId": "62fd54ed-f584-4134-97d0-9c39cd01339b",
					"simStepLabel": "User Configures and Confirms Export",
					"simStepDescription": "The user reviews and customizes export settings in the dialog, such as output format, file naming templates, and whether to merge segments. They then click the final 'Export' button within the dialog to start the operation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ExportConfirm.tsx",
						"startLine": "290",
						"endLine": "292",
						"relevantVariables": [
							"ExportButton",
							"onExportConfirm"
						]
					},
					"inputDataExample": "{\"userSelections\": {\"outputFormat\": \"mp4\", \"mergeSegments\": false, \"fileNameTemplate\": \"{fn}-{seg-name}\"}}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "80ceb16f-ed63-468e-b9bf-675733354dd7",
					"diagramNodeId": "de8a39cf-4120-439b-9edd-fcbe5ab35dbb",
					"simStepLabel": "Confirmation Event",
					"simStepDescription": "The click on the dialog's 'Export' button triggers the 'onExportConfirm' function, which is passed down from the main 'App' component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/ExportConfirm.tsx",
						"startLine": "291",
						"endLine": "291",
						"relevantVariables": [
							"onClick",
							"onExportConfirm"
						]
					},
					"inputDataExample": "{\"event\": \"click\"}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "9379f763-53c4-4b9e-ba0c-8e5f5db89366",
					"diagramNodeId": "4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c",
					"simStepLabel": "Prepare Export Parameters",
					"simStepDescription": "The 'onExportConfirm' function gathers all necessary data for the export, including the list of segments, output directory, chosen file format, naming templates, and various ffmpeg options. It then invokes the 'cutMultiple' function with these parameters.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1105",
						"endLine": "1111",
						"relevantVariables": [
							"cutMultiple",
							"outputDir",
							"customOutDir",
							"fileFormat",
							"fileDuration",
							"segmentsToExport",
							"outSegTemplateOrDefault",
							"generateOutSegFileNames"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/jane/videos/drone_footage.mkv\", \"segmentsToExport\": [{\"start\": 10.5, \"end\": 25.2, \"name\": \"Highlight 1\"}, {\"start\": 88.1, \"end\": 95.0, \"name\": \"Highlight 2\"}]}",
					"outputDataExample": "{\"outputDir\": \"/Users/jane/videos/\", \"customOutDir\": null, \"outFormat\": \"mp4\", \"fileDuration\": 180.0, \"segments\": [{\"start\": 10.5, \"end\": 25.2, \"name\": \"Highlight 1\"}, {\"start\": 88.1, \"end\": 95.0, \"name\": \"Highlight 2\"}], \"outSegFileNames\": [\"drone_footage-Highlight 1.mp4\", \"drone_footage-Highlight 2.mp4\"]}"
				},
				{
					"simStepId": "2de7281e-7360-4ab6-ae27-224dfdded9ae",
					"diagramNodeId": "63a14dce-3cc7-4191-a884-7c3984a3a6d9",
					"simStepLabel": "Invoke `cutMultiple`",
					"simStepDescription": "The prepared export parameters are passed as an argument to the 'cutMultiple' function from the 'useFfmpegOperations' hook, initiating the core processing logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1105",
						"endLine": "1105",
						"relevantVariables": [
							"cutMultiple"
						]
					},
					"inputDataExample": "{\"outputDir\": \"/Users/jane/videos/\", \"customOutDir\": null, \"outFormat\": \"mp4\", \"fileDuration\": 180.0, \"segments\": [{\"start\": 10.5, \"end\": 25.2, \"name\": \"Highlight 1\"}, {\"start\": 88.1, \"end\": 95.0, \"name\": \"Highlight 2\"}], \"outSegFileNames\": [\"drone_footage-Highlight 1.mp4\", \"drone_footage-Highlight 2.mp4\"]}",
					"outputDataExample": "{\"outputDir\": \"/Users/jane/videos/\", \"customOutDir\": null, \"outFormat\": \"mp4\", \"fileDuration\": 180.0, \"segments\": [{\"start\": 10.5, \"end\": 25.2, \"name\": \"Highlight 1\"}, {\"start\": 88.1, \"end\": 95.0, \"name\": \"Highlight 2\"}], \"outSegFileNames\": [\"drone_footage-Highlight 1.mp4\", \"drone_footage-Highlight 2.mp4\"]}"
				},
				{
					"simStepId": "d9b3a16a-3afd-4899-8092-4c717c3032b5",
					"diagramNodeId": "e708b1f8-a8de-4dda-9458-4d7d6dae6568",
					"simStepLabel": "Execute FFmpeg Commands",
					"simStepDescription": "Inside the 'cutMultiple' function, the application iterates through each segment slated for export. For each one, it constructs a precise FFmpeg command with the correct start/end times, codecs, format, and metadata options, then executes it as a system process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "482",
						"endLine": "491",
						"relevantVariables": [
							"cutMultiple",
							"segmentsIn",
							"outSegFileNames",
							"runFfmpeg"
						]
					},
					"inputDataExample": "{\"outputDir\": \"/Users/jane/videos/\", \"segments\": [{\"start\": 10.5, \"end\": 25.2, \"name\": \"Highlight 1\"}], \"outSegFileNames\": [\"drone_footage-Highlight 1.mp4\"]}",
					"outputDataExample": "{\"ffmpegArgs\": [\"-i\", \"/Users/jane/videos/drone_footage.mkv\", \"-ss\", \"10.5\", \"-to\", \"25.2\", \"-c\", \"copy\", \"/Users/jane/videos/drone_footage-Highlight 1.mp4\"]}"
				},
				{
					"simStepId": "69f3360a-f54e-4f51-b5cb-1d678ee6e49e",
					"diagramNodeId": "01dc9a34-4f4d-465e-b95b-cac83782e069",
					"simStepLabel": "Write Output Files to Disk",
					"simStepDescription": "The FFmpeg process reads the source media file, performs the lossless cutting operation, and writes the new, segmented output file to the specified directory on the user's file system.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "480",
						"endLine": "481",
						"relevantVariables": [
							"runFfmpeg",
							"ffmpegArgs"
						]
					},
					"inputDataExample": "{\"sourceFile\": \"/Users/jane/videos/drone_footage.mkv\", \"outputFile\": \"/Users/jane/videos/drone_footage-Highlight 1.mp4\", \"dataStream\": \"Binary H.264 video data and AAC audio data\"}",
					"outputDataExample": "{\"sourceFile\": \"/Users/jane/videos/drone_footage.mkv\", \"outputFile\": \"/Users/jane/videos/drone_footage-Highlight 1.mp4\", \"dataStream\": \"Binary H.264 video data and AAC audio data\"}"
				},
				{
					"simStepId": "fc061249-6b6f-4196-a9d4-595f577cd82e",
					"diagramNodeId": "b496201c-09db-422a-a004-b6a0010da939",
					"simStepLabel": "Export Completion and UI Update",
					"simStepDescription": "After all FFmpeg processes finish successfully, the 'onExportConfirm' function's 'finally' block is executed. It resets the application's working state, clears the progress indicator, and triggers an operating system notification to inform the user that the export is complete.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1231",
						"endLine": "1234",
						"relevantVariables": [
							"setWorking",
							"setProgress"
						]
					},
					"inputDataExample": "{\"outFiles\": [\"/Users/jane/videos/drone_footage-Highlight 1.mp4\", \"/Users/jane/videos/drone_footage-Highlight 2.mp4\"]}",
					"outputDataExample": "{\"working\": null, \"progress\": null}"
				}
			],
			"description": "<ul><li>This is the final step of the editing workflow, providing options for how the resulting files are saved</li><li>- After defining segments, the user initiates the export process, which opens an export confirmation dialog</li><li>- Users can choose to export each segment as a separate file or merge them all into a single output file</li><li>- The output container format can be changed (remuxing, e</li><li>g</li><li>, from MKV to MP4), and users can define a custom output directory and file naming templates</li></ul>",
			"simulationNodesAndEdges": {
				"02cb33e0-5395-4b9f-83ff-3d30ddb9ca65": {
					"simStepIds": [
						"4386839b-4f53-4009-82f0-4914a3e89685"
					]
				},
				"162b9d32-f242-4185-ab49-a37d64df16bd": {
					"simStepIds": [
						"39625942-cb71-4c63-948e-0c9a68e56fa1"
					]
				},
				"62fd54ed-f584-4134-97d0-9c39cd01339b": {
					"simStepIds": [
						"019434c8-55dc-4693-9300-a6c379d2e4eb"
					]
				},
				"4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c": {
					"simStepIds": [
						"9379f763-53c4-4b9e-ba0c-8e5f5db89366"
					]
				},
				"e708b1f8-a8de-4dda-9458-4d7d6dae6568": {
					"simStepIds": [
						"d9b3a16a-3afd-4899-8092-4c717c3032b5"
					]
				},
				"b496201c-09db-422a-a004-b6a0010da939": {
					"simStepIds": [
						"fc061249-6b6f-4196-a9d4-595f577cd82e"
					]
				},
				"c717e521-eada-4f6f-a8c7-d73249a5541a": {
					"simStepIds": [
						"c1b08297-d0d7-442f-9a0c-053225abca3c"
					]
				},
				"510d16c1-4cdc-4ce3-861f-cf87c3fab7fc": {
					"simStepIds": [
						"2f07947f-5b33-4fc3-a8df-abce6652bba0"
					]
				},
				"de8a39cf-4120-439b-9edd-fcbe5ab35dbb": {
					"simStepIds": [
						"80ceb16f-ed63-468e-b9bf-675733354dd7"
					]
				},
				"63a14dce-3cc7-4191-a884-7c3984a3a6d9": {
					"simStepIds": [
						"2de7281e-7360-4ab6-ae27-224dfdded9ae"
					]
				},
				"01dc9a34-4f4d-465e-b95b-cac83782e069": {
					"simStepIds": [
						"69f3360a-f54e-4f51-b5cb-1d678ee6e49e"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "ExportButton, cutMultiple, onExportPress",
			"generationPrompt": "Export segments with flexible naming and format options",
			"generationKeywords": "ExportButton, cutMultiple, onExportPress"
		},
		"Organize and manipulate cut segments via a dedicated list interface": {
			"name": "Organize and manipulate cut segments via a dedicated list interface",
			"simSteps": [
				{
					"simStepId": "51045728-84e1-4a42-bb63-5d923c75bc35",
					"diagramNodeId": "7e0f4483-913e-477a-a6a6-b20b71fc3364",
					"simStepLabel": "Flow 1: Drag and Drop Segment",
					"simStepDescription": "The user initiates a drag-and-drop action on a segment within the SegmentList UI to reorder it. The `DndContext` component captures the end of the drag event and triggers the `handleDragEnd` function.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/SegmentList.tsx",
						"startLine": "519",
						"endLine": "527",
						"relevantVariables": [
							"handleDragEnd",
							"updateSegOrders",
							"arrayMove"
						]
					},
					"inputDataExample": "{\n  \"active\": { \"id\": \"seg-b\" },\n  \"over\": { \"id\": \"seg-c\" }\n}",
					"outputDataExample": "{\n  \"oldIndex\": 1,\n  \"newIndex\": 2\n}"
				},
				{
					"simStepId": "a5479198-fdb3-4754-a5c9-d56fcb40725b",
					"diagramNodeId": "8611c163-9006-46f9-a74c-59c45b6bf655",
					"simStepLabel": "Flow 1: Transmit New Segment Order",
					"simStepDescription": "The `handleDragEnd` function calculates the new order of segment IDs and calls the `updateSegOrders` function (passed as a prop from the `App` component) with the new list of IDs.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/SegmentList.tsx",
						"startLine": "525",
						"endLine": "525",
						"relevantVariables": [
							"updateSegOrders"
						]
					},
					"inputDataExample": "{\n  \"newOrderIds\": [\n    \"seg-a\",\n    \"seg-c\",\n    \"seg-b\"\n  ]\n}",
					"outputDataExample": "{\n  \"newOrderIds\": [\n    \"seg-a\",\n    \"seg-c\",\n    \"seg-b\"\n  ]\n}"
				},
				{
					"simStepId": "a9055e36-9d28-4a37-8712-612f76bc04bf",
					"diagramNodeId": "5a6e715e-3cb5-4dad-befd-b7520b17e704",
					"simStepLabel": "Flow 1: Receive New Order in `useSegments` Hook",
					"simStepDescription": "The `updateSegOrders` function, defined in the `useSegments` hook, receives the new array of segment IDs. It then re-sorts the `cutSegments` state array based on the new order of IDs.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "433",
						"endLine": "441",
						"relevantVariables": [
							"updateSegOrders",
							"sortBy",
							"safeSetCutSegments",
							"cutSegments"
						]
					},
					"inputDataExample": "{\n  \"newOrders\": [\n    \"seg-a\",\n    \"seg-c\",\n    \"seg-b\"\n  ]\n}",
					"outputDataExample": "{\n  \"newSegments\": [\n    { \"segId\": \"seg-a\", \"start\": 0, \"end\": 10 },\n    { \"segId\": \"seg-c\", \"start\": 25, \"end\": 35 },\n    { \"segId\": \"seg-b\", \"start\": 12, \"end\": 22 }\n  ]\n}"
				},
				{
					"simStepId": "ea25bfa4-27a6-45a6-8ec2-aacecfd3ecc5",
					"diagramNodeId": "368a4b87-0ff7-4a31-a05a-65f34ffc3999",
					"simStepLabel": "Flow 1: Update Application State",
					"simStepDescription": "The `safeSetCutSegments` function is called to update the central `cutSegments` state with the newly reordered array of segments. This state change will trigger a re-render in subscribed components.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "435",
						"endLine": "435",
						"relevantVariables": [
							"safeSetCutSegments"
						]
					},
					"inputDataExample": "{\n  \"newSegments\": [\n    { \"segId\": \"seg-a\", \"start\": 0, \"end\": 10 },\n    { \"segId\": \"seg-c\", \"start\": 25, \"end\": 35 },\n    { \"segId\": \"seg-b\", \"start\": 12, \"end\": 22 }\n  ]\n}",
					"outputDataExample": "{\n  \"newSegments\": [\n    { \"segId\": \"seg-a\", \"start\": 0, \"end\": 10 },\n    { \"segId\": \"seg-c\", \"start\": 25, \"end\": 35 },\n    { \"segId\": \"seg-b\", \"start\": 12, \"end\": 22 }\n  ]\n}"
				},
				{
					"simStepId": "1cc20ae2-5be8-4f91-9481-fdb868005a1d",
					"diagramNodeId": "d51935b1-0ab0-4956-a48b-21a411df7ed0",
					"simStepLabel": "Flow 1: Re-render Segment List",
					"simStepDescription": "The `SegmentList` component, subscribed to the `cutSegments` state, receives the updated, reordered list as a prop and re-renders, displaying the segments in their new user-defined order.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2629",
						"endLine": "2631",
						"relevantVariables": [
							"SegmentList",
							"cutSegments"
						]
					},
					"inputDataExample": "{\n  \"cutSegments\": [\n    { \"segId\": \"seg-a\", \"start\": 0, \"end\": 10 },\n    { \"segId\": \"seg-c\", \"start\": 25, \"end\": 35 },\n    { \"segId\": \"seg-b\", \"start\": 12, \"end\": 22 }\n  ]\n}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "26c53604-1eca-405f-b344-7247b1c3a178",
					"diagramNodeId": "babd6979-3aad-4f97-8adc-8a83885e54ad",
					"simStepLabel": "Flow 2: User Triggers Combine Segments Action",
					"simStepDescription": "The user clicks on 'Combine selected segments' from the 'Segments' dropdown in the main application menu. This action is handled by the main process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "313",
						"endLine": "317",
						"relevantVariables": [
							"label: esc(t('Combine selected segments'))",
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\n  \"ipcChannel\": \"combineSelectedSegments\"\n}"
				},
				{
					"simStepId": "0a13ba74-c0b1-40fa-826b-4c898e52ac09",
					"diagramNodeId": "025411c7-ad78-47fa-8d76-211d2eb7aa8b",
					"simStepLabel": "Flow 2: IPC Message to Renderer",
					"simStepDescription": "The main process sends an IPC (Inter-Process Communication) message to the renderer process (the UI) to invoke the 'combineSelectedSegments' functionality.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "315",
						"endLine": "315",
						"relevantVariables": [
							"mainWindow.webContents.send('combineSelectedSegments')"
						]
					},
					"inputDataExample": "{\n  \"ipcChannel\": \"combineSelectedSegments\"\n}",
					"outputDataExample": "{\n  \"ipcChannel\": \"combineSelectedSegments\"\n}"
				},
				{
					"simStepId": "60ab9f29-e8cf-411e-a4e5-323d9c17b727",
					"diagramNodeId": "4da07742-850a-4345-9cba-3d6a66f001e7",
					"simStepLabel": "Flow 2: Execute Combine Logic in `useSegments`",
					"simStepDescription": "The renderer process receives the IPC message and calls the `combineSelectedSegments` function defined in the `useSegments` hook. This function retrieves the current list of segments and prepares to merge the selected ones.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "342",
						"endLine": "344",
						"relevantVariables": [
							"combineSelectedSegments",
							"safeSetCutSegments",
							"combineSelectedSegments2"
						]
					},
					"inputDataExample": "{\n  \"existingSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 10, \"selected\": true },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false },\n    { \"segId\": \"seg-3\", \"start\": 22, \"end\": 30, \"selected\": true }\n  ]\n}",
					"outputDataExample": "{\n  \"segmentsToCombine\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 10, \"selected\": true },\n    { \"segId\": \"seg-3\", \"start\": 22, \"end\": 30, \"selected\": true }\n  ]\n}"
				},
				{
					"simStepId": "793f8706-aac2-47eb-8037-170e53610078",
					"diagramNodeId": "7860d504-5516-45a0-aee8-b5112d1d9cc6",
					"simStepLabel": "Flow 2: Pass Segments to Utility Function",
					"simStepDescription": "The `useSegments` hook passes the current list of all segments to the `combineSelectedSegments` utility function in `segments.ts` for processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "343",
						"endLine": "343",
						"relevantVariables": [
							"combineSelectedSegments2",
							"existingSegments"
						]
					},
					"inputDataExample": "{\n  \"existingSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 10, \"selected\": true },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false },\n    { \"segId\": \"seg-3\", \"start\": 22, \"end\": 30, \"selected\": true }\n  ]\n}",
					"outputDataExample": "{\n  \"existingSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 10, \"selected\": true },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false },\n    { \"segId\": \"seg-3\", \"start\": 22, \"end\": 30, \"selected\": true }\n  ]\n}"
				},
				{
					"simStepId": "a2899f56-7bdf-457e-9290-8e751da70518",
					"diagramNodeId": "56fcb786-a03c-40d8-a688-f75aa6aeccd6",
					"simStepLabel": "Flow 2: Perform Segment Combination",
					"simStepDescription": "The `combineSelectedSegments` utility function in `segments.ts` filters for selected segments, finds the earliest start time and latest end time among them, and creates a new segment array where the selected segments are replaced by a single combined segment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/segments.ts",
						"startLine": "90",
						"endLine": "111",
						"relevantVariables": [
							"combineSelectedSegments",
							"selectedSegments",
							"firstSegment",
							"lastSegment",
							"existingSegments.flatMap"
						]
					},
					"inputDataExample": "{\n  \"existingSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 10, \"selected\": true },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false },\n    { \"segId\": \"seg-3\", \"start\": 22, \"end\": 30, \"selected\": true }\n  ]\n}",
					"outputDataExample": "{\n  \"newSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 30 },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false }\n  ]\n}"
				},
				{
					"simStepId": "ac388cfa-f898-4f92-877a-fa055e1d9f7a",
					"diagramNodeId": "29c8eccb-247a-44c8-a297-560131352318",
					"simStepLabel": "Flow 2: Return Combined Segments and Update State",
					"simStepDescription": "The utility function returns the new segment list to the `useSegments` hook, which then uses `safeSetCutSegments` to update the application's state, triggering a UI refresh.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "343",
						"endLine": "343",
						"relevantVariables": [
							"safeSetCutSegments"
						]
					},
					"inputDataExample": "{\n  \"newSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 30 },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false }\n  ]\n}",
					"outputDataExample": "{\n  \"newSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 30 },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false }\n  ]\n}"
				},
				{
					"simStepId": "bcff4228-214e-422e-9be0-201c7d339f01",
					"diagramNodeId": "1163a9b1-0a88-4d3c-aaa5-a43c8eb46212",
					"simStepLabel": "Flow 2: Re-render Segment List with Combined Segment",
					"simStepDescription": "The `SegmentList` component receives the updated `cutSegments` prop. It re-renders to display the single, new combined segment and removes the other segments that were part of the combination.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2629",
						"endLine": "2631",
						"relevantVariables": [
							"SegmentList",
							"cutSegments"
						]
					},
					"inputDataExample": "{\n  \"cutSegments\": [\n    { \"segId\": \"seg-1\", \"start\": 0, \"end\": 30 },\n    { \"segId\": \"seg-2\", \"start\": 12, \"end\": 20, \"selected\": false }\n  ]\n}",
					"outputDataExample": "{}"
				}
			],
			"description": "<ul><li>Beyond simple cutting, the application provides powerful tools for managing the created segments</li><li>- A sidebar lists all defined segments, showing their start/end times and duration</li><li>- Users can add descriptive labels or tags to each segment for better organization</li><li>- Segments can be reordered via drag-and-drop, combined, split at the playhead, or inverted (to keep the gaps instead of the segments)</li></ul>",
			"simulationNodesAndEdges": {
				"7e0f4483-913e-477a-a6a6-b20b71fc3364": {
					"simStepIds": [
						"51045728-84e1-4a42-bb63-5d923c75bc35"
					]
				},
				"5a6e715e-3cb5-4dad-befd-b7520b17e704": {
					"simStepIds": [
						"a9055e36-9d28-4a37-8712-612f76bc04bf"
					]
				},
				"d51935b1-0ab0-4956-a48b-21a411df7ed0": {
					"simStepIds": [
						"1cc20ae2-5be8-4f91-9481-fdb868005a1d"
					]
				},
				"babd6979-3aad-4f97-8adc-8a83885e54ad": {
					"simStepIds": [
						"26c53604-1eca-405f-b344-7247b1c3a178"
					]
				},
				"4da07742-850a-4345-9cba-3d6a66f001e7": {
					"simStepIds": [
						"60ab9f29-e8cf-411e-a4e5-323d9c17b727"
					]
				},
				"56fcb786-a03c-40d8-a688-f75aa6aeccd6": {
					"simStepIds": [
						"a2899f56-7bdf-457e-9290-8e751da70518"
					]
				},
				"1163a9b1-0a88-4d3c-aaa5-a43c8eb46212": {
					"simStepIds": [
						"bcff4228-214e-422e-9be0-201c7d339f01"
					]
				},
				"8611c163-9006-46f9-a74c-59c45b6bf655": {
					"simStepIds": [
						"a5479198-fdb3-4754-a5c9-d56fcb40725b"
					]
				},
				"368a4b87-0ff7-4a31-a05a-65f34ffc3999": {
					"simStepIds": [
						"ea25bfa4-27a6-45a6-8ec2-aacecfd3ecc5"
					]
				},
				"025411c7-ad78-47fa-8d76-211d2eb7aa8b": {
					"simStepIds": [
						"0a13ba74-c0b1-40fa-826b-4c898e52ac09"
					]
				},
				"7860d504-5516-45a0-aee8-b5112d1d9cc6": {
					"simStepIds": [
						"793f8706-aac2-47eb-8037-170e53610078"
					]
				},
				"29c8eccb-247a-44c8-a297-560131352318": {
					"simStepIds": [
						"ac388cfa-f898-4f92-877a-fa055e1d9f7a"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "SegmentList, updateSegOrder, combineSelectedSegments",
			"generationPrompt": "Organize and manipulate cut segments via a dedicated list interface",
			"generationKeywords": "SegmentList, updateSegOrder, combineSelectedSegments"
		},
		"Capture high-resolution snapshots and extract frame sequences": {
			"name": "Capture high-resolution snapshots and extract frame sequences",
			"simSteps": [
				{
					"simStepId": "e58c04f1-c16f-4de0-adfd-157073daad81",
					"diagramNodeId": "a7d8cba3-3053-4048-bdc6-d89856979550",
					"simStepLabel": "(Flow: Single Snapshot) - User Clicks Capture Button",
					"simStepDescription": "The user clicks the camera icon in the bottom bar to capture a snapshot of the current frame. This triggers the `captureSnapshot` function.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/BottomBar.tsx",
						"startLine": "563",
						"endLine": "571",
						"relevantVariables": [
							"IoIosCamera",
							"captureSnapshot"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"event\": \"onClick\"}"
				},
				{
					"simStepId": "4431a346-47c5-4a7c-a2cf-813c0a70ecc5",
					"diagramNodeId": "e7da2a0c-737c-4efe-b9de-698639d372c3",
					"simStepLabel": "(Flow: Single Snapshot) - Invoke `captureSnapshot`",
					"simStepDescription": "The `onClick` event triggers the `captureSnapshot` function passed down from the `App` component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2719",
						"endLine": "2719",
						"relevantVariables": [
							"captureSnapshot"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "76bf2bfe-811d-435e-b652-effbf655e284",
					"diagramNodeId": "2befd469-c197-4ae6-8853-7052040c4a43",
					"simStepLabel": "(Flow: Single Snapshot) - Handle Snapshot Logic in App",
					"simStepDescription": "In `App.tsx`, the `captureSnapshot` function is executed. It sets the application to a \"working\" state and then calls `captureFrameFromFfmpeg` from the `useFrameCapture` hook, providing the current time and capture settings.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1244",
						"endLine": "1252",
						"relevantVariables": [
							"captureSnapshot",
							"setWorking"
						]
					},
					"inputDataExample": "{\"currentTime\": 42.123}",
					"outputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"time\": 42.123, \"captureFormat\": \"jpeg\", \"quality\": 2}"
				},
				{
					"simStepId": "d19ef73b-b807-4a08-9bbc-8d403928f5f3",
					"diagramNodeId": "052bff40-6a65-4a91-b3ff-83f64d0283eb",
					"simStepLabel": "(Flow: Single Snapshot) - Pass Parameters to Frame Capture Hook",
					"simStepDescription": "The necessary data (file path, time, output directory, format, quality) is passed to the `captureFrameFromFfmpeg` function within the `useFrameCapture` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1767",
						"endLine": "1767",
						"relevantVariables": [
							"captureFrameFromFfmpeg"
						]
					},
					"inputDataExample": "{\"customOutDir\": \"/Users/john/Movies/Exports\", \"filePath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"time\": 42.123, \"captureFormat\": \"jpeg\", \"quality\": 2}",
					"outputDataExample": "{\"customOutDir\": \"/Users/john/Movies/Exports\", \"filePath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"time\": 42.123, \"captureFormat\": \"jpeg\", \"quality\": 2}"
				},
				{
					"simStepId": "38f172e4-ced8-481b-813a-c76509477df6",
					"diagramNodeId": "7785f7f8-9482-43ee-9d5c-af07771c2155",
					"simStepLabel": "(Flow: Single Snapshot) - Prepare and Send IPC Request",
					"simStepDescription": "The `useFrameCapture` hook calls the `ffmpeg.captureFrame` wrapper. This wrapper, defined in `renderer/src/ffmpeg.ts`, sends an IPC request to the main process to execute the actual ffmpeg command for capturing a single frame.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "13",
						"endLine": "24",
						"relevantVariables": [
							"ffmpeg.captureFrame"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"time\": 42.123, ...}",
					"outputDataExample": "{\"command\": \"captureFrame\", \"args\": {...}}"
				},
				{
					"simStepId": "10ce9600-eae9-42aa-bbf3-c681da4c99b3",
					"diagramNodeId": "00ab2a94-6eb3-4da3-9516-dddcc779b941",
					"simStepLabel": "(Flow: Single Snapshot) - Transmit FFmpeg Command to Main Process",
					"simStepDescription": "The parameters for the ffmpeg command are serialized and sent over the IPC channel from the renderer to the main process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": []
					},
					"inputDataExample": "{\"time\": 42.123, \"videoPath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"outPath\": \"/Users/john/Movies/Exports/my_drone_footage-snapshot.jpeg\", \"captureFormat\": \"jpeg\", \"quality\": 2}",
					"outputDataExample": "{\"time\": 42.123, \"videoPath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"outPath\": \"/Users/john/Movies/Exports/my_drone_footage-snapshot.jpeg\", \"captureFormat\": \"jpeg\", \"quality\": 2}"
				},
				{
					"simStepId": "388c02fa-079a-475b-8ac4-c4723da308f2",
					"diagramNodeId": "0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b",
					"simStepLabel": "(Flow: Single Snapshot) - Execute FFmpeg Command in Main Process",
					"simStepDescription": "The main process receives the IPC request and uses its `ffmpeg.ts` helper to construct and execute the `ffmpeg` command-line instruction (with `-vframes 1`) to extract the single frame and save it to the specified output path.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "455",
						"endLine": "474",
						"relevantVariables": [
							"captureFrames",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\"time\": 42.123, \"videoPath\": \"/Users/john/Videos/my_drone_footage.mp4\", ...}",
					"outputDataExample": "{\"outputPath\": \"/Users/john/Movies/Exports/my_drone_footage-snapshot.jpeg\"}"
				},
				{
					"simStepId": "e416973d-c7f0-40ce-9a3a-e6949682c78e",
					"diagramNodeId": "9946b3b6-132e-4e1a-8ba3-8995b4888e7a",
					"simStepLabel": "(Flow: Single Snapshot) - Return Output Path to Renderer",
					"simStepDescription": "After the ffmpeg process successfully creates the snapshot file, the main process returns the full path of the newly created image back to the renderer process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": []
					},
					"inputDataExample": "{\"status\": \"success\", \"outPath\": \"/Users/john/Movies/Exports/my_drone_footage-snapshot.jpeg\"}",
					"outputDataExample": "{\"status\": \"success\", \"outPath\": \"/Users/john/Movies/Exports/my_drone_footage-snapshot.jpeg\"}"
				},
				{
					"simStepId": "065941a3-b019-496a-975b-7beb4523ad52",
					"diagramNodeId": "92b37389-6687-472b-bec1-1ce9a99ed84e",
					"simStepLabel": "(Flow: Single Snapshot) - Finalize and Notify User",
					"simStepDescription": "Back in `App.tsx`, the `captureSnapshot` function's promise resolves with the output path. It then displays a success notification to the user and resets the application's \"working\" state.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1303",
						"endLine": "1306",
						"relevantVariables": [
							"showOsNotification",
							"openDirToast",
							"setWorking"
						]
					},
					"inputDataExample": "{\"outPath\": \"/Users/john/Movies/Exports/my_drone_footage-snapshot.jpeg\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "5dd7b86f-1c8c-45cf-b370-a3b8428b44a2",
					"diagramNodeId": "760a64e3-a949-4d5b-880f-407e53cb1dbe",
					"simStepLabel": "(Flow: Extract Frames) - Initiate Frame Extraction",
					"simStepDescription": "The user has selected one or more segments and triggers the \"extract frames\" action. This action calls `extractSegmentsFramesAsImages` with the relevant segments.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1311",
						"endLine": "1319",
						"relevantVariables": [
							"extractCurrentSegmentFramesAsImages",
							"extractSegmentsFramesAsImages"
						]
					},
					"inputDataExample": "{\"currentCutSeg\": {\"id\": \"seg-1\", \"start\": 10.5, \"end\": 15.2}}",
					"outputDataExample": "[{\"id\": \"seg-1\", \"start\": 10.5, \"end\": 15.2}]"
				},
				{
					"simStepId": "19dbdaae-ab36-47c6-b391-849aaac61082",
					"diagramNodeId": "68cd15c4-b10c-482f-81f9-629d4a826a75",
					"simStepLabel": "(Flow: Extract Frames) - Pass Segments to Handler",
					"simStepDescription": "An array of selected `Segment` objects is passed to the main extraction logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": []
					},
					"inputDataExample": "[{\"id\": \"seg-1\", \"start\": 10.5, \"end\": 15.2, \"name\": \"Scene 1\"}, {\"id\": \"seg-2\", \"start\": 25.0, \"end\": 28.1, \"name\": \"Scene 2\"}]",
					"outputDataExample": "[{\"id\": \"seg-1\", \"start\": 10.5, \"end\": 15.2, \"name\": \"Scene 1\"}, {\"id\": \"seg-2\", \"start\": 25.0, \"end\": 28.1, \"name\": \"Scene 2\"}]"
				},
				{
					"simStepId": "23944648-dcd8-4b6e-80cc-1d61b4f4a4c9",
					"diagramNodeId": "081c262a-afae-44e9-a329-66e2bfdda284",
					"simStepLabel": "(Flow: Extract Frames) - Prompt User for Extraction Settings",
					"simStepDescription": "The application calls `askExtractFramesAsImages` to display a dialog where the user can specify how frames should be extracted (e.g., every Nth frame, all frames, best thumbnails).",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1272",
						"endLine": "1288",
						"relevantVariables": [
							"extractSegmentsFramesAsImages",
							"askExtractFramesAsImages"
						]
					},
					"inputDataExample": "{\"segmentsNumFrames\": 230, \"plural\": true, \"fps\": 29.97}",
					"outputDataExample": "{\"filter\": \"select='not(mod(n,10))'\", \"estimatedMaxNumFiles\": 23}"
				},
				{
					"simStepId": "8b6dabe7-adc5-44a1-96c6-a8e195d98a88",
					"diagramNodeId": "f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589",
					"simStepLabel": "(Flow: Extract Frames) - Transmit User Settings",
					"simStepDescription": "The user's selections from the dialog are returned to the `extractSegmentsFramesAsImages` function. This includes the filter to be applied by ffmpeg.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": []
					},
					"inputDataExample": "{\"filter\": \"select='not(mod(n,10))'\", \"estimatedMaxNumFiles\": 23}",
					"outputDataExample": "{\"filter\": \"select='not(mod(n,10))'\", \"estimatedMaxNumFiles\": 23}"
				},
				{
					"simStepId": "e92d2625-3d6b-45ca-8adc-016d9e421fdd",
					"diagramNodeId": "693f4612-01f3-43e9-bd8a-d7b484ceeab2",
					"simStepLabel": "(Flow: Extract Frames) - Iterate Segments and Call Capture Logic",
					"simStepDescription": "The application loops through each segment. In each iteration, it calls `captureFramesRange` from the `useFrameCapture` hook, passing the specific parameters for that segment (file path, start/end times, FPS, and the user's chosen filter).",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1298",
						"endLine": "1306",
						"relevantVariables": [
							"segments",
							"captureFramesRange",
							"handleSegmentProgress"
						]
					},
					"inputDataExample": "{\"segments\": [{\"start\": 10.5, \"end\": 15.2}, {\"start\": 25.0, \"end\": 28.1}]}",
					"outputDataExample": "{\"segment\": {\"start\": 10.5, \"end\": 15.2}, \"index\": 0}"
				},
				{
					"simStepId": "fcade72e-6a7c-45c7-8576-2a421b8c7b97",
					"diagramNodeId": "90ae7a85-3d59-4561-84c8-6e18f93d91dd",
					"simStepLabel": "(Flow: Extract Frames) - Invoke Frame Capture for a Segment",
					"simStepDescription": "The parameters for a single segment's frame capture operation are passed to the `captureFramesRange` function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": []
					},
					"inputDataExample": "{\"customOutDir\": \"/Users/john/Movies/Exports\", \"filePath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"fps\": 29.97, \"fromTime\": 10.5, \"toTime\": 15.2, \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"customOutDir\": \"/Users/john/Movies/Exports\", \"filePath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"fps\": 29.97, \"fromTime\": 10.5, \"toTime\": 15.2, \"filter\": \"select='not(mod(n,10))'\"}"
				},
				{
					"simStepId": "3a983b21-6f92-4c33-80ff-19343105cef5",
					"diagramNodeId": "c3c030a9-5d90-4f24-afb0-73ebbbc1559a",
					"simStepLabel": "(Flow: Extract Frames) - Prepare FFmpeg Arguments (Renderer)",
					"simStepDescription": "Inside the `useFrameCapture` hook, the `captureFramesRange` function prepares the arguments for the ffmpeg command. It constructs the output path template and then calls `ffmpeg.captureFrames`, which communicates with the main process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFrameCapture.ts",
						"startLine": "50",
						"endLine": "58",
						"relevantVariables": [
							"captureFramesRange",
							"getSuffixedOutPath",
							"ffmpeg.captureFrames"
						]
					},
					"inputDataExample": "{\"fromTime\": 10.5, \"toTime\": 15.2, ...}",
					"outputDataExample": "{\"from\": 10.5, \"to\": 15.2, \"videoPath\": \"...\", \"outPathTemplate\": \"...\", ...}"
				},
				{
					"simStepId": "4642e408-7799-452c-b4c2-533e71621d59",
					"diagramNodeId": "1ab145d8-8007-411f-bae3-cc909e50c718",
					"simStepLabel": "(Flow: Extract Frames) - IPC Call to Main Process",
					"simStepDescription": "The renderer process sends an IPC request to the main process to execute the ffmpeg command. The `renderer/src/ffmpeg.ts` file manages this bridge.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "13",
						"endLine": "24",
						"relevantVariables": [
							"ffmpeg.captureFrames"
						]
					},
					"inputDataExample": "{\"from\": 10.5, \"to\": 15.2, \"videoPath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"outPathTemplate\": \"/Users/john/Movies/Exports/my_drone_footage-frames/%04d.jpeg\", \"captureFormat\": \"jpeg\", \"quality\": 2, \"filter\": \"select='not(mod(n,10))'\"}",
					"outputDataExample": "{\"from\": 10.5, \"to\": 15.2, \"videoPath\": \"/Users/john/Videos/my_drone_footage.mp4\", \"outPathTemplate\": \"/Users/john/Movies/Exports/my_drone_footage-frames/%04d.jpeg\", \"captureFormat\": \"jpeg\", \"quality\": 2, \"filter\": \"select='not(mod(n,10))'\"}"
				},
				{
					"simStepId": "d9c31e85-47d1-4d7e-a4bd-4bc51417cc8d",
					"diagramNodeId": "12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3",
					"simStepLabel": "(Flow: Extract Frames) - Execute FFmpeg Command (Main Process)",
					"simStepDescription": "The main process receives the request. The `captureFrames` function in `main/ffmpeg.ts` assembles the final command-line arguments and executes the `ffmpeg` binary, which reads the video file and writes the individual frame images to disk.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "455",
						"endLine": "474",
						"relevantVariables": [
							"captureFrames",
							"getQualityOpts",
							"getCodecOpts",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\"from\": 10.5, \"to\": 15.2, ...}",
					"outputDataExample": "{\"status\": \"success\"}"
				},
				{
					"simStepId": "da3aaf54-e0aa-473a-ba63-6c836bdf3b90",
					"diagramNodeId": "0aa79848-d158-447d-981a-4927a4869085",
					"simStepLabel": "(Flow: Extract Frames) - Return Completion Status",
					"simStepDescription": "Once the ffmpeg process for a segment is complete, the main process signals success back to the renderer. The output path of the first generated file is returned.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "",
						"startLine": "0",
						"endLine": "0",
						"relevantVariables": []
					},
					"inputDataExample": "{\"status\": \"success\", \"firstFileOutPath\": \"/Users/john/Movies/Exports/my_drone_footage-frames/0001.jpeg\"}",
					"outputDataExample": "{\"status\": \"success\", \"firstFileOutPath\": \"/Users/john/Movies/Exports/my_drone_footage-frames/0001.jpeg\"}"
				},
				{
					"simStepId": "5386d1a0-fb0d-422a-b1bc-f1509fbe85cd",
					"diagramNodeId": "5ce8acd4-af7f-457c-bdd9-f092ecd28c20",
					"simStepLabel": "(Flow: Extract Frames) - Finalize and Notify User",
					"simStepDescription": "After the loop over all segments completes, the `extractSegmentsFramesAsImages` function in `App.tsx` shows an OS notification and a toast message to inform the user that the frames have been extracted successfully and provides a button to open the output directory.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1303",
						"endLine": "1306",
						"relevantVariables": [
							"showOsNotification",
							"openDirToast"
						]
					},
					"inputDataExample": "{\"lastOutPath\": \"/Users/john/Movies/Exports/my_drone_footage-frames/0001.jpeg\"}",
					"outputDataExample": "{}"
				}
			],
			"description": "<ul><li>Allows users to extract still images from a video file</li><li>- At any point in the video, a single high-resolution snapshot can be captured and saved as a JPEG or PNG file</li><li>- The application can also export a sequence of frames from a selected segment</li><li>- This is useful for creating thumbnails, GIFs, or for detailed frame-by-frame analysis</li></ul>",
			"simulationNodesAndEdges": {
				"a7d8cba3-3053-4048-bdc6-d89856979550": {
					"simStepIds": [
						"e58c04f1-c16f-4de0-adfd-157073daad81"
					]
				},
				"2befd469-c197-4ae6-8853-7052040c4a43": {
					"simStepIds": [
						"76bf2bfe-811d-435e-b652-effbf655e284"
					]
				},
				"7785f7f8-9482-43ee-9d5c-af07771c2155": {
					"simStepIds": [
						"38f172e4-ced8-481b-813a-c76509477df6"
					]
				},
				"0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b": {
					"simStepIds": [
						"388c02fa-079a-475b-8ac4-c4723da308f2"
					]
				},
				"92b37389-6687-472b-bec1-1ce9a99ed84e": {
					"simStepIds": [
						"065941a3-b019-496a-975b-7beb4523ad52"
					]
				},
				"760a64e3-a949-4d5b-880f-407e53cb1dbe": {
					"simStepIds": [
						"5dd7b86f-1c8c-45cf-b370-a3b8428b44a2"
					]
				},
				"081c262a-afae-44e9-a329-66e2bfdda284": {
					"simStepIds": [
						"23944648-dcd8-4b6e-80cc-1d61b4f4a4c9"
					]
				},
				"693f4612-01f3-43e9-bd8a-d7b484ceeab2": {
					"simStepIds": [
						"e92d2625-3d6b-45ca-8adc-016d9e421fdd"
					]
				},
				"c3c030a9-5d90-4f24-afb0-73ebbbc1559a": {
					"simStepIds": [
						"3a983b21-6f92-4c33-80ff-19343105cef5"
					]
				},
				"12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3": {
					"simStepIds": [
						"d9c31e85-47d1-4d7e-a4bd-4bc51417cc8d"
					]
				},
				"5ce8acd4-af7f-457c-bdd9-f092ecd28c20": {
					"simStepIds": [
						"5386d1a0-fb0d-422a-b1bc-f1509fbe85cd"
					]
				},
				"e7da2a0c-737c-4efe-b9de-698639d372c3": {
					"simStepIds": [
						"4431a346-47c5-4a7c-a2cf-813c0a70ecc5"
					]
				},
				"052bff40-6a65-4a91-b3ff-83f64d0283eb": {
					"simStepIds": [
						"d19ef73b-b807-4a08-9bbc-8d403928f5f3"
					]
				},
				"00ab2a94-6eb3-4da3-9516-dddcc779b941": {
					"simStepIds": [
						"10ce9600-eae9-42aa-bbf3-c681da4c99b3"
					]
				},
				"9946b3b6-132e-4e1a-8ba3-8995b4888e7a": {
					"simStepIds": [
						"e416973d-c7f0-40ce-9a3a-e6949682c78e"
					]
				},
				"68cd15c4-b10c-482f-81f9-629d4a826a75": {
					"simStepIds": [
						"19dbdaae-ab36-47c6-b391-849aaac61082"
					]
				},
				"f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589": {
					"simStepIds": [
						"8b6dabe7-adc5-44a1-96c6-a8e195d98a88"
					]
				},
				"90ae7a85-3d59-4561-84c8-6e18f93d91dd": {
					"simStepIds": [
						"fcade72e-6a7c-45c7-8576-2a421b8c7b97"
					]
				},
				"1ab145d8-8007-411f-bae3-cc909e50c718": {
					"simStepIds": [
						"4642e408-7799-452c-b4c2-533e71621d59"
					]
				},
				"0aa79848-d158-447d-981a-4927a4869085": {
					"simStepIds": [
						"da3aaf54-e0aa-473a-ba63-6c836bdf3b90"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "captureSnapshot, captureFrames, extractFrames",
			"generationPrompt": "Capture high-resolution snapshots and extract frame sequences",
			"generationKeywords": "captureSnapshot, captureFrames, extractFrames"
		},
		"Import and export segment data for interoperability": {
			"name": "Import and export segment data for interoperability",
			"simSteps": [
				{
					"simStepId": "680e5937-fe58-4e7e-a8fc-9dc5f587d868",
					"diagramNodeId": "d3533b42-22f1-4b67-864b-bdb281e642c1",
					"simStepLabel": "Import Flow: User Initiates Import",
					"simStepDescription": "The user navigates to the 'File' -> 'Import project' menu and selects a format, for example, 'Times in seconds (CSV)'. This action triggers a `click` event handler in the main process menu configuration.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "86",
						"endLine": "89",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"channel\": \"importEdlFile\", \"payload\": \"csv\"}"
				},
				{
					"simStepId": "ae71618e-a4ed-4f87-bc77-dfaf30be84b3",
					"diagramNodeId": "c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6",
					"simStepLabel": "Import Flow: IPC Message from Main to Renderer",
					"simStepDescription": "The `click` handler in the main process sends an Inter-Process Communication (IPC) message on the `importEdlFile` channel to the renderer process, passing the selected format type 'csv' as an argument.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "88",
						"endLine": "88",
						"relevantVariables": [
							"importEdlFile",
							"csv"
						]
					},
					"inputDataExample": "{\"channel\": \"importEdlFile\", \"args\": [\"csv\"]}",
					"outputDataExample": "{\"channel\": \"importEdlFile\", \"args\": [\"csv\"]}"
				},
				{
					"simStepId": "ecc368c7-1378-4eab-a98b-f42a0cfef1d9",
					"diagramNodeId": "7524fecc-23cb-4c08-b29e-655b444add3a",
					"simStepLabel": "Import Flow: Renderer Receives Import Request",
					"simStepDescription": "The renderer process has a listener for the `importEdlFile` channel. When the message is received, it invokes the `importEdlFile` function defined in the `App` component.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2330",
						"endLine": "2342",
						"relevantVariables": [
							"importEdlFile",
							"askForEdlImport"
						]
					},
					"inputDataExample": "{\"type\": \"csv\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "17aec12a-a2b2-49d2-b468-12b1fb104185",
					"diagramNodeId": "e2e7f492-a2c2-4697-8cd7-07b3379c0c85",
					"simStepLabel": "Import Flow: Requesting File Selection",
					"simStepDescription": "The `importEdlFile` function calls `askForEdlImport`, passing along the import type and detected FPS. This function orchestrates the file selection and reading process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2334",
						"endLine": "2334",
						"relevantVariables": [
							"askForEdlImport",
							"type",
							"fps"
						]
					},
					"inputDataExample": "{\"type\": \"csv\", \"fps\": 29.97}",
					"outputDataExample": "{\"type\": \"csv\", \"fps\": 29.97}"
				},
				{
					"simStepId": "969a4f98-3b9d-43d4-8e21-ec8bbd08879b",
					"diagramNodeId": "bfd0fc48-026c-4de3-8c82-909ff7d606fc",
					"simStepLabel": "Import Flow: User Selects File",
					"simStepDescription": "The `askForEdlImport` function displays a native file open dialog, allowing the user to choose the EDL file. If a file is selected, its path is retrieved to be passed on for parsing.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "177",
						"endLine": "181",
						"relevantVariables": [
							"askForEdlImport",
							"showOpenDialog",
							"readEdlFile"
						]
					},
					"inputDataExample": "{\"type\": \"csv\", \"fps\": 29.97}",
					"outputDataExample": "{\"type\": \"csv\", \"path\": \"/Users/john/Documents/cuts.csv\", \"fps\": 29.97}"
				},
				{
					"simStepId": "b3097023-d096-4a92-95d8-108e4c845f51",
					"diagramNodeId": "c05f5940-5d49-4b71-86a4-ebd439e5d880",
					"simStepLabel": "Import Flow: Passing File Path to Parser",
					"simStepDescription": "The selected file path is passed to the `readEdlFile` function to handle the actual file reading and content parsing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "180",
						"endLine": "180",
						"relevantVariables": [
							"readEdlFile",
							"type",
							"path",
							"fps"
						]
					},
					"inputDataExample": "{\"type\": \"csv\", \"path\": \"/Users/john/Documents/cuts.csv\", \"fps\": 29.97}",
					"outputDataExample": "{\"type\": \"csv\", \"path\": \"/Users/john/Documents/cuts.csv\", \"fps\": 29.97}"
				},
				{
					"simStepId": "e2fca9a3-8304-4d96-8390-3257aa11378f",
					"diagramNodeId": "0cf982e9-8979-4ad6-b959-a1f8c49905f3",
					"simStepLabel": "Import Flow: Parse File Content",
					"simStepDescription": "`readEdlFile` reads the file's content and, based on the `type`, calls the appropriate parsing function from `edlFormats.ts`. For 'csv', it calls `parseCsvTime`. The parser converts the text content into structured segment data.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "125",
						"endLine": "125",
						"relevantVariables": [
							"readEdlFile",
							"parseCsvTime",
							"fileStr"
						]
					},
					"inputDataExample": "{ \"fileContent\": \"10.5,25.2,First segment\\n30.0,45.8,Second segment\", \"type\": \"csv\" }",
					"outputDataExample": "[ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ]"
				},
				{
					"simStepId": "37434817-ce91-49d8-81e9-e5c32a4aabfc",
					"diagramNodeId": "03708460-4037-41be-89d7-25b13e01cf46",
					"simStepLabel": "Import Flow: Return Parsed Segments",
					"simStepDescription": "The array of parsed segment objects is returned up the call stack to the `App` component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "180",
						"endLine": "180",
						"relevantVariables": [
							"readEdlFile"
						]
					},
					"inputDataExample": "[ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ]",
					"outputDataExample": "[ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ]"
				},
				{
					"simStepId": "9d4ffd66-54f5-4ba1-91eb-61e3a18cf945",
					"diagramNodeId": "ca8ee221-dc28-4f07-8085-3a2c4ca16031",
					"simStepLabel": "Import Flow: Update UI with New Segments",
					"simStepDescription": "Back in `App.tsx`, the `importEdlFile` function receives the parsed segments. It then calls `loadCutSegments` to replace the current segments with the imported ones, causing the UI timeline to re-render and display the new cut points.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2336",
						"endLine": "2341",
						"relevantVariables": [
							"loadCutSegments",
							"edl"
						]
					},
					"inputDataExample": "[ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ]",
					"outputDataExample": "{ \"status\": \"success\", \"message\": \"Segments loaded and UI updated\" }"
				},
				{
					"simStepId": "ea2fa0b3-d112-4d0f-ae15-13f78ea94830",
					"diagramNodeId": "07884426-3661-4afd-84bd-2d95ac503260",
					"simStepLabel": "Export Flow: User Initiates Export",
					"simStepDescription": "The user navigates to the 'File' -> 'Export project' menu and selects a format, for example, 'Times in seconds (CSV)'. This action triggers a `click` event handler in the main process.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "154",
						"endLine": "157",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"channel\": \"exportEdlFile\", \"payload\": \"csv\"}"
				},
				{
					"simStepId": "c5621546-2cd2-4573-ba65-5a175cbe2092",
					"diagramNodeId": "46418920-153e-4c85-97a1-9d7468c27c4a",
					"simStepLabel": "Export Flow: IPC Message from Main to Renderer",
					"simStepDescription": "The `click` handler in the main process sends an IPC message on the `exportEdlFile` channel to the renderer process, passing the selected format type 'csv' as an argument.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "156",
						"endLine": "156",
						"relevantVariables": [
							"exportEdlFile",
							"csv"
						]
					},
					"inputDataExample": "{\"channel\": \"exportEdlFile\", \"args\": [\"csv\"]}",
					"outputDataExample": "{\"channel\": \"exportEdlFile\", \"args\": [\"csv\"]}"
				},
				{
					"simStepId": "135656a2-a458-49f3-993c-c810e9de3e9a",
					"diagramNodeId": "c4b9525b-fa35-4273-ab18-aae9e291bdde",
					"simStepLabel": "Export Flow: Renderer Receives Export Request",
					"simStepDescription": "The renderer process's IPC listener for `exportEdlFile` invokes the `tryExportEdlFile` function defined in the `App` component.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2316",
						"endLine": "2321",
						"relevantVariables": [
							"tryExportEdlFile",
							"exportEdlFile"
						]
					},
					"inputDataExample": "{\"type\": \"csv\"}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "24995595-2411-4103-8c32-238672487486",
					"diagramNodeId": "145fc4e6-761b-4430-8120-b3f3c4b52d0c",
					"simStepLabel": "Export Flow: Passing Segments to Export Logic",
					"simStepDescription": "`tryExportEdlFile` gathers the necessary data (current segments, file path, etc.) and calls the `exportEdlFile` function from `edlStore.ts` to handle the export process.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2319",
						"endLine": "2319",
						"relevantVariables": [
							"exportEdlFile",
							"type",
							"cutSegments",
							"filePath"
						]
					},
					"inputDataExample": "{\"type\": \"csv\", \"cutSegments\": [ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ], \"filePath\": \"/Users/john/Videos/my_video.mp4\"}",
					"outputDataExample": "{\"type\": \"csv\", \"cutSegments\": [ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ], \"filePath\": \"/Users/john/Videos/my_video.mp4\"}"
				},
				{
					"simStepId": "c60cb2ff-055f-459f-adb1-ede0e4696123",
					"diagramNodeId": "362d362c-47d4-481b-8691-e9fd87d7311f",
					"simStepLabel": "Export Flow: Format Segment Data",
					"simStepDescription": "Inside `exportEdlFile` in `edlStore.ts`, a `switch` statement selects the appropriate formatting function from `edlFormats.ts` based on the export type. For 'csv', it calls `formatCsvSeconds`, which converts the segment objects into a CSV-formatted string.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "202",
						"endLine": "202",
						"relevantVariables": [
							"formatCsvSeconds",
							"cutSegments"
						]
					},
					"inputDataExample": "{ \"cutSegments\": [ { \"start\": 10.5, \"end\": 25.2, \"name\": \"First segment\" }, { \"start\": 30.0, \"end\": 45.8, \"name\": \"Second segment\" } ] }",
					"outputDataExample": "{ \"formattedString\": \"10.500,25.200,First segment\\n30.000,45.800,Second segment\" }"
				},
				{
					"simStepId": "9df6ff84-6be0-4c5d-953c-3ffab39b8d73",
					"diagramNodeId": "98244205-26ff-4fba-9c22-05113a50c751",
					"simStepLabel": "Export Flow: Return Formatted String for Saving",
					"simStepDescription": "The formatted string is assigned to the `outStr` variable inside the `exportEdlFile` function, ready to be written to a file.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "199",
						"endLine": "199",
						"relevantVariables": [
							"outStr"
						]
					},
					"inputDataExample": "{ \"formattedString\": \"10.500,25.200,First segment\\n30.000,45.800,Second segment\" }",
					"outputDataExample": "{ \"formattedString\": \"10.500,25.200,First segment\\n30.000,45.800,Second segment\" }"
				},
				{
					"simStepId": "e7014807-34fb-4755-b27e-f90f2250ddda",
					"diagramNodeId": "51002018-47ae-42b5-a51a-6cc103e3d397",
					"simStepLabel": "Export Flow: Write Data to File",
					"simStepDescription": "`exportEdlFile` prompts the user with a 'Save File' dialog to choose a location and filename. After the user confirms, the formatted string is written to the specified file on disk.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/edlStore.ts",
						"startLine": "252",
						"endLine": "257",
						"relevantVariables": [
							"showSaveDialog",
							"writeFile",
							"outPath",
							"outStr"
						]
					},
					"inputDataExample": "{ \"outPath\": \"/Users/john/Documents/my_video-segments.csv\", \"outStr\": \"10.500,25.200,First segment\\n30.000,45.800,Second segment\" }",
					"outputDataExample": "{ \"status\": \"success\", \"path\": \"/Users/john/Documents/my_video-segments.csv\" }"
				}
			],
			"description": "<ul><li>Facilitates workflows that involve other video editing software or documentation by supporting various Edit Decision List (EDL) formats</li><li>- Users can import segment lists from various formats like CSV, standard EDL, CUE sheets, and YouTube chapters</li><li>- LosslessCut automatically creates the corresponding cut segments on the timeline based on the imported data</li><li>- The current set of segments can be exported to these formats, for instance, to create YouTube chapter markers or to process in another tool</li></ul>",
			"simulationNodesAndEdges": {
				"d3533b42-22f1-4b67-864b-bdb281e642c1": {
					"simStepIds": [
						"680e5937-fe58-4e7e-a8fc-9dc5f587d868"
					]
				},
				"7524fecc-23cb-4c08-b29e-655b444add3a": {
					"simStepIds": [
						"ecc368c7-1378-4eab-a98b-f42a0cfef1d9"
					]
				},
				"bfd0fc48-026c-4de3-8c82-909ff7d606fc": {
					"simStepIds": [
						"969a4f98-3b9d-43d4-8e21-ec8bbd08879b"
					]
				},
				"0cf982e9-8979-4ad6-b959-a1f8c49905f3": {
					"simStepIds": [
						"e2fca9a3-8304-4d96-8390-3257aa11378f"
					]
				},
				"ca8ee221-dc28-4f07-8085-3a2c4ca16031": {
					"simStepIds": [
						"9d4ffd66-54f5-4ba1-91eb-61e3a18cf945"
					]
				},
				"07884426-3661-4afd-84bd-2d95ac503260": {
					"simStepIds": [
						"ea2fa0b3-d112-4d0f-ae15-13f78ea94830"
					]
				},
				"c4b9525b-fa35-4273-ab18-aae9e291bdde": {
					"simStepIds": [
						"135656a2-a458-49f3-993c-c810e9de3e9a"
					]
				},
				"362d362c-47d4-481b-8691-e9fd87d7311f": {
					"simStepIds": [
						"c60cb2ff-055f-459f-adb1-ede0e4696123"
					]
				},
				"51002018-47ae-42b5-a51a-6cc103e3d397": {
					"simStepIds": [
						"e7014807-34fb-4755-b27e-f90f2250ddda"
					]
				},
				"c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6": {
					"simStepIds": [
						"ae71618e-a4ed-4f87-bc77-dfaf30be84b3"
					]
				},
				"e2e7f492-a2c2-4697-8cd7-07b3379c0c85": {
					"simStepIds": [
						"17aec12a-a2b2-49d2-b468-12b1fb104185"
					]
				},
				"c05f5940-5d49-4b71-86a4-ebd439e5d880": {
					"simStepIds": [
						"b3097023-d096-4a92-95d8-108e4c845f51"
					]
				},
				"03708460-4037-41be-89d7-25b13e01cf46": {
					"simStepIds": [
						"37434817-ce91-49d8-81e9-e5c32a4aabfc"
					]
				},
				"46418920-153e-4c85-97a1-9d7468c27c4a": {
					"simStepIds": [
						"c5621546-2cd2-4573-ba65-5a175cbe2092"
					]
				},
				"145fc4e6-761b-4430-8120-b3f3c4b52d0c": {
					"simStepIds": [
						"24995595-2411-4103-8c32-238672487486"
					]
				},
				"98244205-26ff-4fba-9c22-05113a50c751": {
					"simStepIds": [
						"9df6ff84-6be0-4c5d-953c-3ffab39b8d73"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "edlFormats, importEdlFile, exportEdlFile",
			"generationPrompt": "Import and export segment data for interoperability",
			"generationKeywords": "edlFormats, importEdlFile, exportEdlFile"
		},
		"Automatically create segments based on scene detection": {
			"name": "Automatically create segments based on scene detection",
			"simSteps": [
				{
					"simStepId": "b992da02-5f62-4aaa-93a1-a3e35463a5ef",
					"diagramNodeId": "dde9e8a3-d8fb-4ecb-ac6b-735a900b260a",
					"simStepLabel": "Scene Change Detection: User Action",
					"simStepDescription": "The user initiates the scene change detection process by selecting the 'Detect scene changes' option from the 'Tools' menu.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "409",
						"endLine": "414",
						"relevantVariables": [
							"mainWindow"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "942ca4c1-0b3b-4030-bb6f-c985dc07187c",
					"diagramNodeId": "2362a313-cd9a-47d0-8046-0a88e6f0cf7a",
					"simStepLabel": "Scene Change Detection: IPC Call to Renderer",
					"simStepDescription": "The main process sends an Inter-Process Communication (IPC) message to the renderer process to trigger the scene change detection logic in the UI.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "412",
						"endLine": "412",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{\"channel\": \"detectSceneChanges\"}",
					"outputDataExample": "{\"channel\": \"detectSceneChanges\"}"
				},
				{
					"simStepId": "4c52212b-5544-44fa-bb86-bf636c6ed96d",
					"diagramNodeId": "c3f303b4-e2e4-4090-befc-9e5002d98c54",
					"simStepLabel": "Scene Change Detection: Renderer Handles Action",
					"simStepDescription": "The renderer process receives the event (or a keyboard shortcut is used) and invokes the `detectSceneChanges` function, which is managed by the `useSegments` hook.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "2148",
						"endLine": "2150",
						"relevantVariables": [
							"detectSceneChanges"
						]
					},
					"inputDataExample": "{\"keyup\": true}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "d289f805-d0d6-45cf-922b-71450e8f8fa3",
					"diagramNodeId": "f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229",
					"simStepLabel": "Scene Change Detection: Data Flow to Hook",
					"simStepDescription": "The call propagates from the component's event handler to the `detectSceneChanges` function within the `useSegments` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "364",
						"endLine": "364",
						"relevantVariables": [
							"detectSceneChanges"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "1cdea182-4b51-444e-a4b4-056fc80443ed",
					"diagramNodeId": "6d93dcc6-f792-4d54-ac38-23a85ed98dbb",
					"simStepLabel": "Scene Change Detection: Prompt for Parameters",
					"simStepDescription": "The `detectSceneChanges` function in the `useSegments` hook displays a dialog to the user, asking for FFmpeg parameters, such as the scene change detection threshold.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "242",
						"endLine": "245",
						"relevantVariables": [
							"showParametersDialog",
							"getFfmpegParameters"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"minChange\": \"0.4\"}"
				},
				{
					"simStepId": "e9f2e013-dab0-4b7e-a8e9-73e3188a3fb4",
					"diagramNodeId": "3e0b0a5f-1e92-41b5-85b2-194b46efce9b",
					"simStepLabel": "Scene Change Detection: Renderer to Main Process RPC",
					"simStepDescription": "With the user-provided parameters, the renderer calls the `detectSceneChanges` function in the main process via Electron's remote procedure call (RPC) mechanism.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "249",
						"endLine": "250",
						"relevantVariables": [
							"ffmpegDetectSceneChanges"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"streamId\": 0, \"minChange\": \"0.4\", \"from\": 0, \"to\": 120.5}",
					"outputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"streamId\": 0, \"minChange\": \"0.4\", \"from\": 0, \"to\": 120.5}"
				},
				{
					"simStepId": "0bac87ea-95e9-4b90-b96a-d610a64c1fad",
					"diagramNodeId": "c309a726-3326-4aa5-8ee3-dd30fd3e1f3f",
					"simStepLabel": "Scene Change Detection: Execute FFmpeg in Main Process",
					"simStepDescription": "The main process constructs and executes an FFmpeg command using a special filter (`select='gt(scene,...)',showinfo`) to analyze the video file and detect scene changes.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "266",
						"endLine": "291",
						"relevantVariables": [
							"runFfmpegWithProgress",
							"customArgs"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"streamId\": 0, \"minChange\": \"0.4\", \"from\": 0, \"to\": 120.5}",
					"outputDataExample": "FFmpeg process stdout stream"
				},
				{
					"simStepId": "58bb9984-782b-467f-bded-126a954a5639",
					"diagramNodeId": "c9abdd34-d0dc-42a2-ab2f-eec81d35670b",
					"simStepLabel": "Scene Change Detection: Parse FFmpeg Output",
					"simStepDescription": "The main process captures the stdout from FFmpeg and parses it line by line to extract the timestamps of detected scene changes.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "294",
						"endLine": "306",
						"relevantVariables": [
							"matchLineTokens"
						]
					},
					"inputDataExample": "\"[Parsed_showinfo_1 @ 0x7f8c8a813e00] n:125 pts:225225 pts_time:5.00500 ... scene:0.45 ...\"",
					"outputDataExample": "\"[Parsed_showinfo_1 @ 0x7f8c8a813e00] n:125 pts:225225 pts_time:5.00500 ... scene:0.45 ...\""
				},
				{
					"simStepId": "18233949-03d9-416d-9f03-60d3458ac1ed",
					"diagramNodeId": "7c8418ca-bf26-48d9-987c-226cd976d0cb",
					"simStepLabel": "Scene Change Detection: Create Segments from Timestamps",
					"simStepDescription": "For each detected scene change, a new segment is created. The end time of the previous segment (or the start of the timeline) becomes the start time of the new segment, and the scene change timestamp becomes the end time.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "308",
						"endLine": "321",
						"relevantVariables": [
							"mapTimesToSegments",
							"onSegmentDetected"
						]
					},
					"inputDataExample": "{\"pts_time\": 5.005}",
					"outputDataExample": "{\"start\": 0, \"end\": 5.005}"
				},
				{
					"simStepId": "c037e3c1-34d6-4bd4-a8ee-85eb1c7300d1",
					"diagramNodeId": "a1577447-fd49-4251-a0b0-a62b3908fb0d",
					"simStepLabel": "Scene Change Detection: Send Segments to Renderer",
					"simStepDescription": "The newly created segments are sent back to the renderer process via the `onSegmentDetected` callback.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "320",
						"endLine": "320",
						"relevantVariables": [
							"onSegmentDetected"
						]
					},
					"inputDataExample": "[{\"start\": 0, \"end\": 5.005}, {\"start\": 5.005, \"end\": 12.345}]",
					"outputDataExample": "[{\"start\": 0, \"end\": 5.005}, {\"start\": 5.005, \"end\": 12.345}]"
				},
				{
					"simStepId": "c33d12c2-3be2-4b6e-92c2-d91da2671f38",
					"diagramNodeId": "2c017872-e3f8-48aa-9e1e-93d2bc3bf809",
					"simStepLabel": "Scene Change Detection: Update UI State",
					"simStepDescription": "In the renderer, the `useSegments` hook receives the new segments and updates the application's state, adding the segments to the list of `cutSegments`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "249",
						"endLine": "250",
						"relevantVariables": [
							"ffmpegDetectSceneChanges"
						]
					},
					"inputDataExample": "[{\"start\": 0, \"end\": 5.005}, {\"start\": 5.005, \"end\": 12.345}]",
					"outputDataExample": "{\"cutSegments\": [{\"start\": 0, \"end\": 5.005, \"name\": \"00:00:00.000-00:00:05.005\"}, {\"start\": 5.005, \"end\": 12.345, \"name\": \"00:00:05.005-00:00:12.345\"}]}"
				},
				{
					"simStepId": "716694dd-986f-43d5-a760-338d5cff8d42",
					"diagramNodeId": "cfd52763-30a8-444b-8e68-00cb81f6b267",
					"simStepLabel": "Scene Change Detection: State Propagation",
					"simStepDescription": "The updated segment list from the React state is passed as props to UI components like the timeline and segment list.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "363",
						"endLine": "363",
						"relevantVariables": [
							"cutSegments"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"start\": 0, \"end\": 5.005, \"name\": \"00:00:00.000-00:00:05.005\"}, {\"start\": 5.005, \"end\": 12.345, \"name\": \"00:00:05.005-00:00:12.345\"}]}",
					"outputDataExample": "{\"cutSegments\": [{\"start\": 0, \"end\": 5.005, \"name\": \"00:00:00.000-00:00:05.005\"}, {\"start\": 5.005, \"end\": 12.345, \"name\": \"00:00:05.005-00:00:12.345\"}]}"
				},
				{
					"simStepId": "1ca4cb05-7428-4d6c-9fb6-fd4805b4f3a5",
					"diagramNodeId": "f5d29e71-82ea-4b6e-a74a-5283380ec5db",
					"simStepLabel": "Scene Change Detection: UI Re-renders",
					"simStepDescription": "The application's UI re-renders to display the newly created segments on the timeline and in the segment list, making them available for the user to review and edit.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "119",
						"endLine": "2303",
						"relevantVariables": [
							"Timeline",
							"SegmentList"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"start\": 0, \"end\": 5.005, \"name\": \"00:00:00.000-00:00:05.005\"}, {\"start\": 5.005, \"end\": 12.345, \"name\": \"00:00:05.005-00:00:12.345\"}]}",
					"outputDataExample": "Rendered HTML elements for the timeline and segment list."
				},
				{
					"simStepId": "cf6724c3-63f2-4fea-9f76-0d246ed4091d",
					"diagramNodeId": "f42707c2-1bec-4d3a-b361-0109ee9763e1",
					"simStepLabel": "Black Scene Detection: User Action",
					"simStepDescription": "The user initiates the black scene detection process from the 'Tools' menu or a keyboard shortcut.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "409",
						"endLine": "414",
						"relevantVariables": [
							"mainWindow"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "3db429cb-97bd-4ee0-b686-30adecec12c2",
					"diagramNodeId": "52244aa2-c876-4d40-86da-b03ca034833b",
					"simStepLabel": "Black Scene Detection: IPC Call to Renderer",
					"simStepDescription": "The main process sends an IPC message to the renderer process to trigger the black scene detection logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "412",
						"endLine": "412",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{\"channel\": \"detectBlackScenes\"}",
					"outputDataExample": "{\"channel\": \"detectBlackScenes\"}"
				},
				{
					"simStepId": "a6f0b3bd-e549-429d-bb9d-63e7e803bfc8",
					"diagramNodeId": "f91cbaa0-5b5a-4970-a009-ba0c59cd26ce",
					"simStepLabel": "Black Scene Detection: Renderer Handles Action",
					"simStepDescription": "The renderer process event handler invokes the `detectBlackScenes` function from the `useSegments` hook.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "209",
						"endLine": "222",
						"relevantVariables": [
							"detectBlackScenes"
						]
					},
					"inputDataExample": "{\"keyup\": true}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "8f883cc7-a085-4397-9db8-ec659b4a6efc",
					"diagramNodeId": "e4ccaa03-af51-465d-b6b9-db7fc6496ddd",
					"simStepLabel": "Black Scene Detection: Data Flow to Hook",
					"simStepDescription": "The call propagates to the `detectBlackScenes` function within the `useSegments` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "364",
						"endLine": "364",
						"relevantVariables": [
							"detectBlackScenes"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "3f2abab7-26b5-4cb6-89f5-0f45711999dd",
					"diagramNodeId": "029628fc-7041-4720-b517-641ab3ed4f09",
					"simStepLabel": "Black Scene Detection: Prompt for Parameters",
					"simStepDescription": "The `detectBlackScenes` function displays a dialog for the user to configure FFmpeg's `blackdetect` filter parameters, like minimum duration and pixel blackness threshold.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "212",
						"endLine": "214",
						"relevantVariables": [
							"showParametersDialog",
							"getFfmpegParameters"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"black_min_duration\": \"2.0\", \"pic_th\": \"0.98\", \"mode\": \"1\"}"
				},
				{
					"simStepId": "97903c39-e1b1-4b11-82d7-ade16db77b3b",
					"diagramNodeId": "0598d104-2e45-4a38-b37c-74019b0cd15b",
					"simStepLabel": "Black Scene Detection: Renderer to Main Process RPC",
					"simStepDescription": "The renderer calls the `blackDetect` function in the main process via Electron RPC, passing the file path and filter options.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "219",
						"endLine": "220",
						"relevantVariables": [
							"detectSegments",
							"blackDetect"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"filterOptions\": {\"black_min_duration\": \"2.0\"}, \"boundingMode\": true, \"from\": 0, \"to\": 180}",
					"outputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"filterOptions\": {\"black_min_duration\": \"2.0\"}, \"boundingMode\": true, \"from\": 0, \"to\": 180}"
				},
				{
					"simStepId": "2f1972b9-2423-4435-ab4d-9e7f6f0feb07",
					"diagramNodeId": "ab8351cf-d45b-4d7e-83a8-61a4c8d127cd",
					"simStepLabel": "Black Scene Detection: Execute FFmpeg in Main Process",
					"simStepDescription": "The main process runs FFmpeg with the `blackdetect` video filter, which analyzes the video for sections of black screen that match the user's parameters.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "360",
						"endLine": "398",
						"relevantVariables": [
							"blackDetect",
							"mapFilterOptions"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/video.mp4\", \"filterOptions\": {\"black_min_duration\": \"2.0\"}}",
					"outputDataExample": "FFmpeg process stdout stream"
				},
				{
					"simStepId": "2235bea4-735d-4379-a4f5-ff40341d3055",
					"diagramNodeId": "da0d25a6-1ea4-40af-983f-3a60c179ac65",
					"simStepLabel": "Black Scene Detection: Parse FFmpeg Output",
					"simStepDescription": "The main process parses FFmpeg's output, looking for lines containing `black_start` and `black_end` to identify the time ranges of black scenes.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "378",
						"endLine": "384",
						"relevantVariables": [
							"matchLineTokens"
						]
					},
					"inputDataExample": "\"[blackdetect @ 0x555a0a8f9a40] black_start:59.84 black_end:62.32 black_duration:2.48\"",
					"outputDataExample": "\"[blackdetect @ 0x555a0a8f9a40] black_start:59.84 black_end:62.32 black_duration:2.48\""
				},
				{
					"simStepId": "9805d75f-b533-4ea9-b818-6a76d9d711c6",
					"diagramNodeId": "f051e287-d1a6-4049-93e1-3c81facb3df1",
					"simStepLabel": "Black Scene Detection: Create Segments",
					"simStepDescription": "Using the parsed start and end times, new segments are created that correspond to the detected periods of black screen.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "390",
						"endLine": "391",
						"relevantVariables": [
							"start",
							"end"
						]
					},
					"inputDataExample": "{\"start\": 59.84, \"end\": 62.32}",
					"outputDataExample": "{\"start\": 59.84, \"end\": 62.32}"
				},
				{
					"simStepId": "fa17a8cb-5edb-4910-9c6b-4ac69f072ea8",
					"diagramNodeId": "6ba47f79-b230-4a5f-a922-dfa59978ce2a",
					"simStepLabel": "Black Scene Detection: Send Segments to Renderer",
					"simStepDescription": "The new segments are sent back to the renderer via the `onSegmentDetected` callback.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "220",
						"endLine": "220",
						"relevantVariables": [
							"onSegmentDetected"
						]
					},
					"inputDataExample": "[{\"start\": 59.84, \"end\": 62.32}]",
					"outputDataExample": "[{\"start\": 59.84, \"end\": 62.32}]"
				},
				{
					"simStepId": "16f32b79-4285-44ec-ad28-f2604efffa04",
					"diagramNodeId": "d722089a-093a-42d6-aaf2-ee9e6178acd0",
					"simStepLabel": "Black Scene Detection: Update UI State",
					"simStepDescription": "The renderer's `useSegments` hook receives the new segments and updates the `cutSegments` state.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "219",
						"endLine": "220",
						"relevantVariables": [
							"detectSegments"
						]
					},
					"inputDataExample": "[{\"start\": 59.84, \"end\": 62.32}]",
					"outputDataExample": "{\"cutSegments\": [{\"start\": 59.84, \"end\": 62.32, \"name\": \"00:00:59.840-00:01:02.320\"}]}"
				},
				{
					"simStepId": "39ac225b-621d-4c7f-8acd-ad62163944b8",
					"diagramNodeId": "8b2b6b30-2303-4de0-90de-52a587fbd82a",
					"simStepLabel": "Black Scene Detection: State Propagation",
					"simStepDescription": "The updated segment list is passed as props to UI components.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "363",
						"endLine": "363",
						"relevantVariables": [
							"cutSegments"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"start\": 59.84, \"end\": 62.32, \"name\": \"00:00:59.840-00:01:02.320\"}]}",
					"outputDataExample": "{\"cutSegments\": [{\"start\": 59.84, \"end\": 62.32, \"name\": \"00:00:59.840-00:01:02.320\"}]}"
				},
				{
					"simStepId": "cae15d6b-d7e1-4b5e-9ce7-dae4e42a933c",
					"diagramNodeId": "181779b8-2613-4af1-bc9d-6c2c507bd6eb",
					"simStepLabel": "Black Scene Detection: UI Re-renders",
					"simStepDescription": "The UI re-renders to display the new segments on the timeline.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "119",
						"endLine": "2303",
						"relevantVariables": [
							"Timeline",
							"SegmentList"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"start\": 59.84, \"end\": 62.32, \"name\": \"00:00:59.840-00:01:02.320\"}]}",
					"outputDataExample": "Rendered HTML elements representing the new segments."
				},
				{
					"simStepId": "1c93d318-c5b8-40b2-915f-dd98944b456f",
					"diagramNodeId": "11927875-24e2-47bf-a306-246eca2d904c",
					"simStepLabel": "Silence Detection: User Action",
					"simStepDescription": "The user initiates the silence detection process from the 'Tools' menu or a keyboard shortcut.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "409",
						"endLine": "414",
						"relevantVariables": [
							"mainWindow"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"event\": \"click\"}"
				},
				{
					"simStepId": "314dd6fd-7f2d-4666-99e3-0abf299c03dc",
					"diagramNodeId": "d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122",
					"simStepLabel": "Silence Detection: IPC Call to Renderer",
					"simStepDescription": "The main process sends an IPC message to the renderer process to trigger the silence detection logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "412",
						"endLine": "412",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{\"channel\": \"detectSilentScenes\"}",
					"outputDataExample": "{\"channel\": \"detectSilentScenes\"}"
				},
				{
					"simStepId": "5c7764e5-4dca-4f31-a65f-b1a673566eb3",
					"diagramNodeId": "1d6d2fd0-31d7-4823-b8c0-5ef8394db821",
					"simStepLabel": "Silence Detection: Renderer Handles Action",
					"simStepDescription": "The renderer process event handler invokes the `detectSilentScenes` function from the `useSegments` hook.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "224",
						"endLine": "237",
						"relevantVariables": [
							"detectSilentScenes"
						]
					},
					"inputDataExample": "{\"keyup\": true}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "1b248f07-2566-4457-9fba-18a447b0261a",
					"diagramNodeId": "2111c6c0-2531-4109-9dbb-5c84f6a5bb81",
					"simStepLabel": "Silence Detection: Data Flow to Hook",
					"simStepDescription": "The call propagates to the `detectSilentScenes` function within the `useSegments` hook.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "364",
						"endLine": "364",
						"relevantVariables": [
							"detectSilentScenes"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "797fc0c1-5508-455b-a075-6c9bbdfe99e2",
					"diagramNodeId": "2c637b16-8c1d-43fa-a290-f0254dedfd76",
					"simStepLabel": "Silence Detection: Prompt for Parameters",
					"simStepDescription": "The `detectSilentScenes` function displays a dialog for the user to configure FFmpeg's `silencedetect` filter parameters, such as noise tolerance and minimum silence duration.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "227",
						"endLine": "229",
						"relevantVariables": [
							"showParametersDialog",
							"getFfmpegParameters"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"noise\": \"-50dB\", \"duration\": \"2.0\", \"mode\": \"1\"}"
				},
				{
					"simStepId": "1ebc0436-9f5a-4d2c-8a37-b311ddbbaef7",
					"diagramNodeId": "8900a419-1ca4-4df4-958f-b19146d42fdf",
					"simStepLabel": "Silence Detection: Renderer to Main Process RPC",
					"simStepDescription": "The renderer calls the `silenceDetect` function in the main process via Electron RPC, passing the file path and filter options.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "234",
						"endLine": "235",
						"relevantVariables": [
							"detectSegments",
							"silenceDetect"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/audio.mp3\", \"filterOptions\": {\"noise\": \"-50dB\", \"duration\": \"2.0\"}, \"boundingMode\": true, \"from\": 0, \"to\": 300}",
					"outputDataExample": "{\"filePath\": \"/path/to/audio.mp3\", \"filterOptions\": {\"noise\": \"-50dB\", \"duration\": \"2.0\"}, \"boundingMode\": true, \"from\": 0, \"to\": 300}"
				},
				{
					"simStepId": "b43e3810-6711-4961-9ce9-1e9be832eaa1",
					"diagramNodeId": "695f434e-8d1a-4d6d-a361-98ddce752592",
					"simStepLabel": "Silence Detection: Execute FFmpeg in Main Process",
					"simStepDescription": "The main process runs FFmpeg with the `silencedetect` audio filter to analyze the audio track for periods of silence.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "400",
						"endLine": "438",
						"relevantVariables": [
							"silenceDetect",
							"mapFilterOptions"
						]
					},
					"inputDataExample": "{\"filePath\": \"/path/to/audio.mp3\", \"filterOptions\": {\"noise\": \"-50dB\", \"duration\": \"2.0\"}}",
					"outputDataExample": "FFmpeg process stdout stream"
				},
				{
					"simStepId": "d6f1a3a6-c3d0-4809-9d11-ede1e7da29ba",
					"diagramNodeId": "a529e3fe-f14c-4fa3-8ec8-6a5f040a72da",
					"simStepLabel": "Silence Detection: Parse FFmpeg Output",
					"simStepDescription": "The main process parses FFmpeg's output, looking for lines containing `silence_end` and `silence_duration` to identify the time ranges of silence.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "417",
						"endLine": "423",
						"relevantVariables": [
							"matchLineTokens"
						]
					},
					"inputDataExample": "\"[silencedetect @ 0x55a4d29a1a40] silence_end: 45.123 | silence_duration: 3.456\"",
					"outputDataExample": "\"[silencedetect @ 0x55a4d29a1a40] silence_end: 45.123 | silence_duration: 3.456\""
				},
				{
					"simStepId": "774494bf-6b3a-4d1e-9195-a7e8cc4b2fdb",
					"diagramNodeId": "c5799ea3-3e22-4b94-bb3b-ccb2a4e74274",
					"simStepLabel": "Silence Detection: Create Segments",
					"simStepDescription": "Using the parsed end time and duration, the start and end times of the silent period are calculated, and a new segment is created.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/ffmpeg.ts",
						"startLine": "424",
						"endLine": "431",
						"relevantVariables": [
							"end",
							"duration",
							"start"
						]
					},
					"inputDataExample": "{\"end\": 45.123, \"duration\": 3.456}",
					"outputDataExample": "{\"start\": 41.667, \"end\": 45.123}"
				},
				{
					"simStepId": "933f5032-0470-4711-ab5a-f3776528006f",
					"diagramNodeId": "6f24a616-1edf-4990-a60a-b62a4401ae33",
					"simStepLabel": "Silence Detection: Send Segments to Renderer",
					"simStepDescription": "The new segments representing silent periods are sent back to the renderer via the `onSegmentDetected` callback.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "235",
						"endLine": "235",
						"relevantVariables": [
							"onSegmentDetected"
						]
					},
					"inputDataExample": "[{\"start\": 41.667, \"end\": 45.123}]",
					"outputDataExample": "[{\"start\": 41.667, \"end\": 45.123}]"
				},
				{
					"simStepId": "308cbc54-1373-4fcc-b1de-d73455e969ef",
					"diagramNodeId": "a528150e-5b40-4ad2-bb8d-237e21afb878",
					"simStepLabel": "Silence Detection: Update UI State",
					"simStepDescription": "The renderer's `useSegments` hook receives the new segments and updates the `cutSegments` state.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useSegments.ts",
						"startLine": "234",
						"endLine": "235",
						"relevantVariables": [
							"detectSegments"
						]
					},
					"inputDataExample": "[{\"start\": 41.667, \"end\": 45.123}]",
					"outputDataExample": "{\"cutSegments\": [{\"start\": 41.667, \"end\": 45.123, \"name\": \"00:00:41.667-00:00:45.123\"}]}"
				},
				{
					"simStepId": "98e32875-67ff-4c98-983e-e267d3a0ebd4",
					"diagramNodeId": "59896773-97d4-463a-a667-8e89e735a03d",
					"simStepLabel": "Silence Detection: State Propagation",
					"simStepDescription": "The updated segment list is passed as props to UI components.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "363",
						"endLine": "363",
						"relevantVariables": [
							"cutSegments"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"start\": 41.667, \"end\": 45.123, \"name\": \"00:00:41.667-00:00:45.123\"}]}",
					"outputDataExample": "{\"cutSegments\": [{\"start\": 41.667, \"end\": 45.123, \"name\": \"00:00:41.667-00:00:45.123\"}]}"
				},
				{
					"simStepId": "9dad773b-01f8-4039-b042-6bb40d40fc14",
					"diagramNodeId": "35f5a086-80c0-4e6a-8f6e-08603af2f796",
					"simStepLabel": "Silence Detection: UI Re-renders",
					"simStepDescription": "The UI re-renders to display the new silent segments on the timeline.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "119",
						"endLine": "2303",
						"relevantVariables": [
							"Timeline",
							"SegmentList"
						]
					},
					"inputDataExample": "{\"cutSegments\": [{\"start\": 41.667, \"end\": 45.123, \"name\": \"00:00:41.667-00:00:45.123\"}]}",
					"outputDataExample": "Rendered HTML elements representing the new segments."
				}
			],
			"description": "<ul><li>Provides automation tools to speed up the process of segmenting long recordings</li><li>- The application can analyze the video to automatically detect scene changes and create a new segment for each detected scene</li><li>- It can also create segments by detecting periods of black screen or silence in the audio track</li><li>- This is highly valuable for quickly rough-cutting raw footage, TV recordings with commercial breaks, or interviews</li></ul>",
			"simulationNodesAndEdges": {
				"dde9e8a3-d8fb-4ecb-ac6b-735a900b260a": {
					"simStepIds": [
						"b992da02-5f62-4aaa-93a1-a3e35463a5ef"
					]
				},
				"c3f303b4-e2e4-4090-befc-9e5002d98c54": {
					"simStepIds": [
						"4c52212b-5544-44fa-bb86-bf636c6ed96d"
					]
				},
				"6d93dcc6-f792-4d54-ac38-23a85ed98dbb": {
					"simStepIds": [
						"1cdea182-4b51-444e-a4b4-056fc80443ed"
					]
				},
				"c309a726-3326-4aa5-8ee3-dd30fd3e1f3f": {
					"simStepIds": [
						"0bac87ea-95e9-4b90-b96a-d610a64c1fad"
					]
				},
				"7c8418ca-bf26-48d9-987c-226cd976d0cb": {
					"simStepIds": [
						"18233949-03d9-416d-9f03-60d3458ac1ed"
					]
				},
				"2c017872-e3f8-48aa-9e1e-93d2bc3bf809": {
					"simStepIds": [
						"c33d12c2-3be2-4b6e-92c2-d91da2671f38"
					]
				},
				"f5d29e71-82ea-4b6e-a74a-5283380ec5db": {
					"simStepIds": [
						"1ca4cb05-7428-4d6c-9fb6-fd4805b4f3a5"
					]
				},
				"f42707c2-1bec-4d3a-b361-0109ee9763e1": {
					"simStepIds": [
						"cf6724c3-63f2-4fea-9f76-0d246ed4091d"
					]
				},
				"f91cbaa0-5b5a-4970-a009-ba0c59cd26ce": {
					"simStepIds": [
						"a6f0b3bd-e549-429d-bb9d-63e7e803bfc8"
					]
				},
				"029628fc-7041-4720-b517-641ab3ed4f09": {
					"simStepIds": [
						"3f2abab7-26b5-4cb6-89f5-0f45711999dd"
					]
				},
				"ab8351cf-d45b-4d7e-83a8-61a4c8d127cd": {
					"simStepIds": [
						"2f1972b9-2423-4435-ab4d-9e7f6f0feb07"
					]
				},
				"f051e287-d1a6-4049-93e1-3c81facb3df1": {
					"simStepIds": [
						"9805d75f-b533-4ea9-b818-6a76d9d711c6"
					]
				},
				"d722089a-093a-42d6-aaf2-ee9e6178acd0": {
					"simStepIds": [
						"16f32b79-4285-44ec-ad28-f2604efffa04"
					]
				},
				"181779b8-2613-4af1-bc9d-6c2c507bd6eb": {
					"simStepIds": [
						"cae15d6b-d7e1-4b5e-9ce7-dae4e42a933c"
					]
				},
				"11927875-24e2-47bf-a306-246eca2d904c": {
					"simStepIds": [
						"1c93d318-c5b8-40b2-915f-dd98944b456f"
					]
				},
				"1d6d2fd0-31d7-4823-b8c0-5ef8394db821": {
					"simStepIds": [
						"5c7764e5-4dca-4f31-a65f-b1a673566eb3"
					]
				},
				"2c637b16-8c1d-43fa-a290-f0254dedfd76": {
					"simStepIds": [
						"797fc0c1-5508-455b-a075-6c9bbdfe99e2"
					]
				},
				"695f434e-8d1a-4d6d-a361-98ddce752592": {
					"simStepIds": [
						"b43e3810-6711-4961-9ce9-1e9be832eaa1"
					]
				},
				"c5799ea3-3e22-4b94-bb3b-ccb2a4e74274": {
					"simStepIds": [
						"774494bf-6b3a-4d1e-9195-a7e8cc4b2fdb"
					]
				},
				"a528150e-5b40-4ad2-bb8d-237e21afb878": {
					"simStepIds": [
						"308cbc54-1373-4fcc-b1de-d73455e969ef"
					]
				},
				"35f5a086-80c0-4e6a-8f6e-08603af2f796": {
					"simStepIds": [
						"9dad773b-01f8-4039-b042-6bb40d40fc14"
					]
				},
				"2362a313-cd9a-47d0-8046-0a88e6f0cf7a": {
					"simStepIds": [
						"942ca4c1-0b3b-4030-bb6f-c985dc07187c"
					]
				},
				"f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229": {
					"simStepIds": [
						"d289f805-d0d6-45cf-922b-71450e8f8fa3"
					]
				},
				"3e0b0a5f-1e92-41b5-85b2-194b46efce9b": {
					"simStepIds": [
						"e9f2e013-dab0-4b7e-a8e9-73e3188a3fb4"
					]
				},
				"c9abdd34-d0dc-42a2-ab2f-eec81d35670b": {
					"simStepIds": [
						"58bb9984-782b-467f-bded-126a954a5639"
					]
				},
				"a1577447-fd49-4251-a0b0-a62b3908fb0d": {
					"simStepIds": [
						"c037e3c1-34d6-4bd4-a8ee-85eb1c7300d1"
					]
				},
				"cfd52763-30a8-444b-8e68-00cb81f6b267": {
					"simStepIds": [
						"716694dd-986f-43d5-a760-338d5cff8d42"
					]
				},
				"52244aa2-c876-4d40-86da-b03ca034833b": {
					"simStepIds": [
						"3db429cb-97bd-4ee0-b686-30adecec12c2"
					]
				},
				"e4ccaa03-af51-465d-b6b9-db7fc6496ddd": {
					"simStepIds": [
						"8f883cc7-a085-4397-9db8-ec659b4a6efc"
					]
				},
				"0598d104-2e45-4a38-b37c-74019b0cd15b": {
					"simStepIds": [
						"97903c39-e1b1-4b11-82d7-ade16db77b3b"
					]
				},
				"da0d25a6-1ea4-40af-983f-3a60c179ac65": {
					"simStepIds": [
						"2235bea4-735d-4379-a4f5-ff40341d3055"
					]
				},
				"6ba47f79-b230-4a5f-a922-dfa59978ce2a": {
					"simStepIds": [
						"fa17a8cb-5edb-4910-9c6b-4ac69f072ea8"
					]
				},
				"8b2b6b30-2303-4de0-90de-52a587fbd82a": {
					"simStepIds": [
						"39ac225b-621d-4c7f-8acd-ad62163944b8"
					]
				},
				"d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122": {
					"simStepIds": [
						"314dd6fd-7f2d-4666-99e3-0abf299c03dc"
					]
				},
				"2111c6c0-2531-4109-9dbb-5c84f6a5bb81": {
					"simStepIds": [
						"1b248f07-2566-4457-9fba-18a447b0261a"
					]
				},
				"8900a419-1ca4-4df4-958f-b19146d42fdf": {
					"simStepIds": [
						"1ebc0436-9f5a-4d2c-8a37-b311ddbbaef7"
					]
				},
				"a529e3fe-f14c-4fa3-8ec8-6a5f040a72da": {
					"simStepIds": [
						"d6f1a3a6-c3d0-4809-9d11-ede1e7da29ba"
					]
				},
				"6f24a616-1edf-4990-a60a-b62a4401ae33": {
					"simStepIds": [
						"933f5032-0470-4711-ab5a-f3776528006f"
					]
				},
				"59896773-97d4-463a-a667-8e89e735a03d": {
					"simStepIds": [
						"98e32875-67ff-4c98-983e-e267d3a0ebd4"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "detectSceneChanges, blackDetect, silenceDetect",
			"generationPrompt": "Automatically create segments based on scene detection",
			"generationKeywords": "detectSceneChanges, blackDetect, silenceDetect"
		},
		"Change media container format without re-encoding (remuxing)": {
			"name": "Change media container format without re-encoding (remuxing)",
			"simSteps": [
				{
					"simStepId": "b1b71a21-474c-4cd9-87f8-8975b1904582",
					"diagramNodeId": "8bd2131c-dc2f-4540-9497-8db940fd4193",
					"simStepLabel": "Remux Flow: Select Output Format",
					"simStepDescription": "The user interacts with the `OutputFormatSelect` component to choose a new container format for the output file, for example, changing from 'mkv' to 'mp4'.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/OutputFormatSelect.tsx",
						"startLine": "18",
						"endLine": "54",
						"relevantVariables": [
							"OutputFormatSelect",
							"onOutputFormatUserChange"
						]
					},
					"inputDataExample": "{\n  \"detectedFileFormat\": \"mkv\",\n  \"currentFileFormat\": \"mkv\"\n}",
					"outputDataExample": "{\n  \"selectedFormat\": \"mp4\"\n}"
				},
				{
					"simStepId": "34b81b45-7745-4121-b4b0-3271f4883aec",
					"diagramNodeId": "2ca97a95-2641-40be-b6aa-f250bfd15a59",
					"simStepLabel": "Remux Flow: Transmit New Format",
					"simStepDescription": "The `onChange` event from the Select dropdown triggers the `onOutputFormatUserChange` callback, passing the newly selected format string ('mp4') to the parent `App` component.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/components/OutputFormatSelect.tsx",
						"startLine": "19",
						"endLine": "19",
						"relevantVariables": [
							"onOutputFormatUserChange"
						]
					},
					"inputDataExample": "{\n  \"selectedFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"selectedFormat\": \"mp4\"\n}"
				},
				{
					"simStepId": "ae533980-ab84-4bcb-92a7-640e50e8cf0a",
					"diagramNodeId": "4bdfa41f-82d8-4e13-a424-ac4f58ea294c",
					"simStepLabel": "Remux Flow: Update Format State",
					"simStepDescription": "In the main `App` component, the `onOutputFormatUserChange` callback receives the new format and updates the application's `fileFormat` state by calling `setFileFormat`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "216",
						"endLine": "220",
						"relevantVariables": [
							"onOutputFormatUserChange",
							"setFileFormat",
							"setOutFormatLocked"
						]
					},
					"inputDataExample": "{\n  \"newFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"state.fileFormat\": \"mp4\"\n}"
				},
				{
					"simStepId": "a5acb054-3a7d-4d1f-83bd-144fab217e7e",
					"diagramNodeId": "2a380a6d-dfb2-4447-87d0-6d6177c4c438",
					"simStepLabel": "Remux Flow: Trigger Export",
					"simStepDescription": "After selecting the format, the user clicks the export button. This action eventually invokes the `cutMultiple` function, passing the current state, including the `fileFormat` which is now 'mp4'.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1106",
						"endLine": "1112",
						"relevantVariables": [
							"cutMultiple",
							"fileFormat"
						]
					},
					"inputDataExample": "{\n  \"outFormat\": \"mp4\",\n  \"customOutDir\": \"/Users/john/Movies/Cuts\",\n  \"segments\": [\n    {\n      \"start\": 10.5,\n      \"end\": 25.2,\n      \"name\": \"clip1\"\n    }\n  ]\n}",
					"outputDataExample": "{\n  \"outFormat\": \"mp4\",\n  \"customOutDir\": \"/Users/john/Movies/Cuts\",\n  \"segments\": [\n    {\n      \"start\": 10.5,\n      \"end\": 25.2,\n      \"name\": \"clip1\"\n    }\n  ]\n}"
				},
				{
					"simStepId": "7c8ef42a-dca6-408c-9029-b503989aeb8c",
					"diagramNodeId": "a42d559e-b7e6-4483-9644-61fd0df198ea",
					"simStepLabel": "Remux Flow: Prepare FFmpeg Arguments",
					"simStepDescription": "The `cutMultiple` function loops through segments and calls `losslessCutSingle`. This function is responsible for assembling the FFmpeg command arguments for the remux operation based on the provided `outFormat`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "236",
						"endLine": "418",
						"relevantVariables": [
							"losslessCutSingle",
							"outFormat"
						]
					},
					"inputDataExample": "{\n  \"outFormat\": \"mp4\",\n  \"cutFrom\": 10.5,\n  \"cutTo\": 25.2,\n  \"outPath\": \"/Users/john/Movies/Cuts/input-file-seg1.mp4\"\n}",
					"outputDataExample": "{\n  \"ffmpegArgs\": [\n    \"-ss\",\n    \"10.5\",\n    \"-i\",\n    \"/Users/john/Movies/input-file.mkv\",\n    \"-t\",\n    \"14.7\",\n    \"-f\",\n    \"mp4\",\n    \"-y\",\n    \"/Users/john/Movies/Cuts/input-file-seg1.mp4\"\n  ]\n}"
				},
				{
					"simStepId": "e43d83e8-5426-4af2-832e-4ac51d13e99b",
					"diagramNodeId": "0c417541-d199-4e70-b614-b8fd9e98a075",
					"simStepLabel": "Remux Flow: Generate Stream Mapping",
					"simStepDescription": "`losslessCutSingle` calls `getMapStreamsArgs` to generate the stream mapping part of the FFmpeg command (e.g., `-map 0:0`, `-map 0:1`). This is crucial for telling FFmpeg which streams to include in the output file. The target `outFormat` is passed to ensure compatibility.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "326",
						"endLine": "326",
						"relevantVariables": [
							"getMapStreamsArgs"
						]
					},
					"inputDataExample": "{\n  \"outFormat\": \"mp4\",\n  \"allFilesMeta\": {\n    \"/path/to/file.mkv\": {\n      \"streams\": [\n        { \"index\": 0, \"codec_type\": \"video\" },\n        { \"index\": 1, \"codec_type\": \"audio\" }\n      ]\n    }\n  },\n  \"copyFileStreams\": [\n    { \"path\": \"/path/to/file.mkv\", \"streamIds\": [0, 1] }\n  ]\n}",
					"outputDataExample": "{\n  \"outFormat\": \"mp4\",\n  \"allFilesMeta\": {\n    \"/path/to/file.mkv\": {\n      \"streams\": [\n        { \"index\": 0, \"codec_type\": \"video\" },\n        { \"index\": 1, \"codec_type\": \"audio\" }\n      ]\n    }\n  },\n  \"copyFileStreams\": [\n    { \"path\": \"/path/to/file.mkv\", \"streamIds\": [0, 1] }\n  ]\n}"
				},
				{
					"simStepId": "5bf2d9d1-75c5-49b2-bdd0-a83c1993d35a",
					"diagramNodeId": "6a0be1fe-ba72-40f5-a057-e7476b0dc871",
					"simStepLabel": "Remux Flow: Determine Per-Stream Codecs",
					"simStepDescription": "For each stream, `getPerStreamFlags` is called to determine the codec operation. For a remux, this will almost always be 'copy'. However, it contains logic to re-encode streams if they are incompatible with the new container, such as converting `mov_text` subtitles to `srt` when outputting to `matroska`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "107",
						"endLine": "200",
						"relevantVariables": [
							"getPerStreamFlags",
							"outFormat",
							"isMov",
							"addCodecArgs"
						]
					},
					"inputDataExample": "{\n  \"stream\": {\n    \"codec_type\": \"video\",\n    \"codec_name\": \"h264\"\n  },\n  \"outFormat\": \"mp4\"\n}",
					"outputDataExample": "{\n  \"streamArgs\": [\n    \"-c:0\",\n    \"copy\"\n  ]\n}"
				},
				{
					"simStepId": "1996fb66-7cfa-4d9a-bc79-f2d8c1c02928",
					"diagramNodeId": "286251c5-a82f-49ab-9659-b4eb31df25d8",
					"simStepLabel": "Remux Flow: Return Stream Arguments",
					"simStepDescription": "The generated stream mapping and codec arguments (e.g., `-map 0:0 -c:0 copy`) are returned to `losslessCutSingle` to be included in the final FFmpeg command.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/util/streams.ts",
						"startLine": "202",
						"endLine": "228",
						"relevantVariables": [
							"getMapStreamsArgs"
						]
					},
					"inputDataExample": "{\n  \"args\": [\n    \"-map\", \"0:0\", \"-c:0\", \"copy\",\n    \"-map\", \"0:1\", \"-c:1\", \"copy\"\n  ]\n}",
					"outputDataExample": "{\n  \"args\": [\n    \"-map\", \"0:0\", \"-c:0\", \"copy\",\n    \"-map\", \"0:1\", \"-c:1\", \"copy\"\n  ]\n}"
				},
				{
					"simStepId": "4ba960e3-552e-40d2-b642-8635c2627854",
					"diagramNodeId": "5a4117be-ae19-44ab-b7db-fc57318f70d4",
					"simStepLabel": "Remux Flow: Execute FFmpeg Command",
					"simStepDescription": "Back in `losslessCutSingle`, the final command is assembled, including all stream mappings and the critical `-f outFormat` flag that specifies the output container format. The command is then executed via `runFfmpegWithProgress`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "406",
						"endLine": "414",
						"relevantVariables": [
							"ffmpegArgs",
							"outFormat",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\n  \"streamArgs\": [\"-map\", \"0:0\", \"-c:0\", \"copy\"],\n  \"outFormat\": \"mp4\",\n  \"outPath\": \"/Users/john/Movies/Cuts/video-seg1.mp4\"\n}",
					"outputDataExample": "{\n  \"status\": \"process_started\",\n  \"command\": \"ffmpeg -i input.mkv -map 0:0 -c:0 copy -f mp4 /Users/john/Movies/Cuts/video-seg1.mp4\"\n}"
				},
				{
					"simStepId": "3a9a7494-d01b-42bc-9552-e8bb2072f113",
					"diagramNodeId": "37540ce5-c11b-43d1-9741-d49ba9a2d991",
					"simStepLabel": "Fix Duration Flow: Menu Selection",
					"simStepDescription": "The user initiates the process by selecting 'Fix incorrect duration' from the 'Tools' menu.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "198",
						"endLine": "202",
						"relevantVariables": [
							"mainWindow.webContents.send"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\n  \"ipcEvent\": \"fixInvalidDuration\"\n}"
				},
				{
					"simStepId": "76adab98-097e-42b0-9d00-1c8f874826e0",
					"diagramNodeId": "308d5dcf-696b-4627-8b3f-90a9385c1e6a",
					"simStepLabel": "Fix Duration Flow: IPC Communication",
					"simStepDescription": "An IPC event named 'fixInvalidDuration' is sent from the main process (handling the menu) to the renderer process (the UI).",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/main/menu.ts",
						"startLine": "201",
						"endLine": "201",
						"relevantVariables": [
							"fixInvalidDuration"
						]
					},
					"inputDataExample": "{\n  \"ipcEvent\": \"fixInvalidDuration\"\n}",
					"outputDataExample": "{\n  \"ipcEvent\": \"fixInvalidDuration\"\n}"
				},
				{
					"simStepId": "7302041e-2d68-4e62-94fc-1f7c30c44473",
					"diagramNodeId": "0c1ba555-bd9a-4b7b-97b1-08ad263f9661",
					"simStepLabel": "Fix Duration Flow: Event Handling in UI",
					"simStepDescription": "The main `App` component listens for the 'fixInvalidDuration' IPC event and calls the `tryFixInvalidDuration` function in response.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1721",
						"endLine": "1738",
						"relevantVariables": [
							"tryFixInvalidDuration",
							"fixInvalidDuration"
						]
					},
					"inputDataExample": "{\n  \"ipcEvent\": \"fixInvalidDuration\"\n}",
					"outputDataExample": "{\n  \"status\": \"Calling fixInvalidDuration operation\"\n}"
				},
				{
					"simStepId": "4161e295-816c-4a60-a519-337be05e8e37",
					"diagramNodeId": "391a6321-49c1-4c55-a6aa-023c63aa6b20",
					"simStepLabel": "Fix Duration Flow: Invoke FFmpeg Operation",
					"simStepDescription": "The UI event handler calls the `fixInvalidDuration` function provided by the `useFfmpegOperations` custom hook, passing the current file format.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1725",
						"endLine": "1725",
						"relevantVariables": [
							"fixInvalidDuration"
						]
					},
					"inputDataExample": "{\n  \"fileFormat\": \"webm\",\n  \"customOutDir\": \"/Users/john/Movies/Fixed\"\n}",
					"outputDataExample": "{\n  \"fileFormat\": \"webm\",\n  \"customOutDir\": \"/Users/john/Movies/Fixed\"\n}"
				},
				{
					"simStepId": "969b5adc-831c-4636-89d1-588306adbd7c",
					"diagramNodeId": "9a1fc89a-6a17-47bb-9e5e-938be69c5abf",
					"simStepLabel": "Fix Duration Flow: Construct and Run Remux Command",
					"simStepDescription": "The `fixInvalidDuration` function assembles a simple FFmpeg command to remux the entire file by copying all streams into a new container of the same format. This process rewrites file headers and metadata, often correcting invalid duration values without re-encoding.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "822",
						"endLine": "830",
						"relevantVariables": [
							"fixInvalidDuration",
							"ffmpegArgs",
							"runFfmpegWithProgress"
						]
					},
					"inputDataExample": "{\n  \"fileFormat\": \"webm\",\n  \"filePath\": \"/Users/john/Videos/recording.webm\"\n}",
					"outputDataExample": "{\n  \"status\": \"process_started\",\n  \"command\": \"ffmpeg -i recording.webm -c copy -f webm recording.reformatted.webm\"\n}"
				}
			],
			"description": "<ul><li>A core capability is changing the file's container format quickly and without quality loss</li><li>- A user can load a file in one format (e</li><li>g</li><li>, MKV) and choose a different output format during export (e</li><li>g</li><li>, MP4 or MOV)</li><li>- The application performs a remux operation, which simply copies the existing encoded video and audio streams into the new container</li><li>- This is often used to make files compatible with specific devices or software (like Apple products) that have limited container support</li></ul>",
			"simulationNodesAndEdges": {
				"8bd2131c-dc2f-4540-9497-8db940fd4193": {
					"simStepIds": [
						"b1b71a21-474c-4cd9-87f8-8975b1904582"
					]
				},
				"4bdfa41f-82d8-4e13-a424-ac4f58ea294c": {
					"simStepIds": [
						"ae533980-ab84-4bcb-92a7-640e50e8cf0a"
					]
				},
				"a42d559e-b7e6-4483-9644-61fd0df198ea": {
					"simStepIds": [
						"7c8ef42a-dca6-408c-9029-b503989aeb8c"
					]
				},
				"6a0be1fe-ba72-40f5-a057-e7476b0dc871": {
					"simStepIds": [
						"5bf2d9d1-75c5-49b2-bdd0-a83c1993d35a"
					]
				},
				"5a4117be-ae19-44ab-b7db-fc57318f70d4": {
					"simStepIds": [
						"4ba960e3-552e-40d2-b642-8635c2627854"
					]
				},
				"37540ce5-c11b-43d1-9741-d49ba9a2d991": {
					"simStepIds": [
						"3a9a7494-d01b-42bc-9552-e8bb2072f113"
					]
				},
				"0c1ba555-bd9a-4b7b-97b1-08ad263f9661": {
					"simStepIds": [
						"7302041e-2d68-4e62-94fc-1f7c30c44473"
					]
				},
				"9a1fc89a-6a17-47bb-9e5e-938be69c5abf": {
					"simStepIds": [
						"969b5adc-831c-4636-89d1-588306adbd7c"
					]
				},
				"2ca97a95-2641-40be-b6aa-f250bfd15a59": {
					"simStepIds": [
						"34b81b45-7745-4121-b4b0-3271f4883aec"
					]
				},
				"2a380a6d-dfb2-4447-87d0-6d6177c4c438": {
					"simStepIds": [
						"a5acb054-3a7d-4d1f-83bd-144fab217e7e"
					]
				},
				"0c417541-d199-4e70-b614-b8fd9e98a075": {
					"simStepIds": [
						"e43d83e8-5426-4af2-832e-4ac51d13e99b"
					]
				},
				"286251c5-a82f-49ab-9659-b4eb31df25d8": {
					"simStepIds": [
						"1996fb66-7cfa-4d9a-bc79-f2d8c1c02928"
					]
				},
				"308d5dcf-696b-4627-8b3f-90a9385c1e6a": {
					"simStepIds": [
						"76adab98-097e-42b0-9d00-1c8f874826e0"
					]
				},
				"391a6321-49c1-4c55-a6aa-023c63aa6b20": {
					"simStepIds": [
						"4161e295-816c-4a60-a519-337be05e8e37"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "outFormat, OutputFormatSelect, fixInvalidDuration",
			"generationPrompt": "Change media container format without re-encoding (remuxing)",
			"generationKeywords": "outFormat, OutputFormatSelect, fixInvalidDuration"
		},
		"Edit file metadata and chapter markers": {
			"name": "Edit file metadata and chapter markers",
			"simSteps": [
				{
					"simStepId": "345f35f1-0bd9-4516-a0b1-87fa6e143c75",
					"diagramNodeId": "8be6472e-f3d0-4fc1-b532-e75bd1740e34",
					"simStepLabel": "User Modifies Track Disposition",
					"simStepDescription": "The user interacts with the 'Tracks' panel to modify the properties of a specific stream. In this case, they select a new disposition for an audio track from a dropdown menu, changing it to 'default'. This action triggers the `onDispositionChange` event handler.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "215",
						"endLine": "227",
						"relevantVariables": [
							"onDispositionChange",
							"updateStreamParams",
							"dispositionOptions",
							"stream.index"
						]
					},
					"inputDataExample": "{\"event\": \"onChange\", \"target\": {\"value\": \"default\"}}",
					"outputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"streamIndex\": 1, \"newDisposition\": \"default\"}"
				},
				{
					"simStepId": "c58ee6c6-80ee-4e15-8c3e-43485fc9b9d6",
					"diagramNodeId": "db4529c7-ae29-4f72-b2c8-2c1d05ee729e",
					"simStepLabel": "Propagate Disposition Change to State Manager",
					"simStepDescription": "The new disposition value is passed from the UI component to the central state management logic. The `updateStreamParams` function is called with the file path, the specific stream index, and a setter function to update the stream's disposition property.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/StreamsSelector.tsx",
						"startLine": "223",
						"endLine": "226",
						"relevantVariables": [
							"updateStreamParams"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"streamIndex\": 1, \"params_setter\": \"(params) => { params.disposition = 'default'; }\"}",
					"outputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"streamIndex\": 1, \"params_setter\": \"(params) => { params.disposition = 'default'; }\"}"
				},
				{
					"simStepId": "a44aee87-4ac5-42e0-884b-9b0b9b3dca1d",
					"diagramNodeId": "f033d11b-f8d1-4a73-9a62-38bb560bd2c4",
					"simStepLabel": "Update Stream Parameters in State",
					"simStepDescription": "The application's state is updated to reflect the user's change. The `updateStreamParams` function modifies the `paramsByStreamId` map, storing the new disposition ('default') for the specified stream (index 1) of the given file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "1761",
						"endLine": "1763",
						"relevantVariables": [
							"updateStreamParams",
							"params.disposition"
						]
					},
					"inputDataExample": "{\"filePath\": \"/Users/john/Movies/drone_footage.mp4\", \"streamIndex\": 1, \"newDisposition\": \"default\"}",
					"outputDataExample": "{\"paramsByStreamId\": {\"/Users/john/Movies/drone_footage.mp4\": {\"1\": {\"disposition\": \"default\"}}}}"
				},
				{
					"simStepId": "5425ca5d-9dc3-4162-8b2a-8ee26d07c20d",
					"diagramNodeId": "2d3c94fa-6585-42c9-8952-7486fb0fd304",
					"simStepLabel": "User Initiates Export with Chapter Creation",
					"simStepDescription": "The user initiates an export or merge operation and enables the 'Create chapters from merged segments' option. This action passes the application's current state, including the modified stream parameters and segment data, to the export processing logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/App.tsx",
						"startLine": "933",
						"endLine": "936",
						"relevantVariables": [
							"segmentsToChapters",
							"createChaptersFromSegments"
						]
					},
					"inputDataExample": "{\"segments\": [{\"start\": 0, \"end\": 60, \"name\": \"Opening Scene\"}, {\"start\": 60, \"end\": 120, \"name\": \"Main Event\"}], \"paramsByStreamId\": {\"/Users/john/Movies/drone_footage.mp4\": {\"1\": {\"disposition\": \"default\"}}}, \"segmentsToChapters\": true}",
					"outputDataExample": "{\"segments\": [{\"start\": 0, \"end\": 60, \"name\": \"Opening Scene\"}, {\"start\": 60, \"end\": 120, \"name\": \"Main Event\"}], \"paramsByStreamId\": {\"/Users/john/Movies/drone_footage.mp4\": {\"1\": {\"disposition\": \"default\"}}}, \"segmentsToChapters\": true}"
				},
				{
					"simStepId": "95259c41-72c8-4d14-8495-0a4d68e5fe95",
					"diagramNodeId": "37919780-8f89-4fac-9ec4-11521e814a24",
					"simStepLabel": "Calculate Chapter Timestamps from Segments",
					"simStepDescription": "The `createChaptersFromSegments` function is called to generate chapter data. It asynchronously reads the duration of each output segment file and calculates the cumulative start and end times for each chapter in the final merged file.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/ffmpeg.ts",
						"startLine": "217",
						"endLine": "226",
						"relevantVariables": [
							"createChaptersFromSegments",
							"getDuration",
							"durations",
							"timeAt"
						]
					},
					"inputDataExample": "{\"segmentPaths\": [\"/tmp/lossless-cut/seg-1.mp4\", \"/tmp/lossless-cut/seg-2.mp4\"], \"chapterNames\": [\"Opening Scene\", \"Main Event\"]}",
					"outputDataExample": "[{\"start\": 0, \"end\": 59.8, \"name\": \"Opening Scene\"}, {\"start\": 59.8, \"end\": 119.5, \"name\": \"Main Event\"}]"
				},
				{
					"simStepId": "dc22be76-e9c4-4052-801e-36890f1c26fe",
					"diagramNodeId": "5436674d-415f-44d9-a7f2-2f802908824b",
					"simStepLabel": "Pass Parameters to FFmpeg Command Builder",
					"simStepDescription": "The newly calculated chapter data and the modified stream parameters (including disposition) from the application state are passed to the FFmpeg command generation logic to be assembled into the final command.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "329",
						"endLine": "329",
						"relevantVariables": [
							"paramsByStreamId"
						]
					},
					"inputDataExample": "{\"chapters\": [{\"start\": 0, \"end\": 59.8, \"name\": \"Opening Scene\"}, {\"start\": 59.8, \"end\": 119.5, \"name\": \"Main Event\"}], \"paramsByStreamId\": {\"/Users/john/Movies/drone_footage.mp4\": {\"1\": {\"disposition\": \"default\"}}}}",
					"outputDataExample": "{\"chapters\": [{\"start\": 0, \"end\": 59.8, \"name\": \"Opening Scene\"}, {\"start\": 59.8, \"end\": 119.5, \"name\": \"Main Event\"}], \"paramsByStreamId\": {\"/Users/john/Movies/drone_footage.mp4\": {\"1\": {\"disposition\": \"default\"}}}}"
				},
				{
					"simStepId": "a5ae538c-f867-4f30-ada2-395c21e25f38",
					"diagramNodeId": "b75eadd2-4f82-4793-b2b1-0e59b7e9e51b",
					"simStepLabel": "Construct and Execute Final FFmpeg Command",
					"simStepDescription": "The application constructs the final FFmpeg command. It iterates through the custom stream parameters to add arguments like `-disposition:1 default`. It also writes the chapter metadata to a temporary file and instructs FFmpeg to include it. The fully formed command is then executed to produce the final output file with the new metadata, disposition, and chapter markers.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "src/renderer/src/hooks/useFfmpegOperations.ts",
						"startLine": "329",
						"endLine": "338",
						"relevantVariables": [
							"paramsByStreamId",
							"mapInputStreamIndexToOutputIndex",
							"disposition",
							"dispositionArg",
							"ret.push"
						]
					},
					"inputDataExample": "{\"chapters\": [{\"start\": 0, \"end\": 59.8, \"name\": \"Opening Scene\"}, {\"start\": 59.8, \"end\": 119.5, \"name\": \"Main Event\"}], \"paramsByStreamId\": {\"/Users/john/Movies/drone_footage.mp4\": {\"1\": {\"disposition\": \"default\"}}}}",
					"outputDataExample": "{\"command\": \"ffmpeg -f concat -i filelist.txt -i chapters.meta -map_metadata 1 -c copy -disposition:1 default /Users/john/Movies/drone_footage-edited.mp4\"}"
				}
			],
			"description": "<ul><li>Allows for the modification of metadata embedded within the media file for better organization and playback experience</li><li>- Users can edit file-level metadata tags such as title, author, and comments</li><li>- It's possible to change the disposition of individual tracks, for example, setting a specific audio or subtitle track as the default</li><li>- The application can generate and embed chapter markers into the output file based on the defined segments, allowing for easy navigation in compatible media players</li></ul>",
			"simulationNodesAndEdges": {
				"8be6472e-f3d0-4fc1-b532-e75bd1740e34": {
					"simStepIds": [
						"345f35f1-0bd9-4516-a0b1-87fa6e143c75"
					]
				},
				"f033d11b-f8d1-4a73-9a62-38bb560bd2c4": {
					"simStepIds": [
						"a44aee87-4ac5-42e0-884b-9b0b9b3dca1d"
					]
				},
				"37919780-8f89-4fac-9ec4-11521e814a24": {
					"simStepIds": [
						"95259c41-72c8-4d14-8495-0a4d68e5fe95"
					]
				},
				"b75eadd2-4f82-4793-b2b1-0e59b7e9e51b": {
					"simStepIds": [
						"a5ae538c-f867-4f30-ada2-395c21e25f38"
					]
				},
				"db4529c7-ae29-4f72-b2c8-2c1d05ee729e": {
					"simStepIds": [
						"c58ee6c6-80ee-4e15-8c3e-43485fc9b9d6"
					]
				},
				"2d3c94fa-6585-42c9-8952-7486fb0fd304": {
					"simStepIds": [
						"5425ca5d-9dc3-4162-8b2a-8ee26d07c20d"
					]
				},
				"5436674d-415f-44d9-a7f2-2f802908824b": {
					"simStepIds": [
						"dc22be76-e9c4-4052-801e-36890f1c26fe"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "TagEditor, disposition, createChaptersFromSegments",
			"generationPrompt": "Edit file metadata and chapter markers",
			"generationKeywords": "TagEditor, disposition, createChaptersFromSegments"
		}
	},
	"cellToPath": {
		"9e47606a-7a0a-45fa-b864-958d5c4456de": "src",
		"75bf21f9-b842-493a-ba3d-d99e4b2dd8dc": "src/renderer",
		"15585db2-26e7-426c-a156-3e7b1d7457b7": "src/renderer/src",
		"02766735-5216-43f1-b63a-bd5d78863b62": "src/renderer/src/hooks",
		"b022c6a8-4d58-41af-9a3c-6c157b2e89ac": "src/renderer/src/App.tsx",
		"f0a31c3e-73fe-43c5-b4f5-f4f6573c383b": "src/renderer/src/hooks/useSegments.ts",
		"1926aeb9-327f-472c-829a-dfb694cb2e23": "src/renderer/src/hooks/useFfmpegOperations.ts",
		"ffa60c76-4ac7-4f46-aeca-397cbd3c006c": "src/renderer/src/hooks/useSegments.ts-simstep-0a1231d7-19a2-428c-a372-1d05b15e6d85",
		"d54a7429-9bd1-47a2-8272-3e258dc968b1": "src/renderer/src/hooks/useSegments.ts-simstep-c2cffb0f-4b1c-4a6d-b863-2fcd583517b9",
		"2fd22fef-0cc1-4dfe-9dd6-49b4c10026d0": "src/renderer/src/hooks/useSegments.ts-simstep-2760d630-6ee4-4414-ac35-581d5a948c7d",
		"e2d74ef1-a0ee-4f4c-8081-0d155bfda2b1": "src/renderer/src/hooks/useSegments.ts-simstep-dd3c39f7-e321-4b71-96b9-a28e28733aa2",
		"d243139b-b6fc-4e67-baf4-ba72dae06281": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-ccd507b4-f01d-47f6-b292-7232995f9ffa",
		"8ce5bac9-a6ab-4c20-89ea-03af1e329cca": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-3f520a7e-d598-4e4f-995e-7df8140b043c",
		"53558a9c-7b7a-4a98-94d8-c0522fdca137": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-e3820262-64db-48d3-8db1-fb47a2af6882",
		"496cc2c6-cdc9-4a27-8f82-338de5e88503": "generated-edge-simstep-126c0372-7315-4305-891e-4e72b3b324b7-496cc2c6-cdc9-4a27-8f82-338de5e88503",
		"dbe72f4c-c701-4e7d-9dd9-5bcdb311443d": "generated-edge-simstep-0075e42a-97ed-4b00-b7a4-f034b1000ea4-dbe72f4c-c701-4e7d-9dd9-5bcdb311443d",
		"362f7281-ddeb-4542-aef8-bae73c5c9de4": "generated-edge-simstep-8c1ce23d-d466-431a-81d2-41457b13d40b-362f7281-ddeb-4542-aef8-bae73c5c9de4",
		"27c1c337-9a12-4c79-b2d9-46c6f9a70b51": "generated-edge-simstep-6998d016-3a33-4c73-8d2c-3cc827700acc-27c1c337-9a12-4c79-b2d9-46c6f9a70b51",
		"782aef27-9591-420e-b31d-6178c46a6d53": "generated-edge-simstep-3fa4964f-52db-455d-9bf2-0e2222e54cce-782aef27-9591-420e-b31d-6178c46a6d53",
		"1296f4b7-cc7c-4364-8a05-c668d32df1e2": "generated-edge-simstep-c3f3550a-edae-4059-bf4b-0f2c15a036b1-1296f4b7-cc7c-4364-8a05-c668d32df1e2",
		"43240bc9-1e54-4eff-bb78-cb05ea072c7f": "src/main",
		"a6ad9034-13b9-4b6c-9263-6ade6324aa5d": "src/main/ffmpeg.ts",
		"84a6d915-e60b-4cd3-89ef-defe9dc05ec6": "src/renderer/src/ffmpeg.ts",
		"f8ad4292-b8cc-4c7f-b6af-2c0fb9c38b54": "src/renderer/src/hooks/useUserSettingsRoot.ts",
		"9e11e7e5-48bd-40b4-8d6c-5f1d7c8e5384": "src/renderer/src/hooks/useUserSettingsRoot.ts-simstep-feb65bd4-132f-4672-b96c-e0ac16345b4b",
		"16fe3137-4ac0-4a86-abdb-adb46acd4600": "src/renderer/src/App.tsx-simstep-bca0c8ab-c2ac-4cd3-a0ad-c8e55727258e",
		"f6d44dd5-8317-44d0-9a2a-5161a05e2146": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-8d81c5d3-dcf8-47bd-95bf-072d86d6b9b9",
		"2aef852e-62c7-4e79-956c-ec77bbca82a5": "src/main/ffmpeg.ts-simstep-a9095163-9dec-4c57-8605-e71d2c08043b",
		"9da616a0-72d7-450a-9b46-806c1639f78b": "src/renderer/src/App.tsx-simstep-deb3c08a-c37d-41bc-92ed-d97f83603e78",
		"126f92df-39e0-4797-92e5-48708272feab": "generated-edge-simstep-760c7a3f-a480-412f-82ee-1f7578fcbf46-126f92df-39e0-4797-92e5-48708272feab",
		"5b9a2f0f-9268-4679-b404-f49c34a13fb3": "generated-edge-simstep-185d8535-c5e2-45b1-9eaa-504862599f0f-5b9a2f0f-9268-4679-b404-f49c34a13fb3",
		"d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb": "generated-edge-simstep-6a3c74df-cb51-4ef9-bd4c-fac82e008a13-d4a1cb0a-18fe-4286-8ad2-c1ade7c93ddb",
		"f901ad9d-a81a-408b-b7f0-41086cc2944c": "generated-edge-simstep-dde12cfe-67a8-40b0-9ab3-9f08a5de5836-f901ad9d-a81a-408b-b7f0-41086cc2944c",
		"dd0042e3-3ceb-4717-bd51-c40f9e77a28f": "src/renderer/src/StreamsSelector.tsx",
		"ef95feaa-c278-4a4d-8e03-80991d876ad5": "src/renderer/src/util",
		"655e4239-eccc-40bc-8123-771c0a728dec": "src/renderer/src/hooks/useStreamsMeta.ts",
		"9193cfa0-a23a-4d43-8080-94cd59847966": "src/renderer/src/util/streams.ts",
		"9969c0c5-4054-4f12-a222-e8350df1ad6e": "src/renderer/src/App.tsx-simstep-5b7e48ec-d0fb-4305-b15b-526f0eaeebc7",
		"0ba6ed80-a4fd-42df-90c3-cc8176642eb8": "src/renderer/src/StreamsSelector.tsx-simstep-c64bdeee-7fa8-4792-8f43-8799ed38001f",
		"2eab7be7-53cc-4437-9b96-94da3abd705b": "src/renderer/src/hooks/useStreamsMeta.ts-simstep-c12318bb-1a99-4298-bae1-649968b05634",
		"85b7829a-7f4e-431e-8a94-62a41a531379": "src/renderer/src/App.tsx-simstep-11ef14e0-36d1-4dfa-8d65-a246038bd1bf",
		"1c063f91-eee2-43a0-845e-a121166254fd": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-1136c0a4-df1d-4983-90b4-4908537f7306",
		"a38cf32d-0682-4e44-b6ad-bb3856c0d159": "src/renderer/src/util/streams.ts-simstep-77c79d7f-d105-40b0-8b7b-09c4638e7b09",
		"64b60f3a-bf68-47b2-8c1f-f9ece79bbaf2": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-0a3ff59b-e764-4e02-be90-fd3177beb027",
		"1e3dc50f-fa13-4c65-a29b-db356e608536": "generated-edge-simstep-4693fc19-47d4-48a2-b2ce-efeb14a09aeb-1e3dc50f-fa13-4c65-a29b-db356e608536",
		"218f88f3-a471-405b-b29e-87febe304fcc": "generated-edge-simstep-fb5a5eac-fad3-42b1-ae97-2372a1d4e1a0-218f88f3-a471-405b-b29e-87febe304fcc",
		"d28dad56-3d3a-4a1e-aab1-fd15e47248bd": "generated-edge-simstep-8c95b28b-64eb-4813-b540-b60bee8ea243-d28dad56-3d3a-4a1e-aab1-fd15e47248bd",
		"5ae6f524-62bb-434a-81e4-51f018ed9e84": "generated-edge-simstep-95bb9604-c96c-4261-a259-433fe7244934-5ae6f524-62bb-434a-81e4-51f018ed9e84",
		"14f9b3cc-417d-4817-9d81-0032c21102fa": "generated-edge-simstep-ebb588f9-fb03-4d71-a451-9d57e6241594-14f9b3cc-417d-4817-9d81-0032c21102fa",
		"66c59e74-7883-4bb6-9820-7fa09cec1be7": "generated-edge-simstep-96e1837e-8670-4ff3-b29a-6226378363ca-66c59e74-7883-4bb6-9820-7fa09cec1be7",
		"303e5960-78cc-4b4b-b8cd-8620d732bbe4": "src/renderer/src/BottomBar.tsx",
		"db2f0701-b8c1-4448-96bd-4e1f0ad45724": "src/renderer/src/components",
		"622ee659-0f7a-47e2-a1e3-b886f6c699ef": "src/renderer/src/components/ExportConfirm.tsx",
		"02cb33e0-5395-4b9f-83ff-3d30ddb9ca65": "src/renderer/src/BottomBar.tsx-simstep-4386839b-4f53-4009-82f0-4914a3e89685",
		"162b9d32-f242-4185-ab49-a37d64df16bd": "src/renderer/src/App.tsx-simstep-39625942-cb71-4c63-948e-0c9a68e56fa1",
		"62fd54ed-f584-4134-97d0-9c39cd01339b": "src/renderer/src/components/ExportConfirm.tsx-simstep-019434c8-55dc-4693-9300-a6c379d2e4eb",
		"4c39bc2f-564e-4be3-8cdc-f3ba0fb39a2c": "src/renderer/src/App.tsx-simstep-9379f763-53c4-4b9e-ba0c-8e5f5db89366",
		"e708b1f8-a8de-4dda-9458-4d7d6dae6568": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-d9b3a16a-3afd-4899-8092-4c717c3032b5",
		"b496201c-09db-422a-a004-b6a0010da939": "src/renderer/src/App.tsx-simstep-fc061249-6b6f-4196-a9d4-595f577cd82e",
		"c717e521-eada-4f6f-a8c7-d73249a5541a": "generated-edge-simstep-c1b08297-d0d7-442f-9a0c-053225abca3c-c717e521-eada-4f6f-a8c7-d73249a5541a",
		"510d16c1-4cdc-4ce3-861f-cf87c3fab7fc": "generated-edge-simstep-2f07947f-5b33-4fc3-a8df-abce6652bba0-510d16c1-4cdc-4ce3-861f-cf87c3fab7fc",
		"de8a39cf-4120-439b-9edd-fcbe5ab35dbb": "generated-edge-simstep-80ceb16f-ed63-468e-b9bf-675733354dd7-de8a39cf-4120-439b-9edd-fcbe5ab35dbb",
		"63a14dce-3cc7-4191-a884-7c3984a3a6d9": "generated-edge-simstep-2de7281e-7360-4ab6-ae27-224dfdded9ae-63a14dce-3cc7-4191-a884-7c3984a3a6d9",
		"01dc9a34-4f4d-465e-b95b-cac83782e069": "generated-edge-simstep-69f3360a-f54e-4f51-b5cb-1d678ee6e49e-01dc9a34-4f4d-465e-b95b-cac83782e069",
		"0f69c561-a769-41ba-a3a2-1e567d30eaa1": "src/main/menu.ts",
		"401d252b-6861-45cd-add9-b3a56ebaaea7": "src/renderer/src/SegmentList.tsx",
		"40503c88-1408-4643-86ad-939bd7b97b8b": "src/renderer/src/segments.ts",
		"7e0f4483-913e-477a-a6a6-b20b71fc3364": "src/renderer/src/SegmentList.tsx-simstep-51045728-84e1-4a42-bb63-5d923c75bc35",
		"5a6e715e-3cb5-4dad-befd-b7520b17e704": "src/renderer/src/hooks/useSegments.ts-simstep-a9055e36-9d28-4a37-8712-612f76bc04bf",
		"d51935b1-0ab0-4956-a48b-21a411df7ed0": "src/renderer/src/App.tsx-simstep-1cc20ae2-5be8-4f91-9481-fdb868005a1d",
		"babd6979-3aad-4f97-8adc-8a83885e54ad": "src/main/menu.ts-simstep-26c53604-1eca-405f-b344-7247b1c3a178",
		"4da07742-850a-4345-9cba-3d6a66f001e7": "src/renderer/src/hooks/useSegments.ts-simstep-60ab9f29-e8cf-411e-a4e5-323d9c17b727",
		"56fcb786-a03c-40d8-a688-f75aa6aeccd6": "src/renderer/src/segments.ts-simstep-a2899f56-7bdf-457e-9290-8e751da70518",
		"1163a9b1-0a88-4d3c-aaa5-a43c8eb46212": "src/renderer/src/App.tsx-simstep-bcff4228-214e-422e-9be0-201c7d339f01",
		"8611c163-9006-46f9-a74c-59c45b6bf655": "generated-edge-simstep-a5479198-fdb3-4754-a5c9-d56fcb40725b-8611c163-9006-46f9-a74c-59c45b6bf655",
		"368a4b87-0ff7-4a31-a05a-65f34ffc3999": "generated-edge-simstep-ea25bfa4-27a6-45a6-8ec2-aacecfd3ecc5-368a4b87-0ff7-4a31-a05a-65f34ffc3999",
		"025411c7-ad78-47fa-8d76-211d2eb7aa8b": "generated-edge-simstep-0a13ba74-c0b1-40fa-826b-4c898e52ac09-025411c7-ad78-47fa-8d76-211d2eb7aa8b",
		"7860d504-5516-45a0-aee8-b5112d1d9cc6": "generated-edge-simstep-793f8706-aac2-47eb-8037-170e53610078-7860d504-5516-45a0-aee8-b5112d1d9cc6",
		"29c8eccb-247a-44c8-a297-560131352318": "generated-edge-simstep-ac388cfa-f898-4f92-877a-fa055e1d9f7a-29c8eccb-247a-44c8-a297-560131352318",
		"1a76ef04-7af8-4cb2-9337-178712a323f2": "src/renderer/src/hooks/useFrameCapture.ts",
		"a7d8cba3-3053-4048-bdc6-d89856979550": "src/renderer/src/BottomBar.tsx-simstep-e58c04f1-c16f-4de0-adfd-157073daad81",
		"2befd469-c197-4ae6-8853-7052040c4a43": "src/renderer/src/App.tsx-simstep-76bf2bfe-811d-435e-b652-effbf655e284",
		"7785f7f8-9482-43ee-9d5c-af07771c2155": "src/renderer/src/ffmpeg.ts-simstep-38f172e4-ced8-481b-813a-c76509477df6",
		"0ae1a8e5-80d9-4a05-84c9-27048a0bdc7b": "src/main/ffmpeg.ts-simstep-388c02fa-079a-475b-8ac4-c4723da308f2",
		"92b37389-6687-472b-bec1-1ce9a99ed84e": "src/renderer/src/App.tsx-simstep-065941a3-b019-496a-975b-7beb4523ad52",
		"760a64e3-a949-4d5b-880f-407e53cb1dbe": "src/renderer/src/App.tsx-simstep-5dd7b86f-1c8c-45cf-b370-a3b8428b44a2",
		"081c262a-afae-44e9-a329-66e2bfdda284": "src/renderer/src/App.tsx-simstep-23944648-dcd8-4b6e-80cc-1d61b4f4a4c9",
		"693f4612-01f3-43e9-bd8a-d7b484ceeab2": "src/renderer/src/App.tsx-simstep-e92d2625-3d6b-45ca-8adc-016d9e421fdd",
		"c3c030a9-5d90-4f24-afb0-73ebbbc1559a": "src/renderer/src/hooks/useFrameCapture.ts-simstep-3a983b21-6f92-4c33-80ff-19343105cef5",
		"12a7b2c7-46ed-4e6b-b334-3c4d89aab0b3": "src/main/ffmpeg.ts-simstep-d9c31e85-47d1-4d7e-a4bd-4bc51417cc8d",
		"5ce8acd4-af7f-457c-bdd9-f092ecd28c20": "src/renderer/src/App.tsx-simstep-5386d1a0-fb0d-422a-b1bc-f1509fbe85cd",
		"e7da2a0c-737c-4efe-b9de-698639d372c3": "generated-edge-simstep-4431a346-47c5-4a7c-a2cf-813c0a70ecc5-e7da2a0c-737c-4efe-b9de-698639d372c3",
		"052bff40-6a65-4a91-b3ff-83f64d0283eb": "generated-edge-simstep-d19ef73b-b807-4a08-9bbc-8d403928f5f3-052bff40-6a65-4a91-b3ff-83f64d0283eb",
		"00ab2a94-6eb3-4da3-9516-dddcc779b941": "generated-edge-simstep-10ce9600-eae9-42aa-bbf3-c681da4c99b3-00ab2a94-6eb3-4da3-9516-dddcc779b941",
		"9946b3b6-132e-4e1a-8ba3-8995b4888e7a": "generated-edge-simstep-e416973d-c7f0-40ce-9a3a-e6949682c78e-9946b3b6-132e-4e1a-8ba3-8995b4888e7a",
		"68cd15c4-b10c-482f-81f9-629d4a826a75": "generated-edge-simstep-19dbdaae-ab36-47c6-b391-849aaac61082-68cd15c4-b10c-482f-81f9-629d4a826a75",
		"f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589": "generated-edge-simstep-8b6dabe7-adc5-44a1-96c6-a8e195d98a88-f6de2cf7-cd7d-4a7e-b5ff-8d9d5ffa7589",
		"90ae7a85-3d59-4561-84c8-6e18f93d91dd": "generated-edge-simstep-fcade72e-6a7c-45c7-8576-2a421b8c7b97-90ae7a85-3d59-4561-84c8-6e18f93d91dd",
		"1ab145d8-8007-411f-bae3-cc909e50c718": "generated-edge-simstep-4642e408-7799-452c-b4c2-533e71621d59-1ab145d8-8007-411f-bae3-cc909e50c718",
		"0aa79848-d158-447d-981a-4927a4869085": "generated-edge-simstep-da3aaf54-e0aa-473a-ba63-6c836bdf3b90-0aa79848-d158-447d-981a-4927a4869085",
		"51a0685c-765d-4aa4-968c-c08d907d9cbf": "src/renderer/src/edlStore.ts",
		"d3533b42-22f1-4b67-864b-bdb281e642c1": "src/main/menu.ts-simstep-680e5937-fe58-4e7e-a8fc-9dc5f587d868",
		"7524fecc-23cb-4c08-b29e-655b444add3a": "src/renderer/src/App.tsx-simstep-ecc368c7-1378-4eab-a98b-f42a0cfef1d9",
		"bfd0fc48-026c-4de3-8c82-909ff7d606fc": "src/renderer/src/edlStore.ts-simstep-969a4f98-3b9d-43d4-8e21-ec8bbd08879b",
		"0cf982e9-8979-4ad6-b959-a1f8c49905f3": "src/renderer/src/edlStore.ts-simstep-e2fca9a3-8304-4d96-8390-3257aa11378f",
		"ca8ee221-dc28-4f07-8085-3a2c4ca16031": "src/renderer/src/App.tsx-simstep-9d4ffd66-54f5-4ba1-91eb-61e3a18cf945",
		"07884426-3661-4afd-84bd-2d95ac503260": "src/main/menu.ts-simstep-ea2fa0b3-d112-4d0f-ae15-13f78ea94830",
		"c4b9525b-fa35-4273-ab18-aae9e291bdde": "src/renderer/src/App.tsx-simstep-135656a2-a458-49f3-993c-c810e9de3e9a",
		"362d362c-47d4-481b-8691-e9fd87d7311f": "src/renderer/src/edlStore.ts-simstep-c60cb2ff-055f-459f-adb1-ede0e4696123",
		"51002018-47ae-42b5-a51a-6cc103e3d397": "src/renderer/src/edlStore.ts-simstep-e7014807-34fb-4755-b27e-f90f2250ddda",
		"c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6": "generated-edge-simstep-ae71618e-a4ed-4f87-bc77-dfaf30be84b3-c346c9fc-f46f-4cad-b4d9-17d2b3b4fdf6",
		"e2e7f492-a2c2-4697-8cd7-07b3379c0c85": "generated-edge-simstep-17aec12a-a2b2-49d2-b468-12b1fb104185-e2e7f492-a2c2-4697-8cd7-07b3379c0c85",
		"c05f5940-5d49-4b71-86a4-ebd439e5d880": "generated-edge-simstep-b3097023-d096-4a92-95d8-108e4c845f51-c05f5940-5d49-4b71-86a4-ebd439e5d880",
		"03708460-4037-41be-89d7-25b13e01cf46": "generated-edge-simstep-37434817-ce91-49d8-81e9-e5c32a4aabfc-03708460-4037-41be-89d7-25b13e01cf46",
		"46418920-153e-4c85-97a1-9d7468c27c4a": "generated-edge-simstep-c5621546-2cd2-4573-ba65-5a175cbe2092-46418920-153e-4c85-97a1-9d7468c27c4a",
		"145fc4e6-761b-4430-8120-b3f3c4b52d0c": "generated-edge-simstep-24995595-2411-4103-8c32-238672487486-145fc4e6-761b-4430-8120-b3f3c4b52d0c",
		"98244205-26ff-4fba-9c22-05113a50c751": "generated-edge-simstep-9df6ff84-6be0-4c5d-953c-3ffab39b8d73-98244205-26ff-4fba-9c22-05113a50c751",
		"dde9e8a3-d8fb-4ecb-ac6b-735a900b260a": "src/main/menu.ts-simstep-b992da02-5f62-4aaa-93a1-a3e35463a5ef",
		"c3f303b4-e2e4-4090-befc-9e5002d98c54": "src/renderer/src/App.tsx-simstep-4c52212b-5544-44fa-bb86-bf636c6ed96d",
		"6d93dcc6-f792-4d54-ac38-23a85ed98dbb": "src/renderer/src/hooks/useSegments.ts-simstep-1cdea182-4b51-444e-a4b4-056fc80443ed",
		"c309a726-3326-4aa5-8ee3-dd30fd3e1f3f": "src/main/ffmpeg.ts-simstep-0bac87ea-95e9-4b90-b96a-d610a64c1fad",
		"7c8418ca-bf26-48d9-987c-226cd976d0cb": "src/main/ffmpeg.ts-simstep-18233949-03d9-416d-9f03-60d3458ac1ed",
		"2c017872-e3f8-48aa-9e1e-93d2bc3bf809": "src/renderer/src/hooks/useSegments.ts-simstep-c33d12c2-3be2-4b6e-92c2-d91da2671f38",
		"f5d29e71-82ea-4b6e-a74a-5283380ec5db": "src/renderer/src/App.tsx-simstep-1ca4cb05-7428-4d6c-9fb6-fd4805b4f3a5",
		"f42707c2-1bec-4d3a-b361-0109ee9763e1": "src/main/menu.ts-simstep-cf6724c3-63f2-4fea-9f76-0d246ed4091d",
		"f91cbaa0-5b5a-4970-a009-ba0c59cd26ce": "src/renderer/src/hooks/useSegments.ts-simstep-a6f0b3bd-e549-429d-bb9d-63e7e803bfc8",
		"029628fc-7041-4720-b517-641ab3ed4f09": "src/renderer/src/hooks/useSegments.ts-simstep-3f2abab7-26b5-4cb6-89f5-0f45711999dd",
		"ab8351cf-d45b-4d7e-83a8-61a4c8d127cd": "src/main/ffmpeg.ts-simstep-2f1972b9-2423-4435-ab4d-9e7f6f0feb07",
		"f051e287-d1a6-4049-93e1-3c81facb3df1": "src/main/ffmpeg.ts-simstep-9805d75f-b533-4ea9-b818-6a76d9d711c6",
		"d722089a-093a-42d6-aaf2-ee9e6178acd0": "src/renderer/src/hooks/useSegments.ts-simstep-16f32b79-4285-44ec-ad28-f2604efffa04",
		"181779b8-2613-4af1-bc9d-6c2c507bd6eb": "src/renderer/src/App.tsx-simstep-cae15d6b-d7e1-4b5e-9ce7-dae4e42a933c",
		"11927875-24e2-47bf-a306-246eca2d904c": "src/main/menu.ts-simstep-1c93d318-c5b8-40b2-915f-dd98944b456f",
		"1d6d2fd0-31d7-4823-b8c0-5ef8394db821": "src/renderer/src/hooks/useSegments.ts-simstep-5c7764e5-4dca-4f31-a65f-b1a673566eb3",
		"2c637b16-8c1d-43fa-a290-f0254dedfd76": "src/renderer/src/hooks/useSegments.ts-simstep-797fc0c1-5508-455b-a075-6c9bbdfe99e2",
		"695f434e-8d1a-4d6d-a361-98ddce752592": "src/main/ffmpeg.ts-simstep-b43e3810-6711-4961-9ce9-1e9be832eaa1",
		"c5799ea3-3e22-4b94-bb3b-ccb2a4e74274": "src/main/ffmpeg.ts-simstep-774494bf-6b3a-4d1e-9195-a7e8cc4b2fdb",
		"a528150e-5b40-4ad2-bb8d-237e21afb878": "src/renderer/src/hooks/useSegments.ts-simstep-308cbc54-1373-4fcc-b1de-d73455e969ef",
		"35f5a086-80c0-4e6a-8f6e-08603af2f796": "src/renderer/src/App.tsx-simstep-9dad773b-01f8-4039-b042-6bb40d40fc14",
		"2362a313-cd9a-47d0-8046-0a88e6f0cf7a": "generated-edge-simstep-942ca4c1-0b3b-4030-bb6f-c985dc07187c-2362a313-cd9a-47d0-8046-0a88e6f0cf7a",
		"f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229": "generated-edge-simstep-d289f805-d0d6-45cf-922b-71450e8f8fa3-f2d0acd3-8cbe-4b1c-bb69-df0cb73ec229",
		"3e0b0a5f-1e92-41b5-85b2-194b46efce9b": "generated-edge-simstep-e9f2e013-dab0-4b7e-a8e9-73e3188a3fb4-3e0b0a5f-1e92-41b5-85b2-194b46efce9b",
		"c9abdd34-d0dc-42a2-ab2f-eec81d35670b": "generated-edge-simstep-58bb9984-782b-467f-bded-126a954a5639-c9abdd34-d0dc-42a2-ab2f-eec81d35670b",
		"a1577447-fd49-4251-a0b0-a62b3908fb0d": "generated-edge-simstep-c037e3c1-34d6-4bd4-a8ee-85eb1c7300d1-a1577447-fd49-4251-a0b0-a62b3908fb0d",
		"cfd52763-30a8-444b-8e68-00cb81f6b267": "generated-edge-simstep-716694dd-986f-43d5-a760-338d5cff8d42-cfd52763-30a8-444b-8e68-00cb81f6b267",
		"52244aa2-c876-4d40-86da-b03ca034833b": "generated-edge-simstep-3db429cb-97bd-4ee0-b686-30adecec12c2-52244aa2-c876-4d40-86da-b03ca034833b",
		"e4ccaa03-af51-465d-b6b9-db7fc6496ddd": "generated-edge-simstep-8f883cc7-a085-4397-9db8-ec659b4a6efc-e4ccaa03-af51-465d-b6b9-db7fc6496ddd",
		"0598d104-2e45-4a38-b37c-74019b0cd15b": "generated-edge-simstep-97903c39-e1b1-4b11-82d7-ade16db77b3b-0598d104-2e45-4a38-b37c-74019b0cd15b",
		"da0d25a6-1ea4-40af-983f-3a60c179ac65": "generated-edge-simstep-2235bea4-735d-4379-a4f5-ff40341d3055-da0d25a6-1ea4-40af-983f-3a60c179ac65",
		"6ba47f79-b230-4a5f-a922-dfa59978ce2a": "generated-edge-simstep-fa17a8cb-5edb-4910-9c6b-4ac69f072ea8-6ba47f79-b230-4a5f-a922-dfa59978ce2a",
		"8b2b6b30-2303-4de0-90de-52a587fbd82a": "generated-edge-simstep-39ac225b-621d-4c7f-8acd-ad62163944b8-8b2b6b30-2303-4de0-90de-52a587fbd82a",
		"d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122": "generated-edge-simstep-314dd6fd-7f2d-4666-99e3-0abf299c03dc-d6e12a8c-0bfb-4dcc-84ca-719ae9ab4122",
		"2111c6c0-2531-4109-9dbb-5c84f6a5bb81": "generated-edge-simstep-1b248f07-2566-4457-9fba-18a447b0261a-2111c6c0-2531-4109-9dbb-5c84f6a5bb81",
		"8900a419-1ca4-4df4-958f-b19146d42fdf": "generated-edge-simstep-1ebc0436-9f5a-4d2c-8a37-b311ddbbaef7-8900a419-1ca4-4df4-958f-b19146d42fdf",
		"a529e3fe-f14c-4fa3-8ec8-6a5f040a72da": "generated-edge-simstep-d6f1a3a6-c3d0-4809-9d11-ede1e7da29ba-a529e3fe-f14c-4fa3-8ec8-6a5f040a72da",
		"6f24a616-1edf-4990-a60a-b62a4401ae33": "generated-edge-simstep-933f5032-0470-4711-ab5a-f3776528006f-6f24a616-1edf-4990-a60a-b62a4401ae33",
		"59896773-97d4-463a-a667-8e89e735a03d": "generated-edge-simstep-98e32875-67ff-4c98-983e-e267d3a0ebd4-59896773-97d4-463a-a667-8e89e735a03d",
		"cfbd6f14-5221-4cd9-b617-51b8b7d80e60": "src/renderer/src/components/OutputFormatSelect.tsx",
		"8bd2131c-dc2f-4540-9497-8db940fd4193": "src/renderer/src/components/OutputFormatSelect.tsx-simstep-b1b71a21-474c-4cd9-87f8-8975b1904582",
		"4bdfa41f-82d8-4e13-a424-ac4f58ea294c": "src/renderer/src/App.tsx-simstep-ae533980-ab84-4bcb-92a7-640e50e8cf0a",
		"a42d559e-b7e6-4483-9644-61fd0df198ea": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-7c8ef42a-dca6-408c-9029-b503989aeb8c",
		"6a0be1fe-ba72-40f5-a057-e7476b0dc871": "src/renderer/src/util/streams.ts-simstep-5bf2d9d1-75c5-49b2-bdd0-a83c1993d35a",
		"5a4117be-ae19-44ab-b7db-fc57318f70d4": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-4ba960e3-552e-40d2-b642-8635c2627854",
		"37540ce5-c11b-43d1-9741-d49ba9a2d991": "src/main/menu.ts-simstep-3a9a7494-d01b-42bc-9552-e8bb2072f113",
		"0c1ba555-bd9a-4b7b-97b1-08ad263f9661": "src/renderer/src/App.tsx-simstep-7302041e-2d68-4e62-94fc-1f7c30c44473",
		"9a1fc89a-6a17-47bb-9e5e-938be69c5abf": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-969b5adc-831c-4636-89d1-588306adbd7c",
		"2ca97a95-2641-40be-b6aa-f250bfd15a59": "generated-edge-simstep-34b81b45-7745-4121-b4b0-3271f4883aec-2ca97a95-2641-40be-b6aa-f250bfd15a59",
		"2a380a6d-dfb2-4447-87d0-6d6177c4c438": "generated-edge-simstep-a5acb054-3a7d-4d1f-83bd-144fab217e7e-2a380a6d-dfb2-4447-87d0-6d6177c4c438",
		"0c417541-d199-4e70-b614-b8fd9e98a075": "generated-edge-simstep-e43d83e8-5426-4af2-832e-4ac51d13e99b-0c417541-d199-4e70-b614-b8fd9e98a075",
		"286251c5-a82f-49ab-9659-b4eb31df25d8": "generated-edge-simstep-1996fb66-7cfa-4d9a-bc79-f2d8c1c02928-286251c5-a82f-49ab-9659-b4eb31df25d8",
		"308d5dcf-696b-4627-8b3f-90a9385c1e6a": "generated-edge-simstep-76adab98-097e-42b0-9d00-1c8f874826e0-308d5dcf-696b-4627-8b3f-90a9385c1e6a",
		"391a6321-49c1-4c55-a6aa-023c63aa6b20": "generated-edge-simstep-4161e295-816c-4a60-a519-337be05e8e37-391a6321-49c1-4c55-a6aa-023c63aa6b20",
		"8be6472e-f3d0-4fc1-b532-e75bd1740e34": "src/renderer/src/StreamsSelector.tsx-simstep-345f35f1-0bd9-4516-a0b1-87fa6e143c75",
		"f033d11b-f8d1-4a73-9a62-38bb560bd2c4": "src/renderer/src/App.tsx-simstep-a44aee87-4ac5-42e0-884b-9b0b9b3dca1d",
		"37919780-8f89-4fac-9ec4-11521e814a24": "src/renderer/src/ffmpeg.ts-simstep-95259c41-72c8-4d14-8495-0a4d68e5fe95",
		"b75eadd2-4f82-4793-b2b1-0e59b7e9e51b": "src/renderer/src/hooks/useFfmpegOperations.ts-simstep-a5ae538c-f867-4f30-ada2-395c21e25f38",
		"db4529c7-ae29-4f72-b2c8-2c1d05ee729e": "generated-edge-simstep-c58ee6c6-80ee-4e15-8c3e-43485fc9b9d6-db4529c7-ae29-4f72-b2c8-2c1d05ee729e",
		"2d3c94fa-6585-42c9-8952-7486fb0fd304": "generated-edge-simstep-5425ca5d-9dc3-4162-8b2a-8ee26d07c20d-2d3c94fa-6585-42c9-8952-7486fb0fd304",
		"5436674d-415f-44d9-a7f2-2f802908824b": "generated-edge-simstep-dc22be76-e9c4-4052-801e-36890f1c26fe-5436674d-415f-44d9-a7f2-2f802908824b"
	}
}